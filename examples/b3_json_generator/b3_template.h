// b3_template.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include "mfast.h"
namespace b3_template
{

class MDNonFix_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDNonFix_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNonFix_cref();
    template <typename T>
    MDNonFix_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDNonFix_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDNonFix_cref(const mfast::message_cref& other);

    explicit MDNonFix_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint32_cref get_DataLen() const;
    mfast::uint32_cref try_get_DataLen() const;
    mfast::byte_vector_cref get_Data() const;
    mfast::byte_vector_cref try_get_Data() const;
    mfast::ascii_string_cref get_MessageEncoding() const;
    mfast::ascii_string_cref try_get_MessageEncoding() const;

};


typedef mfast::make_aggregate_mref<MDNonFix_cref> MDNonFix_mref_base;
class MDNonFix_mref
  : public MDNonFix_mref_base
{
  typedef MDNonFix_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDNonFix_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNonFix_mref();
    template <typename T>
    MDNonFix_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDNonFix_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDNonFix_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDNonFix_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_DataLen() const;
    mfast::byte_vector_mref set_Data() const;
};

class MDNonFix
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 140
    };
    typedef mfast::template_instruction_ex<MDNonFix_cref> instruction_type;

    typedef mfast::make_message_cref<MDNonFix_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDNonFix_mref, instruction_type> mref_type;
    MDNonFix(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDNonFix(
      const MDNonFix_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDNonFix(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDNonFix(const MDNonFix&);
    MDNonFix& operator = (const MDNonFix&);
};


class MDTcpRequestReject_117_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDTcpRequestReject_117_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDTcpRequestReject_117_cref();
    template <typename T>
    MDTcpRequestReject_117_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDTcpRequestReject_117_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDTcpRequestReject_117_cref(const mfast::message_cref& other);

    explicit MDTcpRequestReject_117_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::ascii_string_cref get_MDReqRejReason() const;
    mfast::ascii_string_cref try_get_MDReqRejReason() const;
    mfast::ascii_string_cref get_Text() const;
    mfast::ascii_string_cref try_get_Text() const;

};


typedef mfast::make_aggregate_mref<MDTcpRequestReject_117_cref> MDTcpRequestReject_117_mref_base;
class MDTcpRequestReject_117_mref
  : public MDTcpRequestReject_117_mref_base
{
  typedef MDTcpRequestReject_117_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDTcpRequestReject_117_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDTcpRequestReject_117_mref();
    template <typename T>
    MDTcpRequestReject_117_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDTcpRequestReject_117_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDTcpRequestReject_117_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDTcpRequestReject_117_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::ascii_string_mref set_MDReqID() const;
    mfast::ascii_string_mref set_MDReqRejReason() const;
    mfast::ascii_string_mref set_Text() const;
    void omit_Text() const;
};

class MDTcpRequestReject_117
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 117
    };
    typedef mfast::template_instruction_ex<MDTcpRequestReject_117_cref> instruction_type;

    typedef mfast::make_message_cref<MDTcpRequestReject_117_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDTcpRequestReject_117_mref, instruction_type> mref_type;
    MDTcpRequestReject_117(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDTcpRequestReject_117(
      const MDTcpRequestReject_117_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDTcpRequestReject_117(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDTcpRequestReject_117(const MDTcpRequestReject_117&);
    MDTcpRequestReject_117& operator = (const MDTcpRequestReject_117&);
};


class MDSecurityList_149_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_149_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_149_cref();
    template <typename T>
    MDSecurityList_149_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_149_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityList_149_cref(const mfast::message_cref& other);

    explicit MDSecurityList_149_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_SendingTime() const;
    mfast::ascii_string_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TotNoRelatedSym() const;
    mfast::uint32_cref try_get_TotNoRelatedSym() const;
    mfast::ascii_string_cref get_LastFragment() const;
    mfast::ascii_string_cref try_get_LastFragment() const;

    class RelatedSym_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSym_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSym_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::ascii_string_cref get_SecurityIDSource() const;
        mfast::ascii_string_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;

        class ApplIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<ApplIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            ApplIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_ApplID() const;
            mfast::ascii_string_cref try_get_ApplID() const;

            class FeedTypes_element_cref
              : public mfast::sequence_element_cref
            {
              typedef mfast::sequence_element_cref base_type;
              public:
                typedef mfast::sequence_instruction_ex<FeedTypes_element_cref> instruction_type;
                typedef const instruction_type* instruction_cptr;
                FeedTypes_element_cref(
                  const mfast::value_storage* storage,
                  instruction_cptr            instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_cref get_MDFeedType() const;
                mfast::ascii_string_cref try_get_MDFeedType() const;
                mfast::uint32_cref get_MarketDepth() const;
                mfast::uint32_cref try_get_MarketDepth() const;
            };

            typedef mfast::make_sequence_cref<FeedTypes_element_cref> FeedTypes_cref;
            FeedTypes_cref get_FeedTypes() const;
            FeedTypes_cref try_get_FeedTypes() const;
        };

        typedef mfast::make_sequence_cref<ApplIDs_element_cref> ApplIDs_cref;
        ApplIDs_cref get_ApplIDs() const;
        ApplIDs_cref try_get_ApplIDs() const;

        class SecurityAltIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<SecurityAltIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            SecurityAltIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_SecurityAltID() const;
            mfast::ascii_string_cref try_get_SecurityAltID() const;
            mfast::ascii_string_cref get_SecurityAltIDSource() const;
            mfast::ascii_string_cref try_get_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_cref<SecurityAltIDs_element_cref> SecurityAltIDs_cref;
        SecurityAltIDs_cref get_SecurityAltIDs() const;
        SecurityAltIDs_cref try_get_SecurityAltIDs() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_UnderlyingSymbol() const;
            mfast::ascii_string_cref try_get_UnderlyingSymbol() const;
            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::ascii_string_cref get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_IndexPct() const;
            mfast::decimal_cref try_get_IndexPct() const;
            mfast::decimal_cref get_IndexTheoreticalQty() const;
            mfast::decimal_cref try_get_IndexTheoreticalQty() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::int32_cref get_ImpliedMarketIndicator() const;
        mfast::int32_cref try_get_ImpliedMarketIndicator() const;

        class InstrAttrib_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<InstrAttrib_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            InstrAttrib_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_cref get_InstAttribType() const;
            mfast::int32_cref try_get_InstAttribType() const;
            mfast::ascii_string_cref get_InstAttribValue() const;
            mfast::ascii_string_cref try_get_InstAttribValue() const;
        };

        typedef mfast::make_sequence_cref<InstrAttrib_element_cref> InstrAttrib_cref;
        InstrAttrib_cref get_InstrAttrib() const;
        InstrAttrib_cref try_get_InstrAttrib() const;

        class TickRules_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<TickRules_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            TickRules_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::decimal_cref get_StartTickPriceRange() const;
            mfast::decimal_cref try_get_StartTickPriceRange() const;
            mfast::decimal_cref get_EndTickPriceRange() const;
            mfast::decimal_cref try_get_EndTickPriceRange() const;
            mfast::decimal_cref get_TickIncrement() const;
            mfast::decimal_cref try_get_TickIncrement() const;
            mfast::int32_cref get_TickRuleType() const;
            mfast::int32_cref try_get_TickRuleType() const;
        };

        typedef mfast::make_sequence_cref<TickRules_element_cref> TickRules_cref;
        TickRules_cref get_TickRules() const;
        TickRules_cref try_get_TickRules() const;

        class Legs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Legs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Legs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_LegSymbol() const;
            mfast::ascii_string_cref try_get_LegSymbol() const;
            mfast::uint64_cref get_LegSecurityID() const;
            mfast::uint64_cref try_get_LegSecurityID() const;
            mfast::ascii_string_cref get_LegSecurityIDSource() const;
            mfast::ascii_string_cref try_get_LegSecurityIDSource() const;
            mfast::int32_cref get_LegRatioQty() const;
            mfast::int32_cref try_get_LegRatioQty() const;
            mfast::ascii_string_cref get_LegSecurityType() const;
            mfast::ascii_string_cref try_get_LegSecurityType() const;
            mfast::int32_cref get_LegSide() const;
            mfast::int32_cref try_get_LegSide() const;
            mfast::ascii_string_cref get_LegSecurityExchange() const;
            mfast::ascii_string_cref try_get_LegSecurityExchange() const;
        };

        typedef mfast::make_sequence_cref<Legs_element_cref> Legs_cref;
        Legs_cref get_Legs() const;
        Legs_cref try_get_Legs() const;
        mfast::ascii_string_cref get_SecurityUpdateAction() const;
        mfast::ascii_string_cref try_get_SecurityUpdateAction() const;

        class Lots_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Lots_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Lots_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_cref get_LotType() const;
            mfast::int32_cref try_get_LotType() const;
            mfast::uint32_cref get_MinLotSize() const;
            mfast::uint32_cref try_get_MinLotSize() const;
        };

        typedef mfast::make_sequence_cref<Lots_element_cref> Lots_cref;
        Lots_cref get_Lots() const;
        Lots_cref try_get_Lots() const;
        mfast::decimal_cref get_MinPriceIncrement() const;
        mfast::decimal_cref try_get_MinPriceIncrement() const;
        mfast::uint32_cref get_TickSizeDenominator() const;
        mfast::uint32_cref try_get_TickSizeDenominator() const;
        mfast::decimal_cref get_PriceDivisor() const;
        mfast::decimal_cref try_get_PriceDivisor() const;
        mfast::uint32_cref get_MinOrderQty() const;
        mfast::uint32_cref try_get_MinOrderQty() const;
        mfast::uint64_cref get_MaxOrderQty() const;
        mfast::uint64_cref try_get_MaxOrderQty() const;
        mfast::int32_cref get_MultiLegModel() const;
        mfast::int32_cref try_get_MultiLegModel() const;
        mfast::int32_cref get_MultiLegPriceMethod() const;
        mfast::int32_cref try_get_MultiLegPriceMethod() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::ascii_string_cref get_SettlCurrency() const;
        mfast::ascii_string_cref try_get_SettlCurrency() const;
        mfast::int32_cref get_Product() const;
        mfast::int32_cref try_get_Product() const;
        mfast::ascii_string_cref get_SecurityType() const;
        mfast::ascii_string_cref try_get_SecurityType() const;
        mfast::ascii_string_cref get_SecuritySubType() const;
        mfast::ascii_string_cref try_get_SecuritySubType() const;
        mfast::ascii_string_cref get_SecurityStrategyType() const;
        mfast::ascii_string_cref try_get_SecurityStrategyType() const;
        mfast::ascii_string_cref get_Asset() const;
        mfast::ascii_string_cref try_get_Asset() const;
        mfast::ascii_string_cref get_SecurityDesc() const;
        mfast::ascii_string_cref try_get_SecurityDesc() const;
        mfast::uint64_cref get_NoShareIssued() const;
        mfast::uint64_cref try_get_NoShareIssued() const;
        mfast::uint32_cref get_MaturityDate() const;
        mfast::uint32_cref try_get_MaturityDate() const;
        mfast::uint32_cref get_MaturityMonthYear() const;
        mfast::uint32_cref try_get_MaturityMonthYear() const;
        mfast::decimal_cref get_StrikePrice() const;
        mfast::decimal_cref try_get_StrikePrice() const;
        mfast::ascii_string_cref get_StrikeCurrency() const;
        mfast::ascii_string_cref try_get_StrikeCurrency() const;
        mfast::int32_cref get_ExerciseStyle() const;
        mfast::int32_cref try_get_ExerciseStyle() const;
        mfast::int32_cref get_PutOrCall() const;
        mfast::int32_cref try_get_PutOrCall() const;
        mfast::decimal_cref get_ContractMultiplier() const;
        mfast::decimal_cref try_get_ContractMultiplier() const;
        mfast::uint32_cref get_ContractSettlMonth() const;
        mfast::uint32_cref try_get_ContractSettlMonth() const;
        mfast::ascii_string_cref get_CFICode() const;
        mfast::ascii_string_cref try_get_CFICode() const;
        mfast::ascii_string_cref get_CountryOfIssue() const;
        mfast::ascii_string_cref try_get_CountryOfIssue() const;
        mfast::uint32_cref get_IssueDate() const;
        mfast::uint32_cref try_get_IssueDate() const;
        mfast::uint32_cref get_DatedDate() const;
        mfast::uint32_cref try_get_DatedDate() const;
        mfast::uint32_cref get_StartDate() const;
        mfast::uint32_cref try_get_StartDate() const;
        mfast::uint32_cref get_EndDate() const;
        mfast::uint32_cref try_get_EndDate() const;
        mfast::ascii_string_cref get_SettlType() const;
        mfast::ascii_string_cref try_get_SettlType() const;
        mfast::uint32_cref get_SettlDate() const;
        mfast::uint32_cref try_get_SettlDate() const;
        mfast::uint64_cref get_SecurityValidityTimestamp() const;
        mfast::uint64_cref try_get_SecurityValidityTimestamp() const;
        mfast::ascii_string_cref get_MarketSegmentID() const;
        mfast::ascii_string_cref try_get_MarketSegmentID() const;
        mfast::ascii_string_cref get_GovernanceIndicator() const;
        mfast::ascii_string_cref try_get_GovernanceIndicator() const;
        mfast::int32_cref get_CorporateActionEventID() const;
        mfast::int32_cref try_get_CorporateActionEventID() const;
        mfast::ascii_string_cref get_SecurityGroup() const;
        mfast::ascii_string_cref try_get_SecurityGroup() const;
        mfast::int32_cref get_SecurityMatchType() const;
        mfast::int32_cref try_get_SecurityMatchType() const;
    };

    typedef mfast::make_sequence_cref<RelatedSym_element_cref> RelatedSym_cref;
    RelatedSym_cref get_RelatedSym() const;
    RelatedSym_cref try_get_RelatedSym() const;

};


typedef mfast::make_aggregate_mref<MDSecurityList_149_cref> MDSecurityList_149_mref_base;
class MDSecurityList_149_mref
  : public MDSecurityList_149_mref_base
{
  typedef MDSecurityList_149_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_149_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_149_mref();
    template <typename T>
    MDSecurityList_149_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_149_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityList_149_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityList_149_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::ascii_string_mref set_SendingTime() const;
    mfast::uint32_mref set_TotNoRelatedSym() const;
    mfast::ascii_string_mref set_LastFragment() const;

    class RelatedSym_element_mref
      : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref> base_type;
      public:
        RelatedSym_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_Symbol() const;
        mfast::uint64_mref set_SecurityID() const;

        class ApplIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref> base_type;
          public:
            ApplIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_ApplID() const;

            class FeedTypes_element_mref
              : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref>
            {
              typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref> base_type;
              public:
                FeedTypes_element_mref(
                  mfast::allocator*     alloc,
                  mfast::value_storage* storage,
                  instruction_cptr      instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_mref set_MDFeedType() const;
                mfast::uint32_mref set_MarketDepth() const;
            };

            typedef mfast::make_sequence_mref<FeedTypes_element_mref> FeedTypes_mref;
            FeedTypes_mref set_FeedTypes() const;
            void omit_FeedTypes() const;
        };

        typedef mfast::make_sequence_mref<ApplIDs_element_mref> ApplIDs_mref;
        ApplIDs_mref set_ApplIDs() const;

        class SecurityAltIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref> base_type;
          public:
            SecurityAltIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_SecurityAltID() const;
            mfast::ascii_string_mref set_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_mref<SecurityAltIDs_element_mref> SecurityAltIDs_mref;
        SecurityAltIDs_mref set_SecurityAltIDs() const;
        void omit_SecurityAltIDs() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_UnderlyingSymbol() const;
            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_IndexPct() const;
            void omit_IndexPct() const;
            mfast::decimal_mref set_IndexTheoreticalQty() const;
            void omit_IndexTheoreticalQty() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::int32_mref set_ImpliedMarketIndicator() const;
        void omit_ImpliedMarketIndicator() const;

        class InstrAttrib_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref> base_type;
          public:
            InstrAttrib_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_mref set_InstAttribType() const;
            void omit_InstAttribType() const;
            mfast::ascii_string_mref set_InstAttribValue() const;
            void omit_InstAttribValue() const;
        };

        typedef mfast::make_sequence_mref<InstrAttrib_element_mref> InstrAttrib_mref;
        InstrAttrib_mref set_InstrAttrib() const;
        void omit_InstrAttrib() const;

        class TickRules_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref> base_type;
          public:
            TickRules_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::decimal_mref set_StartTickPriceRange() const;
            void omit_StartTickPriceRange() const;
            mfast::decimal_mref set_EndTickPriceRange() const;
            void omit_EndTickPriceRange() const;
            mfast::decimal_mref set_TickIncrement() const;
            void omit_TickIncrement() const;
            mfast::int32_mref set_TickRuleType() const;
            void omit_TickRuleType() const;
        };

        typedef mfast::make_sequence_mref<TickRules_element_mref> TickRules_mref;
        TickRules_mref set_TickRules() const;
        void omit_TickRules() const;

        class Legs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref> base_type;
          public:
            Legs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_LegSymbol() const;
            mfast::uint64_mref set_LegSecurityID() const;
            mfast::int32_mref set_LegRatioQty() const;
            mfast::ascii_string_mref set_LegSecurityType() const;
            mfast::int32_mref set_LegSide() const;
        };

        typedef mfast::make_sequence_mref<Legs_element_mref> Legs_mref;
        Legs_mref set_Legs() const;
        void omit_Legs() const;
        mfast::ascii_string_mref set_SecurityUpdateAction() const;

        class Lots_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref> base_type;
          public:
            Lots_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_mref set_LotType() const;
            void omit_LotType() const;
            mfast::uint32_mref set_MinLotSize() const;
            void omit_MinLotSize() const;
        };

        typedef mfast::make_sequence_mref<Lots_element_mref> Lots_mref;
        Lots_mref set_Lots() const;
        void omit_Lots() const;
        mfast::decimal_mref set_MinPriceIncrement() const;
        void omit_MinPriceIncrement() const;
        mfast::uint32_mref set_TickSizeDenominator() const;
        void omit_TickSizeDenominator() const;
        mfast::decimal_mref set_PriceDivisor() const;
        void omit_PriceDivisor() const;
        mfast::uint32_mref set_MinOrderQty() const;
        void omit_MinOrderQty() const;
        mfast::uint64_mref set_MaxOrderQty() const;
        void omit_MaxOrderQty() const;
        mfast::int32_mref set_MultiLegModel() const;
        void omit_MultiLegModel() const;
        mfast::int32_mref set_MultiLegPriceMethod() const;
        void omit_MultiLegPriceMethod() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::ascii_string_mref set_SettlCurrency() const;
        void omit_SettlCurrency() const;
        mfast::int32_mref set_Product() const;
        mfast::ascii_string_mref set_SecurityType() const;
        mfast::ascii_string_mref set_SecuritySubType() const;
        mfast::ascii_string_mref set_SecurityStrategyType() const;
        void omit_SecurityStrategyType() const;
        mfast::ascii_string_mref set_Asset() const;
        void omit_Asset() const;
        mfast::ascii_string_mref set_SecurityDesc() const;
        mfast::uint64_mref set_NoShareIssued() const;
        void omit_NoShareIssued() const;
        mfast::uint32_mref set_MaturityDate() const;
        void omit_MaturityDate() const;
        mfast::uint32_mref set_MaturityMonthYear() const;
        void omit_MaturityMonthYear() const;
        mfast::decimal_mref set_StrikePrice() const;
        void omit_StrikePrice() const;
        mfast::ascii_string_mref set_StrikeCurrency() const;
        void omit_StrikeCurrency() const;
        mfast::int32_mref set_ExerciseStyle() const;
        void omit_ExerciseStyle() const;
        mfast::int32_mref set_PutOrCall() const;
        void omit_PutOrCall() const;
        mfast::decimal_mref set_ContractMultiplier() const;
        void omit_ContractMultiplier() const;
        mfast::uint32_mref set_ContractSettlMonth() const;
        void omit_ContractSettlMonth() const;
        mfast::ascii_string_mref set_CFICode() const;
        mfast::ascii_string_mref set_CountryOfIssue() const;
        mfast::uint32_mref set_IssueDate() const;
        mfast::uint32_mref set_DatedDate() const;
        void omit_DatedDate() const;
        mfast::uint32_mref set_StartDate() const;
        void omit_StartDate() const;
        mfast::uint32_mref set_EndDate() const;
        void omit_EndDate() const;
        mfast::ascii_string_mref set_SettlType() const;
        void omit_SettlType() const;
        mfast::uint32_mref set_SettlDate() const;
        void omit_SettlDate() const;
        mfast::uint64_mref set_SecurityValidityTimestamp() const;
        mfast::ascii_string_mref set_MarketSegmentID() const;
        void omit_MarketSegmentID() const;
        mfast::ascii_string_mref set_GovernanceIndicator() const;
        void omit_GovernanceIndicator() const;
        mfast::int32_mref set_CorporateActionEventID() const;
        void omit_CorporateActionEventID() const;
        mfast::ascii_string_mref set_SecurityGroup() const;
        mfast::int32_mref set_SecurityMatchType() const;
        void omit_SecurityMatchType() const;
    };

    typedef mfast::make_sequence_mref<RelatedSym_element_mref> RelatedSym_mref;
    RelatedSym_mref set_RelatedSym() const;
};

class MDSecurityList_149
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 149
    };
    typedef mfast::template_instruction_ex<MDSecurityList_149_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityList_149_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityList_149_mref, instruction_type> mref_type;
    MDSecurityList_149(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityList_149(
      const MDSecurityList_149_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityList_149(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityList_149(const MDSecurityList_149&);
    MDSecurityList_149& operator = (const MDSecurityList_149&);
};


class MDSecurityList_148_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_148_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_148_cref();
    template <typename T>
    MDSecurityList_148_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_148_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityList_148_cref(const mfast::message_cref& other);

    explicit MDSecurityList_148_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_SendingTime() const;
    mfast::ascii_string_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TotNoRelatedSym() const;
    mfast::uint32_cref try_get_TotNoRelatedSym() const;
    mfast::ascii_string_cref get_LastFragment() const;
    mfast::ascii_string_cref try_get_LastFragment() const;

    class RelatedSym_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSym_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSym_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::ascii_string_cref get_SecurityIDSource() const;
        mfast::ascii_string_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;

        class ApplIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<ApplIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            ApplIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_ApplID() const;
            mfast::ascii_string_cref try_get_ApplID() const;

            class FeedTypes_element_cref
              : public mfast::sequence_element_cref
            {
              typedef mfast::sequence_element_cref base_type;
              public:
                typedef mfast::sequence_instruction_ex<FeedTypes_element_cref> instruction_type;
                typedef const instruction_type* instruction_cptr;
                FeedTypes_element_cref(
                  const mfast::value_storage* storage,
                  instruction_cptr            instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_cref get_MDFeedType() const;
                mfast::ascii_string_cref try_get_MDFeedType() const;
                mfast::uint32_cref get_MarketDepth() const;
                mfast::uint32_cref try_get_MarketDepth() const;
            };

            typedef mfast::make_sequence_cref<FeedTypes_element_cref> FeedTypes_cref;
            FeedTypes_cref get_FeedTypes() const;
            FeedTypes_cref try_get_FeedTypes() const;
        };

        typedef mfast::make_sequence_cref<ApplIDs_element_cref> ApplIDs_cref;
        ApplIDs_cref get_ApplIDs() const;
        ApplIDs_cref try_get_ApplIDs() const;

        class SecurityAltIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<SecurityAltIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            SecurityAltIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_SecurityAltID() const;
            mfast::ascii_string_cref try_get_SecurityAltID() const;
            mfast::ascii_string_cref get_SecurityAltIDSource() const;
            mfast::ascii_string_cref try_get_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_cref<SecurityAltIDs_element_cref> SecurityAltIDs_cref;
        SecurityAltIDs_cref get_SecurityAltIDs() const;
        SecurityAltIDs_cref try_get_SecurityAltIDs() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_UnderlyingSymbol() const;
            mfast::ascii_string_cref try_get_UnderlyingSymbol() const;
            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::ascii_string_cref get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_IndexPct() const;
            mfast::decimal_cref try_get_IndexPct() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::int32_cref get_ImpliedMarketIndicator() const;
        mfast::int32_cref try_get_ImpliedMarketIndicator() const;

        class InstrAttrib_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<InstrAttrib_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            InstrAttrib_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_cref get_InstAttribType() const;
            mfast::int32_cref try_get_InstAttribType() const;
            mfast::ascii_string_cref get_InstAttribValue() const;
            mfast::ascii_string_cref try_get_InstAttribValue() const;
        };

        typedef mfast::make_sequence_cref<InstrAttrib_element_cref> InstrAttrib_cref;
        InstrAttrib_cref get_InstrAttrib() const;
        InstrAttrib_cref try_get_InstrAttrib() const;

        class TickRules_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<TickRules_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            TickRules_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::decimal_cref get_StartTickPriceRange() const;
            mfast::decimal_cref try_get_StartTickPriceRange() const;
            mfast::decimal_cref get_EndTickPriceRange() const;
            mfast::decimal_cref try_get_EndTickPriceRange() const;
            mfast::decimal_cref get_TickIncrement() const;
            mfast::decimal_cref try_get_TickIncrement() const;
            mfast::int32_cref get_TickRuleType() const;
            mfast::int32_cref try_get_TickRuleType() const;
        };

        typedef mfast::make_sequence_cref<TickRules_element_cref> TickRules_cref;
        TickRules_cref get_TickRules() const;
        TickRules_cref try_get_TickRules() const;

        class Legs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Legs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Legs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_LegSymbol() const;
            mfast::ascii_string_cref try_get_LegSymbol() const;
            mfast::uint64_cref get_LegSecurityID() const;
            mfast::uint64_cref try_get_LegSecurityID() const;
            mfast::ascii_string_cref get_LegSecurityIDSource() const;
            mfast::ascii_string_cref try_get_LegSecurityIDSource() const;
            mfast::int32_cref get_LegRatioQty() const;
            mfast::int32_cref try_get_LegRatioQty() const;
            mfast::ascii_string_cref get_LegSecurityType() const;
            mfast::ascii_string_cref try_get_LegSecurityType() const;
            mfast::int32_cref get_LegSide() const;
            mfast::int32_cref try_get_LegSide() const;
            mfast::ascii_string_cref get_LegSecurityExchange() const;
            mfast::ascii_string_cref try_get_LegSecurityExchange() const;
        };

        typedef mfast::make_sequence_cref<Legs_element_cref> Legs_cref;
        Legs_cref get_Legs() const;
        Legs_cref try_get_Legs() const;
        mfast::ascii_string_cref get_SecurityUpdateAction() const;
        mfast::ascii_string_cref try_get_SecurityUpdateAction() const;

        class Lots_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Lots_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Lots_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_cref get_LotType() const;
            mfast::int32_cref try_get_LotType() const;
            mfast::uint32_cref get_MinLotSize() const;
            mfast::uint32_cref try_get_MinLotSize() const;
        };

        typedef mfast::make_sequence_cref<Lots_element_cref> Lots_cref;
        Lots_cref get_Lots() const;
        Lots_cref try_get_Lots() const;
        mfast::decimal_cref get_MinPriceIncrement() const;
        mfast::decimal_cref try_get_MinPriceIncrement() const;
        mfast::uint32_cref get_TickSizeDenominator() const;
        mfast::uint32_cref try_get_TickSizeDenominator() const;
        mfast::decimal_cref get_PriceDivisor() const;
        mfast::decimal_cref try_get_PriceDivisor() const;
        mfast::uint32_cref get_MinOrderQty() const;
        mfast::uint32_cref try_get_MinOrderQty() const;
        mfast::uint64_cref get_MaxOrderQty() const;
        mfast::uint64_cref try_get_MaxOrderQty() const;
        mfast::int32_cref get_MultiLegModel() const;
        mfast::int32_cref try_get_MultiLegModel() const;
        mfast::int32_cref get_MultiLegPriceMethod() const;
        mfast::int32_cref try_get_MultiLegPriceMethod() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::ascii_string_cref get_SettlCurrency() const;
        mfast::ascii_string_cref try_get_SettlCurrency() const;
        mfast::int32_cref get_Product() const;
        mfast::int32_cref try_get_Product() const;
        mfast::ascii_string_cref get_SecurityType() const;
        mfast::ascii_string_cref try_get_SecurityType() const;
        mfast::ascii_string_cref get_SecuritySubType() const;
        mfast::ascii_string_cref try_get_SecuritySubType() const;
        mfast::ascii_string_cref get_SecurityStrategyType() const;
        mfast::ascii_string_cref try_get_SecurityStrategyType() const;
        mfast::ascii_string_cref get_Asset() const;
        mfast::ascii_string_cref try_get_Asset() const;
        mfast::ascii_string_cref get_SecurityDesc() const;
        mfast::ascii_string_cref try_get_SecurityDesc() const;
        mfast::uint64_cref get_NoShareIssued() const;
        mfast::uint64_cref try_get_NoShareIssued() const;
        mfast::uint32_cref get_MaturityDate() const;
        mfast::uint32_cref try_get_MaturityDate() const;
        mfast::uint32_cref get_MaturityMonthYear() const;
        mfast::uint32_cref try_get_MaturityMonthYear() const;
        mfast::decimal_cref get_StrikePrice() const;
        mfast::decimal_cref try_get_StrikePrice() const;
        mfast::ascii_string_cref get_StrikeCurrency() const;
        mfast::ascii_string_cref try_get_StrikeCurrency() const;
        mfast::int32_cref get_ExerciseStyle() const;
        mfast::int32_cref try_get_ExerciseStyle() const;
        mfast::int32_cref get_PutOrCall() const;
        mfast::int32_cref try_get_PutOrCall() const;
        mfast::decimal_cref get_ContractMultiplier() const;
        mfast::decimal_cref try_get_ContractMultiplier() const;
        mfast::uint32_cref get_ContractSettlMonth() const;
        mfast::uint32_cref try_get_ContractSettlMonth() const;
        mfast::ascii_string_cref get_CFICode() const;
        mfast::ascii_string_cref try_get_CFICode() const;
        mfast::ascii_string_cref get_CountryOfIssue() const;
        mfast::ascii_string_cref try_get_CountryOfIssue() const;
        mfast::uint32_cref get_IssueDate() const;
        mfast::uint32_cref try_get_IssueDate() const;
        mfast::uint32_cref get_DatedDate() const;
        mfast::uint32_cref try_get_DatedDate() const;
        mfast::uint32_cref get_StartDate() const;
        mfast::uint32_cref try_get_StartDate() const;
        mfast::uint32_cref get_EndDate() const;
        mfast::uint32_cref try_get_EndDate() const;
        mfast::ascii_string_cref get_SettlType() const;
        mfast::ascii_string_cref try_get_SettlType() const;
        mfast::uint32_cref get_SettlDate() const;
        mfast::uint32_cref try_get_SettlDate() const;
        mfast::uint64_cref get_SecurityValidityTimestamp() const;
        mfast::uint64_cref try_get_SecurityValidityTimestamp() const;
        mfast::ascii_string_cref get_MarketSegmentID() const;
        mfast::ascii_string_cref try_get_MarketSegmentID() const;
        mfast::ascii_string_cref get_GovernanceIndicator() const;
        mfast::ascii_string_cref try_get_GovernanceIndicator() const;
        mfast::int32_cref get_CorporateActionEventID() const;
        mfast::int32_cref try_get_CorporateActionEventID() const;
        mfast::ascii_string_cref get_SecurityGroup() const;
        mfast::ascii_string_cref try_get_SecurityGroup() const;
        mfast::int32_cref get_SecurityMatchType() const;
        mfast::int32_cref try_get_SecurityMatchType() const;
    };

    typedef mfast::make_sequence_cref<RelatedSym_element_cref> RelatedSym_cref;
    RelatedSym_cref get_RelatedSym() const;
    RelatedSym_cref try_get_RelatedSym() const;

};


typedef mfast::make_aggregate_mref<MDSecurityList_148_cref> MDSecurityList_148_mref_base;
class MDSecurityList_148_mref
  : public MDSecurityList_148_mref_base
{
  typedef MDSecurityList_148_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_148_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_148_mref();
    template <typename T>
    MDSecurityList_148_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_148_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityList_148_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityList_148_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::ascii_string_mref set_SendingTime() const;
    mfast::uint32_mref set_TotNoRelatedSym() const;
    mfast::ascii_string_mref set_LastFragment() const;

    class RelatedSym_element_mref
      : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref> base_type;
      public:
        RelatedSym_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_Symbol() const;
        mfast::uint64_mref set_SecurityID() const;

        class ApplIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref> base_type;
          public:
            ApplIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_ApplID() const;

            class FeedTypes_element_mref
              : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref>
            {
              typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref> base_type;
              public:
                FeedTypes_element_mref(
                  mfast::allocator*     alloc,
                  mfast::value_storage* storage,
                  instruction_cptr      instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_mref set_MDFeedType() const;
                mfast::uint32_mref set_MarketDepth() const;
            };

            typedef mfast::make_sequence_mref<FeedTypes_element_mref> FeedTypes_mref;
            FeedTypes_mref set_FeedTypes() const;
            void omit_FeedTypes() const;
        };

        typedef mfast::make_sequence_mref<ApplIDs_element_mref> ApplIDs_mref;
        ApplIDs_mref set_ApplIDs() const;

        class SecurityAltIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref> base_type;
          public:
            SecurityAltIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_SecurityAltID() const;
            mfast::ascii_string_mref set_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_mref<SecurityAltIDs_element_mref> SecurityAltIDs_mref;
        SecurityAltIDs_mref set_SecurityAltIDs() const;
        void omit_SecurityAltIDs() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_UnderlyingSymbol() const;
            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_IndexPct() const;
            void omit_IndexPct() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::int32_mref set_ImpliedMarketIndicator() const;
        void omit_ImpliedMarketIndicator() const;

        class InstrAttrib_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref> base_type;
          public:
            InstrAttrib_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_mref set_InstAttribType() const;
            void omit_InstAttribType() const;
            mfast::ascii_string_mref set_InstAttribValue() const;
            void omit_InstAttribValue() const;
        };

        typedef mfast::make_sequence_mref<InstrAttrib_element_mref> InstrAttrib_mref;
        InstrAttrib_mref set_InstrAttrib() const;
        void omit_InstrAttrib() const;

        class TickRules_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref> base_type;
          public:
            TickRules_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::decimal_mref set_StartTickPriceRange() const;
            void omit_StartTickPriceRange() const;
            mfast::decimal_mref set_EndTickPriceRange() const;
            void omit_EndTickPriceRange() const;
            mfast::decimal_mref set_TickIncrement() const;
            void omit_TickIncrement() const;
            mfast::int32_mref set_TickRuleType() const;
            void omit_TickRuleType() const;
        };

        typedef mfast::make_sequence_mref<TickRules_element_mref> TickRules_mref;
        TickRules_mref set_TickRules() const;
        void omit_TickRules() const;

        class Legs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref> base_type;
          public:
            Legs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_LegSymbol() const;
            mfast::uint64_mref set_LegSecurityID() const;
            mfast::int32_mref set_LegRatioQty() const;
            mfast::ascii_string_mref set_LegSecurityType() const;
            mfast::int32_mref set_LegSide() const;
        };

        typedef mfast::make_sequence_mref<Legs_element_mref> Legs_mref;
        Legs_mref set_Legs() const;
        void omit_Legs() const;
        mfast::ascii_string_mref set_SecurityUpdateAction() const;

        class Lots_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref> base_type;
          public:
            Lots_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_mref set_LotType() const;
            void omit_LotType() const;
            mfast::uint32_mref set_MinLotSize() const;
            void omit_MinLotSize() const;
        };

        typedef mfast::make_sequence_mref<Lots_element_mref> Lots_mref;
        Lots_mref set_Lots() const;
        void omit_Lots() const;
        mfast::decimal_mref set_MinPriceIncrement() const;
        void omit_MinPriceIncrement() const;
        mfast::uint32_mref set_TickSizeDenominator() const;
        void omit_TickSizeDenominator() const;
        mfast::decimal_mref set_PriceDivisor() const;
        void omit_PriceDivisor() const;
        mfast::uint32_mref set_MinOrderQty() const;
        void omit_MinOrderQty() const;
        mfast::uint64_mref set_MaxOrderQty() const;
        void omit_MaxOrderQty() const;
        mfast::int32_mref set_MultiLegModel() const;
        void omit_MultiLegModel() const;
        mfast::int32_mref set_MultiLegPriceMethod() const;
        void omit_MultiLegPriceMethod() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::ascii_string_mref set_SettlCurrency() const;
        void omit_SettlCurrency() const;
        mfast::int32_mref set_Product() const;
        mfast::ascii_string_mref set_SecurityType() const;
        mfast::ascii_string_mref set_SecuritySubType() const;
        mfast::ascii_string_mref set_SecurityStrategyType() const;
        void omit_SecurityStrategyType() const;
        mfast::ascii_string_mref set_Asset() const;
        void omit_Asset() const;
        mfast::ascii_string_mref set_SecurityDesc() const;
        mfast::uint64_mref set_NoShareIssued() const;
        void omit_NoShareIssued() const;
        mfast::uint32_mref set_MaturityDate() const;
        void omit_MaturityDate() const;
        mfast::uint32_mref set_MaturityMonthYear() const;
        void omit_MaturityMonthYear() const;
        mfast::decimal_mref set_StrikePrice() const;
        void omit_StrikePrice() const;
        mfast::ascii_string_mref set_StrikeCurrency() const;
        void omit_StrikeCurrency() const;
        mfast::int32_mref set_ExerciseStyle() const;
        void omit_ExerciseStyle() const;
        mfast::int32_mref set_PutOrCall() const;
        void omit_PutOrCall() const;
        mfast::decimal_mref set_ContractMultiplier() const;
        void omit_ContractMultiplier() const;
        mfast::uint32_mref set_ContractSettlMonth() const;
        void omit_ContractSettlMonth() const;
        mfast::ascii_string_mref set_CFICode() const;
        mfast::ascii_string_mref set_CountryOfIssue() const;
        mfast::uint32_mref set_IssueDate() const;
        mfast::uint32_mref set_DatedDate() const;
        void omit_DatedDate() const;
        mfast::uint32_mref set_StartDate() const;
        void omit_StartDate() const;
        mfast::uint32_mref set_EndDate() const;
        void omit_EndDate() const;
        mfast::ascii_string_mref set_SettlType() const;
        void omit_SettlType() const;
        mfast::uint32_mref set_SettlDate() const;
        void omit_SettlDate() const;
        mfast::uint64_mref set_SecurityValidityTimestamp() const;
        mfast::ascii_string_mref set_MarketSegmentID() const;
        void omit_MarketSegmentID() const;
        mfast::ascii_string_mref set_GovernanceIndicator() const;
        void omit_GovernanceIndicator() const;
        mfast::int32_mref set_CorporateActionEventID() const;
        void omit_CorporateActionEventID() const;
        mfast::ascii_string_mref set_SecurityGroup() const;
        mfast::int32_mref set_SecurityMatchType() const;
        void omit_SecurityMatchType() const;
    };

    typedef mfast::make_sequence_mref<RelatedSym_element_mref> RelatedSym_mref;
    RelatedSym_mref set_RelatedSym() const;
};

class MDSecurityList_148
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 148
    };
    typedef mfast::template_instruction_ex<MDSecurityList_148_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityList_148_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityList_148_mref, instruction_type> mref_type;
    MDSecurityList_148(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityList_148(
      const MDSecurityList_148_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityList_148(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityList_148(const MDSecurityList_148&);
    MDSecurityList_148& operator = (const MDSecurityList_148&);
};


class MDSecurityList_141_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_141_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_141_cref();
    template <typename T>
    MDSecurityList_141_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_141_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityList_141_cref(const mfast::message_cref& other);

    explicit MDSecurityList_141_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_SendingTime() const;
    mfast::ascii_string_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TotNoRelatedSym() const;
    mfast::uint32_cref try_get_TotNoRelatedSym() const;
    mfast::ascii_string_cref get_LastFragment() const;
    mfast::ascii_string_cref try_get_LastFragment() const;

    class RelatedSym_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSym_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSym_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::ascii_string_cref get_SecurityIDSource() const;
        mfast::ascii_string_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;

        class ApplIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<ApplIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            ApplIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_ApplID() const;
            mfast::ascii_string_cref try_get_ApplID() const;

            class FeedTypes_element_cref
              : public mfast::sequence_element_cref
            {
              typedef mfast::sequence_element_cref base_type;
              public:
                typedef mfast::sequence_instruction_ex<FeedTypes_element_cref> instruction_type;
                typedef const instruction_type* instruction_cptr;
                FeedTypes_element_cref(
                  const mfast::value_storage* storage,
                  instruction_cptr            instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_cref get_MDFeedType() const;
                mfast::ascii_string_cref try_get_MDFeedType() const;
                mfast::uint32_cref get_MarketDepth() const;
                mfast::uint32_cref try_get_MarketDepth() const;
            };

            typedef mfast::make_sequence_cref<FeedTypes_element_cref> FeedTypes_cref;
            FeedTypes_cref get_FeedTypes() const;
            FeedTypes_cref try_get_FeedTypes() const;
        };

        typedef mfast::make_sequence_cref<ApplIDs_element_cref> ApplIDs_cref;
        ApplIDs_cref get_ApplIDs() const;
        ApplIDs_cref try_get_ApplIDs() const;

        class SecurityAltIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<SecurityAltIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            SecurityAltIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_SecurityAltID() const;
            mfast::ascii_string_cref try_get_SecurityAltID() const;
            mfast::ascii_string_cref get_SecurityAltIDSource() const;
            mfast::ascii_string_cref try_get_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_cref<SecurityAltIDs_element_cref> SecurityAltIDs_cref;
        SecurityAltIDs_cref get_SecurityAltIDs() const;
        SecurityAltIDs_cref try_get_SecurityAltIDs() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_UnderlyingSymbol() const;
            mfast::ascii_string_cref try_get_UnderlyingSymbol() const;
            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::ascii_string_cref get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_IndexPct() const;
            mfast::decimal_cref try_get_IndexPct() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::int32_cref get_ImpliedMarketIndicator() const;
        mfast::int32_cref try_get_ImpliedMarketIndicator() const;

        class InstrAttrib_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<InstrAttrib_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            InstrAttrib_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_cref get_InstAttribType() const;
            mfast::int32_cref try_get_InstAttribType() const;
            mfast::ascii_string_cref get_InstAttribValue() const;
            mfast::ascii_string_cref try_get_InstAttribValue() const;
        };

        typedef mfast::make_sequence_cref<InstrAttrib_element_cref> InstrAttrib_cref;
        InstrAttrib_cref get_InstrAttrib() const;
        InstrAttrib_cref try_get_InstrAttrib() const;

        class TickRules_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<TickRules_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            TickRules_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::decimal_cref get_StartTickPriceRange() const;
            mfast::decimal_cref try_get_StartTickPriceRange() const;
            mfast::decimal_cref get_EndTickPriceRange() const;
            mfast::decimal_cref try_get_EndTickPriceRange() const;
            mfast::decimal_cref get_TickIncrement() const;
            mfast::decimal_cref try_get_TickIncrement() const;
            mfast::int32_cref get_TickRuleType() const;
            mfast::int32_cref try_get_TickRuleType() const;
        };

        typedef mfast::make_sequence_cref<TickRules_element_cref> TickRules_cref;
        TickRules_cref get_TickRules() const;
        TickRules_cref try_get_TickRules() const;

        class Legs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Legs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Legs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_LegSymbol() const;
            mfast::ascii_string_cref try_get_LegSymbol() const;
            mfast::uint64_cref get_LegSecurityID() const;
            mfast::uint64_cref try_get_LegSecurityID() const;
            mfast::ascii_string_cref get_LegSecurityIDSource() const;
            mfast::ascii_string_cref try_get_LegSecurityIDSource() const;
            mfast::int32_cref get_LegRatioQty() const;
            mfast::int32_cref try_get_LegRatioQty() const;
            mfast::ascii_string_cref get_LegSecurityType() const;
            mfast::ascii_string_cref try_get_LegSecurityType() const;
            mfast::int32_cref get_LegSide() const;
            mfast::int32_cref try_get_LegSide() const;
            mfast::ascii_string_cref get_LegSecurityExchange() const;
            mfast::ascii_string_cref try_get_LegSecurityExchange() const;
        };

        typedef mfast::make_sequence_cref<Legs_element_cref> Legs_cref;
        Legs_cref get_Legs() const;
        Legs_cref try_get_Legs() const;
        mfast::ascii_string_cref get_SecurityUpdateAction() const;
        mfast::ascii_string_cref try_get_SecurityUpdateAction() const;

        class Lots_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Lots_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Lots_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_cref get_LotType() const;
            mfast::int32_cref try_get_LotType() const;
            mfast::uint32_cref get_MinLotSize() const;
            mfast::uint32_cref try_get_MinLotSize() const;
        };

        typedef mfast::make_sequence_cref<Lots_element_cref> Lots_cref;
        Lots_cref get_Lots() const;
        Lots_cref try_get_Lots() const;
        mfast::decimal_cref get_MinPriceIncrement() const;
        mfast::decimal_cref try_get_MinPriceIncrement() const;
        mfast::uint32_cref get_TickSizeDenominator() const;
        mfast::uint32_cref try_get_TickSizeDenominator() const;
        mfast::decimal_cref get_PriceDivisor() const;
        mfast::decimal_cref try_get_PriceDivisor() const;
        mfast::uint32_cref get_MinOrderQty() const;
        mfast::uint32_cref try_get_MinOrderQty() const;
        mfast::uint64_cref get_MaxOrderQty() const;
        mfast::uint64_cref try_get_MaxOrderQty() const;
        mfast::int32_cref get_MultiLegModel() const;
        mfast::int32_cref try_get_MultiLegModel() const;
        mfast::int32_cref get_MultiLegPriceMethod() const;
        mfast::int32_cref try_get_MultiLegPriceMethod() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::ascii_string_cref get_SettlCurrency() const;
        mfast::ascii_string_cref try_get_SettlCurrency() const;
        mfast::int32_cref get_Product() const;
        mfast::int32_cref try_get_Product() const;
        mfast::ascii_string_cref get_SecurityType() const;
        mfast::ascii_string_cref try_get_SecurityType() const;
        mfast::ascii_string_cref get_SecuritySubType() const;
        mfast::ascii_string_cref try_get_SecuritySubType() const;
        mfast::ascii_string_cref get_SecurityStrategyType() const;
        mfast::ascii_string_cref try_get_SecurityStrategyType() const;
        mfast::ascii_string_cref get_Asset() const;
        mfast::ascii_string_cref try_get_Asset() const;
        mfast::ascii_string_cref get_SecurityDesc() const;
        mfast::ascii_string_cref try_get_SecurityDesc() const;
        mfast::uint64_cref get_NoShareIssued() const;
        mfast::uint64_cref try_get_NoShareIssued() const;
        mfast::uint32_cref get_MaturityDate() const;
        mfast::uint32_cref try_get_MaturityDate() const;
        mfast::uint32_cref get_MaturityMonthYear() const;
        mfast::uint32_cref try_get_MaturityMonthYear() const;
        mfast::decimal_cref get_StrikePrice() const;
        mfast::decimal_cref try_get_StrikePrice() const;
        mfast::ascii_string_cref get_StrikeCurrency() const;
        mfast::ascii_string_cref try_get_StrikeCurrency() const;
        mfast::int32_cref get_ExerciseStyle() const;
        mfast::int32_cref try_get_ExerciseStyle() const;
        mfast::int32_cref get_PutOrCall() const;
        mfast::int32_cref try_get_PutOrCall() const;
        mfast::decimal_cref get_ContractMultiplier() const;
        mfast::decimal_cref try_get_ContractMultiplier() const;
        mfast::uint32_cref get_ContractSettlMonth() const;
        mfast::uint32_cref try_get_ContractSettlMonth() const;
        mfast::ascii_string_cref get_CFICode() const;
        mfast::ascii_string_cref try_get_CFICode() const;
        mfast::ascii_string_cref get_CountryOfIssue() const;
        mfast::ascii_string_cref try_get_CountryOfIssue() const;
        mfast::uint32_cref get_IssueDate() const;
        mfast::uint32_cref try_get_IssueDate() const;
        mfast::uint32_cref get_DatedDate() const;
        mfast::uint32_cref try_get_DatedDate() const;
        mfast::uint32_cref get_StartDate() const;
        mfast::uint32_cref try_get_StartDate() const;
        mfast::uint32_cref get_EndDate() const;
        mfast::uint32_cref try_get_EndDate() const;
        mfast::ascii_string_cref get_SettlType() const;
        mfast::ascii_string_cref try_get_SettlType() const;
        mfast::uint32_cref get_SettlDate() const;
        mfast::uint32_cref try_get_SettlDate() const;
        mfast::uint64_cref get_SecurityValidityTimestamp() const;
        mfast::uint64_cref try_get_SecurityValidityTimestamp() const;
        mfast::ascii_string_cref get_MarketSegmentID() const;
        mfast::ascii_string_cref try_get_MarketSegmentID() const;
        mfast::ascii_string_cref get_GovernanceIndicator() const;
        mfast::ascii_string_cref try_get_GovernanceIndicator() const;
        mfast::int32_cref get_CorporateActionEventID() const;
        mfast::int32_cref try_get_CorporateActionEventID() const;
        mfast::ascii_string_cref get_SecurityGroup() const;
        mfast::ascii_string_cref try_get_SecurityGroup() const;
        mfast::int32_cref get_SecurityMatchType() const;
        mfast::int32_cref try_get_SecurityMatchType() const;
    };

    typedef mfast::make_sequence_cref<RelatedSym_element_cref> RelatedSym_cref;
    RelatedSym_cref get_RelatedSym() const;
    RelatedSym_cref try_get_RelatedSym() const;

};


typedef mfast::make_aggregate_mref<MDSecurityList_141_cref> MDSecurityList_141_mref_base;
class MDSecurityList_141_mref
  : public MDSecurityList_141_mref_base
{
  typedef MDSecurityList_141_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_141_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_141_mref();
    template <typename T>
    MDSecurityList_141_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_141_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityList_141_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityList_141_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::ascii_string_mref set_SendingTime() const;
    mfast::uint32_mref set_TotNoRelatedSym() const;
    mfast::ascii_string_mref set_LastFragment() const;

    class RelatedSym_element_mref
      : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref> base_type;
      public:
        RelatedSym_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_Symbol() const;
        mfast::uint64_mref set_SecurityID() const;

        class ApplIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref> base_type;
          public:
            ApplIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_ApplID() const;

            class FeedTypes_element_mref
              : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref>
            {
              typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref> base_type;
              public:
                FeedTypes_element_mref(
                  mfast::allocator*     alloc,
                  mfast::value_storage* storage,
                  instruction_cptr      instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_mref set_MDFeedType() const;
                mfast::uint32_mref set_MarketDepth() const;
            };

            typedef mfast::make_sequence_mref<FeedTypes_element_mref> FeedTypes_mref;
            FeedTypes_mref set_FeedTypes() const;
            void omit_FeedTypes() const;
        };

        typedef mfast::make_sequence_mref<ApplIDs_element_mref> ApplIDs_mref;
        ApplIDs_mref set_ApplIDs() const;

        class SecurityAltIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref> base_type;
          public:
            SecurityAltIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_SecurityAltID() const;
            mfast::ascii_string_mref set_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_mref<SecurityAltIDs_element_mref> SecurityAltIDs_mref;
        SecurityAltIDs_mref set_SecurityAltIDs() const;
        void omit_SecurityAltIDs() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_UnderlyingSymbol() const;
            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_IndexPct() const;
            void omit_IndexPct() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::int32_mref set_ImpliedMarketIndicator() const;
        void omit_ImpliedMarketIndicator() const;

        class InstrAttrib_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref> base_type;
          public:
            InstrAttrib_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_mref set_InstAttribType() const;
            void omit_InstAttribType() const;
            mfast::ascii_string_mref set_InstAttribValue() const;
            void omit_InstAttribValue() const;
        };

        typedef mfast::make_sequence_mref<InstrAttrib_element_mref> InstrAttrib_mref;
        InstrAttrib_mref set_InstrAttrib() const;
        void omit_InstrAttrib() const;

        class TickRules_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref> base_type;
          public:
            TickRules_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::decimal_mref set_StartTickPriceRange() const;
            void omit_StartTickPriceRange() const;
            mfast::decimal_mref set_EndTickPriceRange() const;
            void omit_EndTickPriceRange() const;
            mfast::decimal_mref set_TickIncrement() const;
            void omit_TickIncrement() const;
            mfast::int32_mref set_TickRuleType() const;
            void omit_TickRuleType() const;
        };

        typedef mfast::make_sequence_mref<TickRules_element_mref> TickRules_mref;
        TickRules_mref set_TickRules() const;
        void omit_TickRules() const;

        class Legs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref> base_type;
          public:
            Legs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_LegSymbol() const;
            mfast::uint64_mref set_LegSecurityID() const;
            mfast::int32_mref set_LegRatioQty() const;
            mfast::ascii_string_mref set_LegSecurityType() const;
            mfast::int32_mref set_LegSide() const;
        };

        typedef mfast::make_sequence_mref<Legs_element_mref> Legs_mref;
        Legs_mref set_Legs() const;
        void omit_Legs() const;
        mfast::ascii_string_mref set_SecurityUpdateAction() const;

        class Lots_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref> base_type;
          public:
            Lots_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::int32_mref set_LotType() const;
            void omit_LotType() const;
            mfast::uint32_mref set_MinLotSize() const;
            void omit_MinLotSize() const;
        };

        typedef mfast::make_sequence_mref<Lots_element_mref> Lots_mref;
        Lots_mref set_Lots() const;
        void omit_Lots() const;
        mfast::decimal_mref set_MinPriceIncrement() const;
        void omit_MinPriceIncrement() const;
        mfast::uint32_mref set_TickSizeDenominator() const;
        void omit_TickSizeDenominator() const;
        mfast::decimal_mref set_PriceDivisor() const;
        void omit_PriceDivisor() const;
        mfast::uint32_mref set_MinOrderQty() const;
        void omit_MinOrderQty() const;
        mfast::uint64_mref set_MaxOrderQty() const;
        void omit_MaxOrderQty() const;
        mfast::int32_mref set_MultiLegModel() const;
        void omit_MultiLegModel() const;
        mfast::int32_mref set_MultiLegPriceMethod() const;
        void omit_MultiLegPriceMethod() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::ascii_string_mref set_SettlCurrency() const;
        void omit_SettlCurrency() const;
        mfast::int32_mref set_Product() const;
        mfast::ascii_string_mref set_SecurityType() const;
        mfast::ascii_string_mref set_SecuritySubType() const;
        mfast::ascii_string_mref set_SecurityStrategyType() const;
        void omit_SecurityStrategyType() const;
        mfast::ascii_string_mref set_Asset() const;
        void omit_Asset() const;
        mfast::ascii_string_mref set_SecurityDesc() const;
        mfast::uint64_mref set_NoShareIssued() const;
        void omit_NoShareIssued() const;
        mfast::uint32_mref set_MaturityDate() const;
        void omit_MaturityDate() const;
        mfast::uint32_mref set_MaturityMonthYear() const;
        void omit_MaturityMonthYear() const;
        mfast::decimal_mref set_StrikePrice() const;
        void omit_StrikePrice() const;
        mfast::ascii_string_mref set_StrikeCurrency() const;
        void omit_StrikeCurrency() const;
        mfast::int32_mref set_ExerciseStyle() const;
        void omit_ExerciseStyle() const;
        mfast::int32_mref set_PutOrCall() const;
        void omit_PutOrCall() const;
        mfast::decimal_mref set_ContractMultiplier() const;
        void omit_ContractMultiplier() const;
        mfast::uint32_mref set_ContractSettlMonth() const;
        void omit_ContractSettlMonth() const;
        mfast::ascii_string_mref set_CFICode() const;
        mfast::ascii_string_mref set_CountryOfIssue() const;
        mfast::uint32_mref set_IssueDate() const;
        mfast::uint32_mref set_DatedDate() const;
        void omit_DatedDate() const;
        mfast::uint32_mref set_StartDate() const;
        void omit_StartDate() const;
        mfast::uint32_mref set_EndDate() const;
        void omit_EndDate() const;
        mfast::ascii_string_mref set_SettlType() const;
        void omit_SettlType() const;
        mfast::uint32_mref set_SettlDate() const;
        void omit_SettlDate() const;
        mfast::uint64_mref set_SecurityValidityTimestamp() const;
        mfast::ascii_string_mref set_MarketSegmentID() const;
        void omit_MarketSegmentID() const;
        mfast::ascii_string_mref set_GovernanceIndicator() const;
        void omit_GovernanceIndicator() const;
        mfast::int32_mref set_CorporateActionEventID() const;
        void omit_CorporateActionEventID() const;
        mfast::ascii_string_mref set_SecurityGroup() const;
        mfast::int32_mref set_SecurityMatchType() const;
        void omit_SecurityMatchType() const;
    };

    typedef mfast::make_sequence_mref<RelatedSym_element_mref> RelatedSym_mref;
    RelatedSym_mref set_RelatedSym() const;
};

class MDSecurityList_141
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 141
    };
    typedef mfast::template_instruction_ex<MDSecurityList_141_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityList_141_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityList_141_mref, instruction_type> mref_type;
    MDSecurityList_141(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityList_141(
      const MDSecurityList_141_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityList_141(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityList_141(const MDSecurityList_141&);
    MDSecurityList_141& operator = (const MDSecurityList_141&);
};


class MDSecurityList_111_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_111_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_111_cref();
    template <typename T>
    MDSecurityList_111_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_111_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityList_111_cref(const mfast::message_cref& other);

    explicit MDSecurityList_111_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TotNoRelatedSym() const;
    mfast::uint32_cref try_get_TotNoRelatedSym() const;
    mfast::ascii_string_cref get_LastFragment() const;
    mfast::ascii_string_cref try_get_LastFragment() const;

    class RelatedSymbols_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSymbols_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSymbols_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::ascii_string_cref get_SecurityIDSource() const;
        mfast::ascii_string_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;

        class ApplIds_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<ApplIds_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            ApplIds_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_ApplId() const;
            mfast::ascii_string_cref try_get_ApplId() const;

            class FeedTypes_element_cref
              : public mfast::sequence_element_cref
            {
              typedef mfast::sequence_element_cref base_type;
              public:
                typedef mfast::sequence_instruction_ex<FeedTypes_element_cref> instruction_type;
                typedef const instruction_type* instruction_cptr;
                FeedTypes_element_cref(
                  const mfast::value_storage* storage,
                  instruction_cptr            instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_cref get_MDFeedType() const;
                mfast::ascii_string_cref try_get_MDFeedType() const;
                mfast::uint32_cref get_MarketDepth() const;
                mfast::uint32_cref try_get_MarketDepth() const;
            };

            typedef mfast::make_sequence_cref<FeedTypes_element_cref> FeedTypes_cref;
            FeedTypes_cref get_FeedTypes() const;
            FeedTypes_cref try_get_FeedTypes() const;
        };

        typedef mfast::make_sequence_cref<ApplIds_element_cref> ApplIds_cref;
        ApplIds_cref get_ApplIds() const;
        ApplIds_cref try_get_ApplIds() const;

        class SecurityAltIDs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<SecurityAltIDs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            SecurityAltIDs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_SecurityAltID() const;
            mfast::ascii_string_cref try_get_SecurityAltID() const;
            mfast::ascii_string_cref get_SecurityAltIDSource() const;
            mfast::ascii_string_cref try_get_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_cref<SecurityAltIDs_element_cref> SecurityAltIDs_cref;
        SecurityAltIDs_cref get_SecurityAltIDs() const;
        SecurityAltIDs_cref try_get_SecurityAltIDs() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_UnderlyingSymbol() const;
            mfast::ascii_string_cref try_get_UnderlyingSymbol() const;
            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::ascii_string_cref get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;

        class Legs_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Legs_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Legs_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_LegSymbol() const;
            mfast::ascii_string_cref try_get_LegSymbol() const;
            mfast::uint64_cref get_LegSecurityID() const;
            mfast::uint64_cref try_get_LegSecurityID() const;
            mfast::ascii_string_cref get_LegSecurityIDSource() const;
            mfast::ascii_string_cref try_get_LegSecurityIDSource() const;
            mfast::int32_cref get_LegRatioQty() const;
            mfast::int32_cref try_get_LegRatioQty() const;
            mfast::ascii_string_cref get_LegType() const;
            mfast::ascii_string_cref try_get_LegType() const;
            mfast::ascii_string_cref get_BuyersPerspective() const;
            mfast::ascii_string_cref try_get_BuyersPerspective() const;
            mfast::ascii_string_cref get_LegSecurityExchange() const;
            mfast::ascii_string_cref try_get_LegSecurityExchange() const;
        };

        typedef mfast::make_sequence_cref<Legs_element_cref> Legs_cref;
        Legs_cref get_Legs() const;
        Legs_cref try_get_Legs() const;
        mfast::ascii_string_cref get_SecurityUpdateAction() const;
        mfast::ascii_string_cref try_get_SecurityUpdateAction() const;
        mfast::uint32_cref get_RoundLot() const;
        mfast::uint32_cref try_get_RoundLot() const;
        mfast::uint64_cref get_MinTradeVol() const;
        mfast::uint64_cref try_get_MinTradeVol() const;
        mfast::decimal_cref get_MinPriceIncrement() const;
        mfast::decimal_cref try_get_MinPriceIncrement() const;
        mfast::uint32_cref get_TickSizeDenominator() const;
        mfast::uint32_cref try_get_TickSizeDenominator() const;
        mfast::uint32_cref get_MinOrderQty() const;
        mfast::uint32_cref try_get_MinOrderQty() const;
        mfast::uint32_cref get_MaxOrderQty() const;
        mfast::uint32_cref try_get_MaxOrderQty() const;
        mfast::ascii_string_cref get_InstrumentID() const;
        mfast::ascii_string_cref try_get_InstrumentID() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::ascii_string_cref get_SettlCurrency() const;
        mfast::ascii_string_cref try_get_SettlCurrency() const;
        mfast::ascii_string_cref get_SecurityType() const;
        mfast::ascii_string_cref try_get_SecurityType() const;
        mfast::ascii_string_cref get_SecuritySubType() const;
        mfast::ascii_string_cref try_get_SecuritySubType() const;
        mfast::ascii_string_cref get_Asset() const;
        mfast::ascii_string_cref try_get_Asset() const;
        mfast::ascii_string_cref get_SecurityDesc() const;
        mfast::ascii_string_cref try_get_SecurityDesc() const;
        mfast::uint32_cref get_MaturityDate() const;
        mfast::uint32_cref try_get_MaturityDate() const;
        mfast::uint32_cref get_MaturityMonthYear() const;
        mfast::uint32_cref try_get_MaturityMonthYear() const;
        mfast::decimal_cref get_StrikePrice() const;
        mfast::decimal_cref try_get_StrikePrice() const;
        mfast::ascii_string_cref get_StrikeCurrency() const;
        mfast::ascii_string_cref try_get_StrikeCurrency() const;
        mfast::decimal_cref get_ContractMultiplier() const;
        mfast::decimal_cref try_get_ContractMultiplier() const;
        mfast::uint32_cref get_ContractSettlMonth() const;
        mfast::uint32_cref try_get_ContractSettlMonth() const;
        mfast::ascii_string_cref get_CFICode() const;
        mfast::ascii_string_cref try_get_CFICode() const;
        mfast::ascii_string_cref get_CountryOfIssue() const;
        mfast::ascii_string_cref try_get_CountryOfIssue() const;
        mfast::uint32_cref get_IssueDate() const;
        mfast::uint32_cref try_get_IssueDate() const;
        mfast::uint32_cref get_DatedDate() const;
        mfast::uint32_cref try_get_DatedDate() const;
        mfast::uint32_cref get_StartDate() const;
        mfast::uint32_cref try_get_StartDate() const;
        mfast::uint32_cref get_EndDate() const;
        mfast::uint32_cref try_get_EndDate() const;
        mfast::ascii_string_cref get_SettlType() const;
        mfast::ascii_string_cref try_get_SettlType() const;
        mfast::uint32_cref get_SettlDate() const;
        mfast::uint32_cref try_get_SettlDate() const;
        mfast::uint64_cref get_SecurityValidityTimestamp() const;
        mfast::uint64_cref try_get_SecurityValidityTimestamp() const;
        mfast::ascii_string_cref get_SecurityGroup() const;
        mfast::ascii_string_cref try_get_SecurityGroup() const;
    };

    typedef mfast::make_sequence_cref<RelatedSymbols_element_cref> RelatedSymbols_cref;
    RelatedSymbols_cref get_RelatedSymbols() const;
    RelatedSymbols_cref try_get_RelatedSymbols() const;

};


typedef mfast::make_aggregate_mref<MDSecurityList_111_cref> MDSecurityList_111_mref_base;
class MDSecurityList_111_mref
  : public MDSecurityList_111_mref_base
{
  typedef MDSecurityList_111_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityList_111_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityList_111_mref();
    template <typename T>
    MDSecurityList_111_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_111_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityList_111_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityList_111_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TotNoRelatedSym() const;
    mfast::ascii_string_mref set_LastFragment() const;

    class RelatedSymbols_element_mref
      : public mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref> base_type;
      public:
        RelatedSymbols_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_Symbol() const;
        mfast::uint64_mref set_SecurityID() const;

        class ApplIds_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref> base_type;
          public:
            ApplIds_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_ApplId() const;

            class FeedTypes_element_mref
              : public mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref>
            {
              typedef mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref> base_type;
              public:
                FeedTypes_element_mref(
                  mfast::allocator*     alloc,
                  mfast::value_storage* storage,
                  instruction_cptr      instruction);

                template <typename Visitor>
                void accept(Visitor& v);

                mfast::ascii_string_mref set_MDFeedType() const;
                mfast::uint32_mref set_MarketDepth() const;
            };

            typedef mfast::make_sequence_mref<FeedTypes_element_mref> FeedTypes_mref;
            FeedTypes_mref set_FeedTypes() const;
            void omit_FeedTypes() const;
        };

        typedef mfast::make_sequence_mref<ApplIds_element_mref> ApplIds_mref;
        ApplIds_mref set_ApplIds() const;

        class SecurityAltIDs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref> base_type;
          public:
            SecurityAltIDs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_SecurityAltID() const;
            mfast::ascii_string_mref set_SecurityAltIDSource() const;
        };

        typedef mfast::make_sequence_mref<SecurityAltIDs_element_mref> SecurityAltIDs_mref;
        SecurityAltIDs_mref set_SecurityAltIDs() const;
        void omit_SecurityAltIDs() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_UnderlyingSymbol() const;
            mfast::uint64_mref set_UnderlyingSecurityID() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;

        class Legs_element_mref
          : public mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref> base_type;
          public:
            Legs_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_LegSymbol() const;
            mfast::uint64_mref set_LegSecurityID() const;
            mfast::int32_mref set_LegRatioQty() const;
            mfast::ascii_string_mref set_LegType() const;
            mfast::ascii_string_mref set_BuyersPerspective() const;
        };

        typedef mfast::make_sequence_mref<Legs_element_mref> Legs_mref;
        Legs_mref set_Legs() const;
        void omit_Legs() const;
        mfast::ascii_string_mref set_SecurityUpdateAction() const;
        mfast::uint32_mref set_RoundLot() const;
        mfast::uint64_mref set_MinTradeVol() const;
        void omit_MinTradeVol() const;
        mfast::decimal_mref set_MinPriceIncrement() const;
        mfast::uint32_mref set_TickSizeDenominator() const;
        mfast::uint32_mref set_MinOrderQty() const;
        mfast::uint32_mref set_MaxOrderQty() const;
        mfast::ascii_string_mref set_InstrumentID() const;
        mfast::ascii_string_mref set_Currency() const;
        mfast::ascii_string_mref set_SettlCurrency() const;
        mfast::ascii_string_mref set_SecurityType() const;
        mfast::ascii_string_mref set_SecuritySubType() const;
        mfast::ascii_string_mref set_Asset() const;
        mfast::ascii_string_mref set_SecurityDesc() const;
        mfast::uint32_mref set_MaturityDate() const;
        void omit_MaturityDate() const;
        mfast::uint32_mref set_MaturityMonthYear() const;
        void omit_MaturityMonthYear() const;
        mfast::decimal_mref set_StrikePrice() const;
        void omit_StrikePrice() const;
        mfast::ascii_string_mref set_StrikeCurrency() const;
        void omit_StrikeCurrency() const;
        mfast::decimal_mref set_ContractMultiplier() const;
        mfast::uint32_mref set_ContractSettlMonth() const;
        void omit_ContractSettlMonth() const;
        mfast::ascii_string_mref set_CFICode() const;
        mfast::ascii_string_mref set_CountryOfIssue() const;
        mfast::uint32_mref set_IssueDate() const;
        mfast::uint32_mref set_DatedDate() const;
        mfast::uint32_mref set_StartDate() const;
        void omit_StartDate() const;
        mfast::uint32_mref set_EndDate() const;
        void omit_EndDate() const;
        mfast::ascii_string_mref set_SettlType() const;
        void omit_SettlType() const;
        mfast::uint32_mref set_SettlDate() const;
        void omit_SettlDate() const;
        mfast::uint64_mref set_SecurityValidityTimestamp() const;
        void omit_SecurityValidityTimestamp() const;
        mfast::ascii_string_mref set_SecurityGroup() const;
    };

    typedef mfast::make_sequence_mref<RelatedSymbols_element_mref> RelatedSymbols_mref;
    RelatedSymbols_mref set_RelatedSymbols() const;
};

class MDSecurityList_111
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 111
    };
    typedef mfast::template_instruction_ex<MDSecurityList_111_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityList_111_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityList_111_mref, instruction_type> mref_type;
    MDSecurityList_111(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityList_111(
      const MDSecurityList_111_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityList_111(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityList_111(const MDSecurityList_111&);
    MDSecurityList_111& operator = (const MDSecurityList_111&);
};


class MDIncRefresh_81_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_81_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_81_cref();
    template <typename T>
    MDIncRefresh_81_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_81_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_81_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_81_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_PosDupFlag() const;
    mfast::ascii_string_cref try_get_PosDupFlag() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::uint32_cref get_MDPriceLevel() const;
        mfast::uint32_cref try_get_MDPriceLevel() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int32_cref get_MDEntrySize() const;
        mfast::int32_cref try_get_MDEntrySize() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_TradingSessionID() const;
        mfast::ascii_string_cref try_get_TradingSessionID() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_81_cref> MDIncRefresh_81_mref_base;
class MDIncRefresh_81_mref
  : public MDIncRefresh_81_mref_base
{
  typedef MDIncRefresh_81_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_81_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_81_mref();
    template <typename T>
    MDIncRefresh_81_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_81_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_81_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_81_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::ascii_string_mref set_PosDupFlag() const;
    void omit_PosDupFlag() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_81_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_81_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        void omit_MDUpdateAction() const;
        mfast::uint32_mref set_MDPriceLevel() const;
        void omit_MDPriceLevel() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        void omit_SecurityIDSource() const;
        mfast::uint64_mref set_SecurityID() const;
        void omit_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        void omit_RptSeq() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int32_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_81
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 81
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_81_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_81_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_81_mref, instruction_type> mref_type;
    MDIncRefresh_81(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_81(
      const MDIncRefresh_81_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_81(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_81(const MDIncRefresh_81&);
    MDIncRefresh_81& operator = (const MDIncRefresh_81&);
};


class MDIncRefresh_152_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_152_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_152_cref();
    template <typename T>
    MDIncRefresh_152_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_152_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_152_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_152_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::decimal_cref get_PriceDelta() const;
        mfast::decimal_cref try_get_PriceDelta() const;
        mfast::decimal_cref get_FirstPx() const;
        mfast::decimal_cref try_get_FirstPx() const;
        mfast::decimal_cref get_LastPx() const;
        mfast::decimal_cref try_get_LastPx() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint32_cref get_BTBCertIndicator() const;
        mfast::uint32_cref try_get_BTBCertIndicator() const;
        mfast::uint32_cref get_BTBContractInfo() const;
        mfast::uint32_cref try_get_BTBContractInfo() const;
        mfast::uint32_cref get_BTBGraceDate() const;
        mfast::uint32_cref try_get_BTBGraceDate() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::uint64_cref get_IndexSeq() const;
        mfast::uint64_cref try_get_IndexSeq() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_152_cref> MDIncRefresh_152_mref_base;
class MDIncRefresh_152_mref
  : public MDIncRefresh_152_mref_base
{
  typedef MDIncRefresh_152_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_152_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_152_mref();
    template <typename T>
    MDIncRefresh_152_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_152_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_152_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_152_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_152_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_152_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::uint64_mref set_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::decimal_mref set_PriceDelta() const;
        void omit_PriceDelta() const;
        mfast::decimal_mref set_FirstPx() const;
        void omit_FirstPx() const;
        mfast::decimal_mref set_LastPx() const;
        void omit_LastPx() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint32_mref set_BTBCertIndicator() const;
        void omit_BTBCertIndicator() const;
        mfast::uint32_mref set_BTBContractInfo() const;
        void omit_BTBContractInfo() const;
        mfast::uint32_mref set_BTBGraceDate() const;
        void omit_BTBGraceDate() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::uint64_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_152
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 152
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_152_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_152_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_152_mref, instruction_type> mref_type;
    MDIncRefresh_152(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_152(
      const MDIncRefresh_152_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_152(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_152(const MDIncRefresh_152&);
    MDIncRefresh_152& operator = (const MDIncRefresh_152&);
};


class MDIncRefresh_150_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_150_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_150_cref();
    template <typename T>
    MDIncRefresh_150_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_150_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_150_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_150_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint32_cref get_BTBCertIndicator() const;
        mfast::uint32_cref try_get_BTBCertIndicator() const;
        mfast::uint32_cref get_BTBContractInfo() const;
        mfast::uint32_cref try_get_BTBContractInfo() const;
        mfast::uint32_cref get_BTBGraceDate() const;
        mfast::uint32_cref try_get_BTBGraceDate() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::uint64_cref get_IndexSeq() const;
        mfast::uint64_cref try_get_IndexSeq() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_150_cref> MDIncRefresh_150_mref_base;
class MDIncRefresh_150_mref
  : public MDIncRefresh_150_mref_base
{
  typedef MDIncRefresh_150_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_150_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_150_mref();
    template <typename T>
    MDIncRefresh_150_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_150_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_150_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_150_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_150_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_150_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::uint64_mref set_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint32_mref set_BTBCertIndicator() const;
        void omit_BTBCertIndicator() const;
        mfast::uint32_mref set_BTBContractInfo() const;
        void omit_BTBContractInfo() const;
        mfast::uint32_mref set_BTBGraceDate() const;
        void omit_BTBGraceDate() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::uint64_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_150
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 150
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_150_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_150_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_150_mref, instruction_type> mref_type;
    MDIncRefresh_150(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_150(
      const MDIncRefresh_150_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_150(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_150(const MDIncRefresh_150&);
    MDIncRefresh_150& operator = (const MDIncRefresh_150&);
};


class MDIncRefresh_145_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_145_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_145_cref();
    template <typename T>
    MDIncRefresh_145_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_145_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_145_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_145_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::uint64_cref get_IndexSeq() const;
        mfast::uint64_cref try_get_IndexSeq() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_145_cref> MDIncRefresh_145_mref_base;
class MDIncRefresh_145_mref
  : public MDIncRefresh_145_mref_base
{
  typedef MDIncRefresh_145_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_145_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_145_mref();
    template <typename T>
    MDIncRefresh_145_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_145_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_145_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_145_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_145_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_145_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::uint64_mref set_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::uint64_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_145
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 145
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_145_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_145_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_145_mref, instruction_type> mref_type;
    MDIncRefresh_145(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_145(
      const MDIncRefresh_145_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_145(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_145(const MDIncRefresh_145&);
    MDIncRefresh_145& operator = (const MDIncRefresh_145&);
};


class MDIncRefresh_138_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_138_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_138_cref();
    template <typename T>
    MDIncRefresh_138_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_138_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_138_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_138_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::ascii_string_cref get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
        mfast::uint64_cref get_IndexSeq() const;
        mfast::uint64_cref try_get_IndexSeq() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_138_cref> MDIncRefresh_138_mref_base;
class MDIncRefresh_138_mref
  : public MDIncRefresh_138_mref_base
{
  typedef MDIncRefresh_138_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_138_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_138_mref();
    template <typename T>
    MDIncRefresh_138_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_138_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_138_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_138_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_138_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_138_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::uint64_mref set_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::ascii_string_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
        mfast::uint64_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_138
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 138
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_138_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_138_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_138_mref, instruction_type> mref_type;
    MDIncRefresh_138(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_138(
      const MDIncRefresh_138_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_138(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_138(const MDIncRefresh_138&);
    MDIncRefresh_138& operator = (const MDIncRefresh_138&);
};


class MDIncRefresh_123_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_123_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_123_cref();
    template <typename T>
    MDIncRefresh_123_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_123_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_123_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_123_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::uint32_cref get_MDPriceLevel() const;
        mfast::uint32_cref try_get_MDPriceLevel() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int32_cref get_MDEntrySize() const;
        mfast::int32_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::ascii_string_cref get_TradingSessionID() const;
        mfast::ascii_string_cref try_get_TradingSessionID() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettleFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettleFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::ascii_string_cref get_SettlType() const;
        mfast::ascii_string_cref try_get_SettlType() const;
        mfast::uint32_cref get_SettlDate() const;
        mfast::uint32_cref try_get_SettlDate() const;
        mfast::uint32_cref get_SettlePriceType() const;
        mfast::uint32_cref try_get_SettlePriceType() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingRefPrice() const;
        mfast::decimal_cref try_get_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_123_cref> MDIncRefresh_123_mref_base;
class MDIncRefresh_123_mref
  : public MDIncRefresh_123_mref_base
{
  typedef MDIncRefresh_123_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_123_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_123_mref();
    template <typename T>
    MDIncRefresh_123_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_123_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_123_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_123_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_123_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_123_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::uint32_mref set_MDPriceLevel() const;
        void omit_MDPriceLevel() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Symbol() const;
        void omit_Symbol() const;
        mfast::uint64_mref set_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int32_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::ascii_string_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettleFlag() const;
        void omit_OpenCloseSettleFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::ascii_string_mref set_SettlType() const;
        void omit_SettlType() const;
        mfast::uint32_mref set_SettlDate() const;
        void omit_SettlDate() const;
        mfast::uint32_mref set_SettlePriceType() const;
        void omit_SettlePriceType() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingRefPrice() const;
        void omit_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_123
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 123
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_123_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_123_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_123_mref, instruction_type> mref_type;
    MDIncRefresh_123(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_123(
      const MDIncRefresh_123_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_123(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_123(const MDIncRefresh_123&);
    MDIncRefresh_123& operator = (const MDIncRefresh_123&);
};


class MDIncRefresh_126_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_126_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_126_cref();
    template <typename T>
    MDIncRefresh_126_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_126_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDIncRefresh_126_cref(const mfast::message_cref& other);

    explicit MDIncRefresh_126_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::uint32_cref get_MDPriceLevel() const;
        mfast::uint32_cref try_get_MDPriceLevel() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_RptSeq() const;
        mfast::uint32_cref try_get_RptSeq() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::uint32_cref get_MDEntryTime() const;
        mfast::uint32_cref try_get_MDEntryTime() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::ascii_string_cref get_TradingSessionID() const;
        mfast::ascii_string_cref try_get_TradingSessionID() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettleFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettleFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::ascii_string_cref get_SettlType() const;
        mfast::ascii_string_cref try_get_SettlType() const;
        mfast::uint32_cref get_SettlDate() const;
        mfast::uint32_cref try_get_SettlDate() const;
        mfast::uint32_cref get_SettlePriceType() const;
        mfast::uint32_cref try_get_SettlePriceType() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingRefPrice() const;
        mfast::decimal_cref try_get_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDIncRefresh_126_cref> MDIncRefresh_126_mref_base;
class MDIncRefresh_126_mref
  : public MDIncRefresh_126_mref_base
{
  typedef MDIncRefresh_126_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDIncRefresh_126_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDIncRefresh_126_mref();
    template <typename T>
    MDIncRefresh_126_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_126_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDIncRefresh_126_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDIncRefresh_126_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDIncRefresh_126_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDIncRefresh_126_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::uint32_mref set_MDPriceLevel() const;
        void omit_MDPriceLevel() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Symbol() const;
        void omit_Symbol() const;
        mfast::uint64_mref set_SecurityID() const;
        mfast::uint32_mref set_RptSeq() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::uint32_mref set_MDEntryTime() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::ascii_string_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettleFlag() const;
        void omit_OpenCloseSettleFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::ascii_string_mref set_SettlType() const;
        void omit_SettlType() const;
        mfast::uint32_mref set_SettlDate() const;
        void omit_SettlDate() const;
        mfast::uint32_mref set_SettlePriceType() const;
        void omit_SettlePriceType() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingRefPrice() const;
        void omit_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDIncRefresh_126
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 126
    };
    typedef mfast::template_instruction_ex<MDIncRefresh_126_cref> instruction_type;

    typedef mfast::make_message_cref<MDIncRefresh_126_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDIncRefresh_126_mref, instruction_type> mref_type;
    MDIncRefresh_126(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDIncRefresh_126(
      const MDIncRefresh_126_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDIncRefresh_126(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDIncRefresh_126(const MDIncRefresh_126&);
    MDIncRefresh_126& operator = (const MDIncRefresh_126&);
};


class MDSecurityStatus_142_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityStatus_142_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityStatus_142_cref();
    template <typename T>
    MDSecurityStatus_142_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_142_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityStatus_142_cref(const mfast::message_cref& other);

    explicit MDSecurityStatus_142_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_SecurityGroup() const;
    mfast::ascii_string_cref try_get_SecurityGroup() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;
    mfast::ascii_string_cref get_TradingSessionSubID() const;
    mfast::ascii_string_cref try_get_TradingSessionSubID() const;
    mfast::uint32_cref get_SecurityTradingStatus() const;
    mfast::uint32_cref try_get_SecurityTradingStatus() const;
    mfast::uint32_cref get_TradingSessionID() const;
    mfast::uint32_cref try_get_TradingSessionID() const;
    mfast::uint64_cref get_TradSesOpenTime() const;
    mfast::uint64_cref try_get_TradSesOpenTime() const;
    mfast::uint64_cref get_TransactTime() const;
    mfast::uint64_cref try_get_TransactTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::uint32_cref get_SecurityTradingEvent() const;
    mfast::uint32_cref try_get_SecurityTradingEvent() const;

};


typedef mfast::make_aggregate_mref<MDSecurityStatus_142_cref> MDSecurityStatus_142_mref_base;
class MDSecurityStatus_142_mref
  : public MDSecurityStatus_142_mref_base
{
  typedef MDSecurityStatus_142_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityStatus_142_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityStatus_142_mref();
    template <typename T>
    MDSecurityStatus_142_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_142_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityStatus_142_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityStatus_142_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::ascii_string_mref set_SecurityGroup() const;
    void omit_SecurityGroup() const;
    mfast::uint64_mref set_SecurityID() const;
    void omit_SecurityID() const;
    void omit_SecurityIDSource() const;
    mfast::ascii_string_mref set_SecurityExchange() const;
    void omit_SecurityExchange() const;
    mfast::ascii_string_mref set_TradingSessionSubID() const;
    void omit_TradingSessionSubID() const;
    mfast::uint32_mref set_SecurityTradingStatus() const;
    void omit_SecurityTradingStatus() const;
    mfast::uint32_mref set_TradingSessionID() const;
    void omit_TradingSessionID() const;
    mfast::uint64_mref set_TradSesOpenTime() const;
    void omit_TradSesOpenTime() const;
    mfast::uint64_mref set_TransactTime() const;
    mfast::uint32_mref set_TradeDate() const;
    mfast::uint32_mref set_SecurityTradingEvent() const;
    void omit_SecurityTradingEvent() const;
};

class MDSecurityStatus_142
  : private mfast::value_storage_array<15>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 142
    };
    typedef mfast::template_instruction_ex<MDSecurityStatus_142_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityStatus_142_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityStatus_142_mref, instruction_type> mref_type;
    MDSecurityStatus_142(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityStatus_142(
      const MDSecurityStatus_142_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityStatus_142(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityStatus_142(const MDSecurityStatus_142&);
    MDSecurityStatus_142& operator = (const MDSecurityStatus_142&);
};


class MDSecurityStatus_134_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityStatus_134_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityStatus_134_cref();
    template <typename T>
    MDSecurityStatus_134_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_134_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityStatus_134_cref(const mfast::message_cref& other);

    explicit MDSecurityStatus_134_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_SecurityGroup() const;
    mfast::ascii_string_cref try_get_SecurityGroup() const;
    mfast::ascii_string_cref get_Symbol() const;
    mfast::ascii_string_cref try_get_Symbol() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;
    mfast::ascii_string_cref get_TradingSessionSubID() const;
    mfast::ascii_string_cref try_get_TradingSessionSubID() const;
    mfast::uint32_cref get_SecurityTradingStatus() const;
    mfast::uint32_cref try_get_SecurityTradingStatus() const;
    mfast::uint32_cref get_TradingSessionID() const;
    mfast::uint32_cref try_get_TradingSessionID() const;
    mfast::uint64_cref get_TradSesOpenTime() const;
    mfast::uint64_cref try_get_TradSesOpenTime() const;
    mfast::uint64_cref get_TransactTime() const;
    mfast::uint64_cref try_get_TransactTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::uint32_cref get_SecurityTradingEvent() const;
    mfast::uint32_cref try_get_SecurityTradingEvent() const;

};


typedef mfast::make_aggregate_mref<MDSecurityStatus_134_cref> MDSecurityStatus_134_mref_base;
class MDSecurityStatus_134_mref
  : public MDSecurityStatus_134_mref_base
{
  typedef MDSecurityStatus_134_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityStatus_134_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityStatus_134_mref();
    template <typename T>
    MDSecurityStatus_134_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_134_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityStatus_134_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityStatus_134_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::ascii_string_mref set_SecurityGroup() const;
    void omit_SecurityGroup() const;
    mfast::ascii_string_mref set_Symbol() const;
    void omit_Symbol() const;
    mfast::uint64_mref set_SecurityID() const;
    void omit_SecurityID() const;
    void omit_SecurityIDSource() const;
    mfast::ascii_string_mref set_SecurityExchange() const;
    void omit_SecurityExchange() const;
    mfast::ascii_string_mref set_TradingSessionSubID() const;
    void omit_TradingSessionSubID() const;
    mfast::uint32_mref set_SecurityTradingStatus() const;
    void omit_SecurityTradingStatus() const;
    mfast::uint32_mref set_TradingSessionID() const;
    void omit_TradingSessionID() const;
    mfast::uint64_mref set_TradSesOpenTime() const;
    void omit_TradSesOpenTime() const;
    mfast::uint64_mref set_TransactTime() const;
    mfast::uint32_mref set_TradeDate() const;
    mfast::uint32_mref set_SecurityTradingEvent() const;
    void omit_SecurityTradingEvent() const;
};

class MDSecurityStatus_134
  : private mfast::value_storage_array<16>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 134
    };
    typedef mfast::template_instruction_ex<MDSecurityStatus_134_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityStatus_134_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityStatus_134_mref, instruction_type> mref_type;
    MDSecurityStatus_134(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityStatus_134(
      const MDSecurityStatus_134_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityStatus_134(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityStatus_134(const MDSecurityStatus_134&);
    MDSecurityStatus_134& operator = (const MDSecurityStatus_134&);
};


class MDSecurityStatus_125_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityStatus_125_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityStatus_125_cref();
    template <typename T>
    MDSecurityStatus_125_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_125_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSecurityStatus_125_cref(const mfast::message_cref& other);

    explicit MDSecurityStatus_125_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_SecurityGroup() const;
    mfast::ascii_string_cref try_get_SecurityGroup() const;
    mfast::ascii_string_cref get_Symbol() const;
    mfast::ascii_string_cref try_get_Symbol() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;
    mfast::ascii_string_cref get_TradingSessionSubID() const;
    mfast::ascii_string_cref try_get_TradingSessionSubID() const;
    mfast::uint32_cref get_SecurityTradingStatus() const;
    mfast::uint32_cref try_get_SecurityTradingStatus() const;
    mfast::uint64_cref get_TradSesOpenTime() const;
    mfast::uint64_cref try_get_TradSesOpenTime() const;
    mfast::uint64_cref get_TransactTime() const;
    mfast::uint64_cref try_get_TransactTime() const;
    mfast::uint32_cref get_SecurityTradingEvent() const;
    mfast::uint32_cref try_get_SecurityTradingEvent() const;

};


typedef mfast::make_aggregate_mref<MDSecurityStatus_125_cref> MDSecurityStatus_125_mref_base;
class MDSecurityStatus_125_mref
  : public MDSecurityStatus_125_mref_base
{
  typedef MDSecurityStatus_125_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSecurityStatus_125_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSecurityStatus_125_mref();
    template <typename T>
    MDSecurityStatus_125_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_125_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSecurityStatus_125_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSecurityStatus_125_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_TradeDate() const;
    mfast::ascii_string_mref set_SecurityGroup() const;
    void omit_SecurityGroup() const;
    mfast::ascii_string_mref set_Symbol() const;
    void omit_Symbol() const;
    mfast::uint64_mref set_SecurityID() const;
    void omit_SecurityID() const;
    void omit_SecurityIDSource() const;
    mfast::ascii_string_mref set_SecurityExchange() const;
    void omit_SecurityExchange() const;
    mfast::ascii_string_mref set_TradingSessionSubID() const;
    void omit_TradingSessionSubID() const;
    mfast::uint32_mref set_SecurityTradingStatus() const;
    void omit_SecurityTradingStatus() const;
    mfast::uint64_mref set_TradSesOpenTime() const;
    void omit_TradSesOpenTime() const;
    mfast::uint64_mref set_TransactTime() const;
    mfast::uint32_mref set_SecurityTradingEvent() const;
    void omit_SecurityTradingEvent() const;
};

class MDSecurityStatus_125
  : private mfast::value_storage_array<15>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 125
    };
    typedef mfast::template_instruction_ex<MDSecurityStatus_125_cref> instruction_type;

    typedef mfast::make_message_cref<MDSecurityStatus_125_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSecurityStatus_125_mref, instruction_type> mref_type;
    MDSecurityStatus_125(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSecurityStatus_125(
      const MDSecurityStatus_125_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSecurityStatus_125(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSecurityStatus_125(const MDSecurityStatus_125&);
    MDSecurityStatus_125& operator = (const MDSecurityStatus_125&);
};


class MDSnapshotFullRefresh_127_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_127_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_127_cref();
    template <typename T>
    MDSnapshotFullRefresh_127_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_127_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_127_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_127_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Curerncy() const;
        mfast::ascii_string_cref try_get_Curerncy() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::uint32_cref get_TradeVolume() const;
        mfast::uint32_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint32_cref get_TradSesOpenTime() const;
        mfast::uint32_cref try_get_TradSesOpenTime() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::ascii_string_cref get_OpenCloseSettleFlag() const;
        mfast::ascii_string_cref try_get_OpenCloseSettleFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_DayCumQty() const;
        mfast::uint32_cref try_get_DayCumQty() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettlePriceType() const;
        mfast::uint32_cref try_get_SettlePriceType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingRefPrice() const;
        mfast::decimal_cref try_get_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_127_cref> MDSnapshotFullRefresh_127_mref_base;
class MDSnapshotFullRefresh_127_mref
  : public MDSnapshotFullRefresh_127_mref_base
{
  typedef MDSnapshotFullRefresh_127_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_127_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_127_mref();
    template <typename T>
    MDSnapshotFullRefresh_127_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_127_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_127_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_127_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_127_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_127_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Curerncy() const;
        void omit_Curerncy() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::uint32_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint32_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::ascii_string_mref set_OpenCloseSettleFlag() const;
        void omit_OpenCloseSettleFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_DayCumQty() const;
        void omit_DayCumQty() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettlePriceType() const;
        void omit_SettlePriceType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingRefPrice() const;
        void omit_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_127
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 127
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_127_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_127_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_127_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_127(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_127(
      const MDSnapshotFullRefresh_127_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_127(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_127(const MDSnapshotFullRefresh_127&);
    MDSnapshotFullRefresh_127& operator = (const MDSnapshotFullRefresh_127&);
};


class MDSnapshotFullRefresh_153_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_153_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_153_cref();
    template <typename T>
    MDSnapshotFullRefresh_153_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_153_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_153_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_153_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_IndexSeq() const;
        mfast::uint32_cref try_get_IndexSeq() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::decimal_cref get_PriceDelta() const;
        mfast::decimal_cref try_get_PriceDelta() const;
        mfast::decimal_cref get_FirstPx() const;
        mfast::decimal_cref try_get_FirstPx() const;
        mfast::decimal_cref get_LastPx() const;
        mfast::decimal_cref try_get_LastPx() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint64_cref get_TradSesOpenTime() const;
        mfast::uint64_cref try_get_TradSesOpenTime() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_SecurityTradingEvent() const;
        mfast::uint32_cref try_get_SecurityTradingEvent() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint32_cref get_BTBCertIndicator() const;
        mfast::uint32_cref try_get_BTBCertIndicator() const;
        mfast::uint32_cref get_BTBContractInfo() const;
        mfast::uint32_cref try_get_BTBContractInfo() const;
        mfast::uint32_cref get_BTBGraceDate() const;
        mfast::uint32_cref try_get_BTBGraceDate() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_153_cref> MDSnapshotFullRefresh_153_mref_base;
class MDSnapshotFullRefresh_153_mref
  : public MDSnapshotFullRefresh_153_mref_base
{
  typedef MDSnapshotFullRefresh_153_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_153_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_153_mref();
    template <typename T>
    MDSnapshotFullRefresh_153_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_153_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_153_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_153_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_153_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_153_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::decimal_mref set_PriceDelta() const;
        void omit_PriceDelta() const;
        mfast::decimal_mref set_FirstPx() const;
        void omit_FirstPx() const;
        mfast::decimal_mref set_LastPx() const;
        void omit_LastPx() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint64_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_SecurityTradingEvent() const;
        void omit_SecurityTradingEvent() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint32_mref set_BTBCertIndicator() const;
        void omit_BTBCertIndicator() const;
        mfast::uint32_mref set_BTBContractInfo() const;
        void omit_BTBContractInfo() const;
        mfast::uint32_mref set_BTBGraceDate() const;
        void omit_BTBGraceDate() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_153
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 153
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_153_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_153_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_153_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_153(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_153(
      const MDSnapshotFullRefresh_153_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_153(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_153(const MDSnapshotFullRefresh_153&);
    MDSnapshotFullRefresh_153& operator = (const MDSnapshotFullRefresh_153&);
};


class MDSnapshotFullRefresh_151_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_151_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_151_cref();
    template <typename T>
    MDSnapshotFullRefresh_151_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_151_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_151_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_151_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_IndexSeq() const;
        mfast::uint32_cref try_get_IndexSeq() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint64_cref get_TradSesOpenTime() const;
        mfast::uint64_cref try_get_TradSesOpenTime() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_SecurityTradingEvent() const;
        mfast::uint32_cref try_get_SecurityTradingEvent() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint32_cref get_BTBCertIndicator() const;
        mfast::uint32_cref try_get_BTBCertIndicator() const;
        mfast::uint32_cref get_BTBContractInfo() const;
        mfast::uint32_cref try_get_BTBContractInfo() const;
        mfast::uint32_cref get_BTBGraceDate() const;
        mfast::uint32_cref try_get_BTBGraceDate() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_151_cref> MDSnapshotFullRefresh_151_mref_base;
class MDSnapshotFullRefresh_151_mref
  : public MDSnapshotFullRefresh_151_mref_base
{
  typedef MDSnapshotFullRefresh_151_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_151_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_151_mref();
    template <typename T>
    MDSnapshotFullRefresh_151_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_151_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_151_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_151_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_151_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_151_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint64_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_SecurityTradingEvent() const;
        void omit_SecurityTradingEvent() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint32_mref set_BTBCertIndicator() const;
        void omit_BTBCertIndicator() const;
        mfast::uint32_mref set_BTBContractInfo() const;
        void omit_BTBContractInfo() const;
        mfast::uint32_mref set_BTBGraceDate() const;
        void omit_BTBGraceDate() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_151
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 151
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_151_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_151_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_151_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_151(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_151(
      const MDSnapshotFullRefresh_151_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_151(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_151(const MDSnapshotFullRefresh_151&);
    MDSnapshotFullRefresh_151& operator = (const MDSnapshotFullRefresh_151&);
};


class MDSnapshotFullRefresh_147_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_147_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_147_cref();
    template <typename T>
    MDSnapshotFullRefresh_147_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_147_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_147_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_147_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_IndexSeq() const;
        mfast::uint32_cref try_get_IndexSeq() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint64_cref get_TradSesOpenTime() const;
        mfast::uint64_cref try_get_TradSesOpenTime() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_SecurityTradingEvent() const;
        mfast::uint32_cref try_get_SecurityTradingEvent() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_147_cref> MDSnapshotFullRefresh_147_mref_base;
class MDSnapshotFullRefresh_147_mref
  : public MDSnapshotFullRefresh_147_mref_base
{
  typedef MDSnapshotFullRefresh_147_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_147_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_147_mref();
    template <typename T>
    MDSnapshotFullRefresh_147_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_147_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_147_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_147_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_147_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_147_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint64_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_SecurityTradingEvent() const;
        void omit_SecurityTradingEvent() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_147
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 147
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_147_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_147_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_147_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_147(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_147(
      const MDSnapshotFullRefresh_147_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_147(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_147(const MDSnapshotFullRefresh_147&);
    MDSnapshotFullRefresh_147& operator = (const MDSnapshotFullRefresh_147&);
};


class MDSnapshotFullRefresh_146_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_146_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_146_cref();
    template <typename T>
    MDSnapshotFullRefresh_146_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_146_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_146_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_146_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_IndexSeq() const;
        mfast::uint32_cref try_get_IndexSeq() const;
        mfast::int32_cref get_MDEntrySize() const;
        mfast::int32_cref try_get_MDEntrySize() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint64_cref get_TradSesOpenTime() const;
        mfast::uint64_cref try_get_TradSesOpenTime() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_SecurityTradingEvent() const;
        mfast::uint32_cref try_get_SecurityTradingEvent() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettlFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_146_cref> MDSnapshotFullRefresh_146_mref_base;
class MDSnapshotFullRefresh_146_mref
  : public MDSnapshotFullRefresh_146_mref_base
{
  typedef MDSnapshotFullRefresh_146_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_146_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_146_mref();
    template <typename T>
    MDSnapshotFullRefresh_146_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_146_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_146_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_146_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_146_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_146_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
        mfast::int32_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint64_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_SecurityTradingEvent() const;
        void omit_SecurityTradingEvent() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_146
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 146
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_146_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_146_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_146_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_146(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_146(
      const MDSnapshotFullRefresh_146_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_146(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_146(const MDSnapshotFullRefresh_146&);
    MDSnapshotFullRefresh_146& operator = (const MDSnapshotFullRefresh_146&);
};


class MDSnapshotFullRefresh_139_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_139_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_139_cref();
    template <typename T>
    MDSnapshotFullRefresh_139_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_139_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_139_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_139_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Currency() const;
        mfast::ascii_string_cref try_get_Currency() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntryInterestRate() const;
        mfast::decimal_cref try_get_MDEntryInterestRate() const;
        mfast::uint32_cref get_IndexSeq() const;
        mfast::uint32_cref try_get_IndexSeq() const;
        mfast::int32_cref get_MDEntrySize() const;
        mfast::int32_cref try_get_MDEntrySize() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint64_cref get_TradSesOpenTime() const;
        mfast::uint64_cref try_get_TradSesOpenTime() const;
        mfast::uint32_cref get_TradingSessionID() const;
        mfast::uint32_cref try_get_TradingSessionID() const;
        mfast::uint32_cref get_SecurityTradingEvent() const;
        mfast::uint32_cref try_get_SecurityTradingEvent() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::ascii_string_cref get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref try_get_OpenCloseSettlFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettPriceType() const;
        mfast::uint32_cref try_get_SettPriceType() const;
        mfast::uint32_cref get_LastTradeDate() const;
        mfast::uint32_cref try_get_LastTradeDate() const;
        mfast::uint32_cref get_PriceAdjustmentMethod() const;
        mfast::uint32_cref try_get_PriceAdjustmentMethod() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingReferencePrice() const;
        mfast::decimal_cref try_get_TradingReferencePrice() const;
        mfast::uint32_cref get_PriceBandMidpointPriceType() const;
        mfast::uint32_cref try_get_PriceBandMidpointPriceType() const;
        mfast::uint64_cref get_AvgDailyTradedQty() const;
        mfast::uint64_cref try_get_AvgDailyTradedQty() const;
        mfast::uint64_cref get_ExpireDate() const;
        mfast::uint64_cref try_get_ExpireDate() const;
        mfast::uint64_cref get_EarlyTermination() const;
        mfast::uint64_cref try_get_EarlyTermination() const;
        mfast::uint64_cref get_MaxTradeVol() const;
        mfast::uint64_cref try_get_MaxTradeVol() const;
        mfast::ascii_string_cref get_PriceBandType() const;
        mfast::ascii_string_cref try_get_PriceBandType() const;

        class Underlyings_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<Underlyings_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            Underlyings_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_cref get_UnderlyingSecurityID() const;
            mfast::uint64_cref try_get_UnderlyingSecurityID() const;
            mfast::uint32_cref get_UnderlyingSecurityIDSource() const;
            mfast::uint32_cref try_get_UnderlyingSecurityIDSource() const;
            mfast::ascii_string_cref get_UnderlyingSecurityExchange() const;
            mfast::ascii_string_cref try_get_UnderlyingSecurityExchange() const;
            mfast::decimal_cref get_UnderlyingPx() const;
            mfast::decimal_cref try_get_UnderlyingPx() const;
            mfast::uint32_cref get_UnderlyingPxType() const;
            mfast::uint32_cref try_get_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_cref<Underlyings_element_cref> Underlyings_cref;
        Underlyings_cref get_Underlyings() const;
        Underlyings_cref try_get_Underlyings() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_139_cref> MDSnapshotFullRefresh_139_mref_base;
class MDSnapshotFullRefresh_139_mref
  : public MDSnapshotFullRefresh_139_mref_base
{
  typedef MDSnapshotFullRefresh_139_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_139_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_139_mref();
    template <typename T>
    MDSnapshotFullRefresh_139_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_139_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_139_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_139_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_139_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_139_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Currency() const;
        void omit_Currency() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::decimal_mref set_MDEntryInterestRate() const;
        void omit_MDEntryInterestRate() const;
        mfast::uint32_mref set_IndexSeq() const;
        void omit_IndexSeq() const;
        mfast::int32_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint64_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::uint32_mref set_TradingSessionID() const;
        void omit_TradingSessionID() const;
        mfast::uint32_mref set_SecurityTradingEvent() const;
        void omit_SecurityTradingEvent() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::ascii_string_mref set_OpenCloseSettlFlag() const;
        void omit_OpenCloseSettlFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettPriceType() const;
        void omit_SettPriceType() const;
        mfast::uint32_mref set_LastTradeDate() const;
        void omit_LastTradeDate() const;
        mfast::uint32_mref set_PriceAdjustmentMethod() const;
        void omit_PriceAdjustmentMethod() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingReferencePrice() const;
        void omit_TradingReferencePrice() const;
        mfast::uint32_mref set_PriceBandMidpointPriceType() const;
        void omit_PriceBandMidpointPriceType() const;
        mfast::uint64_mref set_AvgDailyTradedQty() const;
        void omit_AvgDailyTradedQty() const;
        mfast::uint64_mref set_ExpireDate() const;
        void omit_ExpireDate() const;
        mfast::uint64_mref set_EarlyTermination() const;
        void omit_EarlyTermination() const;
        mfast::uint64_mref set_MaxTradeVol() const;
        void omit_MaxTradeVol() const;
        mfast::ascii_string_mref set_PriceBandType() const;
        void omit_PriceBandType() const;

        class Underlyings_element_mref
          : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref>
        {
          typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref> base_type;
          public:
            Underlyings_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint64_mref set_UnderlyingSecurityID() const;
            mfast::decimal_mref set_UnderlyingPx() const;
            mfast::uint32_mref set_UnderlyingPxType() const;
            void omit_UnderlyingPxType() const;
        };

        typedef mfast::make_sequence_mref<Underlyings_element_mref> Underlyings_mref;
        Underlyings_mref set_Underlyings() const;
        void omit_Underlyings() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_139
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 139
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_139_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_139_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_139_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_139(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_139(
      const MDSnapshotFullRefresh_139_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_139(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_139(const MDSnapshotFullRefresh_139&);
    MDSnapshotFullRefresh_139& operator = (const MDSnapshotFullRefresh_139&);
};


class MDSnapshotFullRefresh_128_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_128_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_128_cref();
    template <typename T>
    MDSnapshotFullRefresh_128_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_128_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_128_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_128_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint32_cref get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref try_get_LastMsgSeqNumProcessed() const;
    mfast::uint32_cref get_TotNumReports() const;
    mfast::uint32_cref try_get_TotNumReports() const;
    mfast::uint32_cref get_TradeDate() const;
    mfast::uint32_cref try_get_TradeDate() const;
    mfast::ascii_string_cref get_MDReqID() const;
    mfast::ascii_string_cref try_get_MDReqID() const;
    mfast::int32_cref get_MarketDepth() const;
    mfast::int32_cref try_get_MarketDepth() const;
    mfast::uint32_cref get_RptSeq() const;
    mfast::uint32_cref try_get_RptSeq() const;
    mfast::uint64_cref get_SecurityID() const;
    mfast::uint64_cref try_get_SecurityID() const;
    mfast::uint32_cref get_SecurityIDSource() const;
    mfast::uint32_cref try_get_SecurityIDSource() const;
    mfast::ascii_string_cref get_SecurityExchange() const;
    mfast::ascii_string_cref try_get_SecurityExchange() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Curerncy() const;
        mfast::ascii_string_cref try_get_Curerncy() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::int64_cref get_MDEntrySize() const;
        mfast::int64_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_MDInsertDate() const;
        mfast::uint32_cref try_get_MDInsertDate() const;
        mfast::uint32_cref get_MDInsertTime() const;
        mfast::uint32_cref try_get_MDInsertTime() const;
        mfast::uint64_cref get_TradeVolume() const;
        mfast::uint64_cref try_get_TradeVolume() const;
        mfast::uint32_cref get_MDEntryDate() const;
        mfast::uint32_cref try_get_MDEntryDate() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::ascii_string_cref get_TickDirection() const;
        mfast::ascii_string_cref try_get_TickDirection() const;
        mfast::decimal_cref get_NetChgPrevDay() const;
        mfast::decimal_cref try_get_NetChgPrevDay() const;
        mfast::ascii_string_cref get_MDStreamID() const;
        mfast::ascii_string_cref try_get_MDStreamID() const;
        mfast::ascii_string_cref get_PriceType() const;
        mfast::ascii_string_cref try_get_PriceType() const;
        mfast::ascii_string_cref get_TradingSessionSubID() const;
        mfast::ascii_string_cref try_get_TradingSessionSubID() const;
        mfast::uint32_cref get_SecurityTradingStatus() const;
        mfast::uint32_cref try_get_SecurityTradingStatus() const;
        mfast::uint64_cref get_TradSesOpenTime() const;
        mfast::uint64_cref try_get_TradSesOpenTime() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
        mfast::uint32_cref get_OpenCloseSettleFlag() const;
        mfast::uint32_cref try_get_OpenCloseSettleFlag() const;
        mfast::ascii_string_cref get_OrderID() const;
        mfast::ascii_string_cref try_get_OrderID() const;
        mfast::ascii_string_cref get_TradeID() const;
        mfast::ascii_string_cref try_get_TradeID() const;
        mfast::ascii_string_cref get_MDEntryBuyer() const;
        mfast::ascii_string_cref try_get_MDEntryBuyer() const;
        mfast::ascii_string_cref get_MDEntrySeller() const;
        mfast::ascii_string_cref try_get_MDEntrySeller() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
        mfast::uint32_cref get_DayCumQty() const;
        mfast::uint32_cref try_get_DayCumQty() const;
        mfast::uint32_cref get_SellerDays() const;
        mfast::uint32_cref try_get_SellerDays() const;
        mfast::uint32_cref get_SettlePriceType() const;
        mfast::uint32_cref try_get_SettlePriceType() const;
        mfast::uint32_cref get_PriceLimitType() const;
        mfast::uint32_cref try_get_PriceLimitType() const;
        mfast::decimal_cref get_LowLimitPrice() const;
        mfast::decimal_cref try_get_LowLimitPrice() const;
        mfast::decimal_cref get_HighLimitPrice() const;
        mfast::decimal_cref try_get_HighLimitPrice() const;
        mfast::decimal_cref get_TradingRefPrice() const;
        mfast::decimal_cref try_get_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_128_cref> MDSnapshotFullRefresh_128_mref_base;
class MDSnapshotFullRefresh_128_mref
  : public MDSnapshotFullRefresh_128_mref_base
{
  typedef MDSnapshotFullRefresh_128_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_128_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_128_mref();
    template <typename T>
    MDSnapshotFullRefresh_128_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_128_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_128_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_128_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_LastMsgSeqNumProcessed() const;
    mfast::uint32_mref set_TotNumReports() const;
    void omit_TotNumReports() const;
    mfast::uint32_mref set_TradeDate() const;
    void omit_TradeDate() const;
    mfast::ascii_string_mref set_MDReqID() const;
    void omit_MDReqID() const;
    mfast::int32_mref set_MarketDepth() const;
    void omit_MarketDepth() const;
    mfast::uint32_mref set_RptSeq() const;
    mfast::uint64_mref set_SecurityID() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_128_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_128_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Curerncy() const;
        void omit_Curerncy() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::int64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::uint32_mref set_MDInsertDate() const;
        void omit_MDInsertDate() const;
        mfast::uint32_mref set_MDInsertTime() const;
        void omit_MDInsertTime() const;
        mfast::uint64_mref set_TradeVolume() const;
        void omit_TradeVolume() const;
        mfast::uint32_mref set_MDEntryDate() const;
        void omit_MDEntryDate() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::ascii_string_mref set_TickDirection() const;
        void omit_TickDirection() const;
        mfast::decimal_mref set_NetChgPrevDay() const;
        void omit_NetChgPrevDay() const;
        mfast::ascii_string_mref set_MDStreamID() const;
        void omit_MDStreamID() const;
        mfast::ascii_string_mref set_PriceType() const;
        void omit_PriceType() const;
        mfast::ascii_string_mref set_TradingSessionSubID() const;
        void omit_TradingSessionSubID() const;
        mfast::uint32_mref set_SecurityTradingStatus() const;
        void omit_SecurityTradingStatus() const;
        mfast::uint64_mref set_TradSesOpenTime() const;
        void omit_TradSesOpenTime() const;
        mfast::ascii_string_mref set_TradeCondition() const;
        void omit_TradeCondition() const;
        mfast::uint32_mref set_OpenCloseSettleFlag() const;
        void omit_OpenCloseSettleFlag() const;
        mfast::ascii_string_mref set_OrderID() const;
        void omit_OrderID() const;
        mfast::ascii_string_mref set_TradeID() const;
        void omit_TradeID() const;
        mfast::ascii_string_mref set_MDEntryBuyer() const;
        void omit_MDEntryBuyer() const;
        mfast::ascii_string_mref set_MDEntrySeller() const;
        void omit_MDEntrySeller() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        void omit_QuoteCondition() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        void omit_NumberOfOrders() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
        mfast::uint32_mref set_DayCumQty() const;
        void omit_DayCumQty() const;
        mfast::uint32_mref set_SellerDays() const;
        void omit_SellerDays() const;
        mfast::uint32_mref set_SettlePriceType() const;
        void omit_SettlePriceType() const;
        mfast::uint32_mref set_PriceLimitType() const;
        void omit_PriceLimitType() const;
        mfast::decimal_mref set_LowLimitPrice() const;
        void omit_LowLimitPrice() const;
        mfast::decimal_mref set_HighLimitPrice() const;
        void omit_HighLimitPrice() const;
        mfast::decimal_mref set_TradingRefPrice() const;
        void omit_TradingRefPrice() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDSnapshotFullRefresh_128
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 128
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_128_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_128_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_128_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_128(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_128(
      const MDSnapshotFullRefresh_128_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_128(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_128(const MDSnapshotFullRefresh_128&);
    MDSnapshotFullRefresh_128& operator = (const MDSnapshotFullRefresh_128&);
};


class MDNewsMessage_143_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDNewsMessage_143_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNewsMessage_143_cref();
    template <typename T>
    MDNewsMessage_143_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_143_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDNewsMessage_143_cref(const mfast::message_cref& other);

    explicit MDNewsMessage_143_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint64_cref get_OrigTime() const;
    mfast::uint64_cref try_get_OrigTime() const;
    mfast::ascii_string_cref get_NewsSource() const;
    mfast::ascii_string_cref try_get_NewsSource() const;
    mfast::ascii_string_cref get_NewsID() const;
    mfast::ascii_string_cref try_get_NewsID() const;
    mfast::ascii_string_cref get_LanguageCode() const;
    mfast::ascii_string_cref try_get_LanguageCode() const;
    mfast::ascii_string_cref get_Headline() const;
    mfast::ascii_string_cref try_get_Headline() const;
    mfast::ascii_string_cref get_URLLink() const;
    mfast::ascii_string_cref try_get_URLLink() const;
    mfast::uint32_cref get_EncodedHeadlineLen() const;
    mfast::uint32_cref try_get_EncodedHeadlineLen() const;
    mfast::unicode_string_cref get_EncodedHeadline() const;
    mfast::unicode_string_cref try_get_EncodedHeadline() const;

    class RelatedSym_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSym_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSym_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
    };

    typedef mfast::make_sequence_cref<RelatedSym_element_cref> RelatedSym_cref;
    RelatedSym_cref get_RelatedSym() const;
    RelatedSym_cref try_get_RelatedSym() const;

    class LinesOfText_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<LinesOfText_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        LinesOfText_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_Text() const;
        mfast::ascii_string_cref try_get_Text() const;
        mfast::uint32_cref get_EncodedTextLen() const;
        mfast::uint32_cref try_get_EncodedTextLen() const;
        mfast::unicode_string_cref get_EncodedText() const;
        mfast::unicode_string_cref try_get_EncodedText() const;
    };

    typedef mfast::make_sequence_cref<LinesOfText_element_cref> LinesOfText_cref;
    LinesOfText_cref get_LinesOfText() const;
    LinesOfText_cref try_get_LinesOfText() const;

};


typedef mfast::make_aggregate_mref<MDNewsMessage_143_cref> MDNewsMessage_143_mref_base;
class MDNewsMessage_143_mref
  : public MDNewsMessage_143_mref_base
{
  typedef MDNewsMessage_143_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDNewsMessage_143_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNewsMessage_143_mref();
    template <typename T>
    MDNewsMessage_143_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_143_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDNewsMessage_143_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDNewsMessage_143_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint64_mref set_OrigTime() const;
    void omit_OrigTime() const;
    mfast::ascii_string_mref set_NewsSource() const;
    void omit_NewsSource() const;
    mfast::ascii_string_mref set_NewsID() const;
    void omit_NewsID() const;
    mfast::ascii_string_mref set_LanguageCode() const;
    void omit_LanguageCode() const;
    mfast::ascii_string_mref set_Headline() const;
    void omit_Headline() const;
    mfast::ascii_string_mref set_URLLink() const;
    void omit_URLLink() const;
    mfast::uint32_mref set_EncodedHeadlineLen() const;
    void omit_EncodedHeadlineLen() const;
    mfast::unicode_string_mref set_EncodedHeadline() const;
    void omit_EncodedHeadline() const;

    class RelatedSym_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_143_cref::RelatedSym_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_143_cref::RelatedSym_element_cref> base_type;
      public:
        RelatedSym_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint64_mref set_SecurityID() const;
        mfast::ascii_string_mref set_SecurityExchange() const;
    };

    typedef mfast::make_sequence_mref<RelatedSym_element_mref> RelatedSym_mref;
    RelatedSym_mref set_RelatedSym() const;
    void omit_RelatedSym() const;

    class LinesOfText_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_143_cref::LinesOfText_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_143_cref::LinesOfText_element_cref> base_type;
      public:
        LinesOfText_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_Text() const;
        mfast::uint32_mref set_EncodedTextLen() const;
        void omit_EncodedTextLen() const;
        mfast::unicode_string_mref set_EncodedText() const;
        void omit_EncodedText() const;
    };

    typedef mfast::make_sequence_mref<LinesOfText_element_mref> LinesOfText_mref;
    LinesOfText_mref set_LinesOfText() const;
    void omit_LinesOfText() const;
};

class MDNewsMessage_143
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 143
    };
    typedef mfast::template_instruction_ex<MDNewsMessage_143_cref> instruction_type;

    typedef mfast::make_message_cref<MDNewsMessage_143_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDNewsMessage_143_mref, instruction_type> mref_type;
    MDNewsMessage_143(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDNewsMessage_143(
      const MDNewsMessage_143_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDNewsMessage_143(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDNewsMessage_143(const MDNewsMessage_143&);
    MDNewsMessage_143& operator = (const MDNewsMessage_143&);
};


class MDNewsMessage_137_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDNewsMessage_137_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNewsMessage_137_cref();
    template <typename T>
    MDNewsMessage_137_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_137_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDNewsMessage_137_cref(const mfast::message_cref& other);

    explicit MDNewsMessage_137_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint64_cref get_OrigTime() const;
    mfast::uint64_cref try_get_OrigTime() const;
    mfast::ascii_string_cref get_NewsSource() const;
    mfast::ascii_string_cref try_get_NewsSource() const;
    mfast::ascii_string_cref get_NewsID() const;
    mfast::ascii_string_cref try_get_NewsID() const;
    mfast::ascii_string_cref get_LanguageCode() const;
    mfast::ascii_string_cref try_get_LanguageCode() const;
    mfast::ascii_string_cref get_Headline() const;
    mfast::ascii_string_cref try_get_Headline() const;
    mfast::ascii_string_cref get_URLLink() const;
    mfast::ascii_string_cref try_get_URLLink() const;
    mfast::uint32_cref get_EncodedHeadlineLen() const;
    mfast::uint32_cref try_get_EncodedHeadlineLen() const;
    mfast::unicode_string_cref get_EncodedHeadline() const;
    mfast::unicode_string_cref try_get_EncodedHeadline() const;

    class RelatedSym_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSym_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSym_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
    };

    typedef mfast::make_sequence_cref<RelatedSym_element_cref> RelatedSym_cref;
    RelatedSym_cref get_RelatedSym() const;
    RelatedSym_cref try_get_RelatedSym() const;

    class LinesOfText_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<LinesOfText_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        LinesOfText_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_Text() const;
        mfast::ascii_string_cref try_get_Text() const;
        mfast::uint32_cref get_EncodedTextLen() const;
        mfast::uint32_cref try_get_EncodedTextLen() const;
        mfast::unicode_string_cref get_EncodedText() const;
        mfast::unicode_string_cref try_get_EncodedText() const;
    };

    typedef mfast::make_sequence_cref<LinesOfText_element_cref> LinesOfText_cref;
    LinesOfText_cref get_LinesOfText() const;
    LinesOfText_cref try_get_LinesOfText() const;

};


typedef mfast::make_aggregate_mref<MDNewsMessage_137_cref> MDNewsMessage_137_mref_base;
class MDNewsMessage_137_mref
  : public MDNewsMessage_137_mref_base
{
  typedef MDNewsMessage_137_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDNewsMessage_137_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNewsMessage_137_mref();
    template <typename T>
    MDNewsMessage_137_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_137_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDNewsMessage_137_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDNewsMessage_137_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint64_mref set_OrigTime() const;
    void omit_OrigTime() const;
    mfast::ascii_string_mref set_NewsSource() const;
    void omit_NewsSource() const;
    mfast::ascii_string_mref set_NewsID() const;
    void omit_NewsID() const;
    mfast::ascii_string_mref set_LanguageCode() const;
    void omit_LanguageCode() const;
    mfast::ascii_string_mref set_Headline() const;
    void omit_Headline() const;
    mfast::ascii_string_mref set_URLLink() const;
    void omit_URLLink() const;
    mfast::uint32_mref set_EncodedHeadlineLen() const;
    void omit_EncodedHeadlineLen() const;
    mfast::unicode_string_mref set_EncodedHeadline() const;
    void omit_EncodedHeadline() const;

    class RelatedSym_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_137_cref::RelatedSym_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_137_cref::RelatedSym_element_cref> base_type;
      public:
        RelatedSym_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint64_mref set_SecurityID() const;
        mfast::ascii_string_mref set_SecurityExchange() const;
    };

    typedef mfast::make_sequence_mref<RelatedSym_element_mref> RelatedSym_mref;
    RelatedSym_mref set_RelatedSym() const;
    void omit_RelatedSym() const;

    class LinesOfText_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_137_cref::LinesOfText_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_137_cref::LinesOfText_element_cref> base_type;
      public:
        LinesOfText_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_Text() const;
        mfast::uint32_mref set_EncodedTextLen() const;
        void omit_EncodedTextLen() const;
        mfast::unicode_string_mref set_EncodedText() const;
        void omit_EncodedText() const;
    };

    typedef mfast::make_sequence_mref<LinesOfText_element_mref> LinesOfText_mref;
    LinesOfText_mref set_LinesOfText() const;
    void omit_LinesOfText() const;
};

class MDNewsMessage_137
  : private mfast::value_storage_array<14>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 137
    };
    typedef mfast::template_instruction_ex<MDNewsMessage_137_cref> instruction_type;

    typedef mfast::make_message_cref<MDNewsMessage_137_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDNewsMessage_137_mref, instruction_type> mref_type;
    MDNewsMessage_137(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDNewsMessage_137(
      const MDNewsMessage_137_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDNewsMessage_137(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDNewsMessage_137(const MDNewsMessage_137&);
    MDNewsMessage_137& operator = (const MDNewsMessage_137&);
};


class MDNewsMessage_120_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDNewsMessage_120_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNewsMessage_120_cref();
    template <typename T>
    MDNewsMessage_120_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_120_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDNewsMessage_120_cref(const mfast::message_cref& other);

    explicit MDNewsMessage_120_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::uint64_cref get_OrigTime() const;
    mfast::uint64_cref try_get_OrigTime() const;
    mfast::ascii_string_cref get_NewsSource() const;
    mfast::ascii_string_cref try_get_NewsSource() const;
    mfast::ascii_string_cref get_LanguageCode() const;
    mfast::ascii_string_cref try_get_LanguageCode() const;
    mfast::ascii_string_cref get_Headline() const;
    mfast::ascii_string_cref try_get_Headline() const;
    mfast::ascii_string_cref get_URLLink() const;
    mfast::ascii_string_cref try_get_URLLink() const;

    class RelatedSym_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RelatedSym_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RelatedSym_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint64_cref get_SecurityID() const;
        mfast::uint64_cref try_get_SecurityID() const;
        mfast::uint32_cref get_SecurityIDSource() const;
        mfast::uint32_cref try_get_SecurityIDSource() const;
        mfast::ascii_string_cref get_SecurityExchange() const;
        mfast::ascii_string_cref try_get_SecurityExchange() const;
    };

    typedef mfast::make_sequence_cref<RelatedSym_element_cref> RelatedSym_cref;
    RelatedSym_cref get_RelatedSym() const;
    RelatedSym_cref try_get_RelatedSym() const;

    class RoutingIds_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<RoutingIds_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        RoutingIds_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_RoutingType() const;
        mfast::uint32_cref try_get_RoutingType() const;
        mfast::ascii_string_cref get_RoutingID() const;
        mfast::ascii_string_cref try_get_RoutingID() const;
    };

    typedef mfast::make_sequence_cref<RoutingIds_element_cref> RoutingIds_cref;
    RoutingIds_cref get_RoutingIds() const;
    RoutingIds_cref try_get_RoutingIds() const;

    class LinesOfText_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<LinesOfText_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        LinesOfText_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_text() const;
        mfast::ascii_string_cref try_get_text() const;
        mfast::uint32_cref get_EncodedTextLen() const;
        mfast::uint32_cref try_get_EncodedTextLen() const;
        mfast::ascii_string_cref get_EncodedText() const;
        mfast::ascii_string_cref try_get_EncodedText() const;
    };

    typedef mfast::make_sequence_cref<LinesOfText_element_cref> LinesOfText_cref;
    LinesOfText_cref get_LinesOfText() const;
    LinesOfText_cref try_get_LinesOfText() const;

};


typedef mfast::make_aggregate_mref<MDNewsMessage_120_cref> MDNewsMessage_120_mref_base;
class MDNewsMessage_120_mref
  : public MDNewsMessage_120_mref_base
{
  typedef MDNewsMessage_120_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDNewsMessage_120_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDNewsMessage_120_mref();
    template <typename T>
    MDNewsMessage_120_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_120_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDNewsMessage_120_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDNewsMessage_120_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint64_mref set_OrigTime() const;
    void omit_OrigTime() const;
    mfast::ascii_string_mref set_NewsSource() const;
    void omit_NewsSource() const;
    mfast::ascii_string_mref set_LanguageCode() const;
    void omit_LanguageCode() const;
    mfast::ascii_string_mref set_Headline() const;
    void omit_Headline() const;
    mfast::ascii_string_mref set_URLLink() const;
    void omit_URLLink() const;

    class RelatedSym_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_120_cref::RelatedSym_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_120_cref::RelatedSym_element_cref> base_type;
      public:
        RelatedSym_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint64_mref set_SecurityID() const;
        mfast::ascii_string_mref set_SecurityExchange() const;
    };

    typedef mfast::make_sequence_mref<RelatedSym_element_mref> RelatedSym_mref;
    RelatedSym_mref set_RelatedSym() const;
    void omit_RelatedSym() const;

    class RoutingIds_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_120_cref::RoutingIds_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_120_cref::RoutingIds_element_cref> base_type;
      public:
        RoutingIds_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_RoutingType() const;
        void omit_RoutingType() const;
        mfast::ascii_string_mref set_RoutingID() const;
        void omit_RoutingID() const;
    };

    typedef mfast::make_sequence_mref<RoutingIds_element_mref> RoutingIds_mref;
    RoutingIds_mref set_RoutingIds() const;
    void omit_RoutingIds() const;

    class LinesOfText_element_mref
      : public mfast::make_aggregate_mref<MDNewsMessage_120_cref::LinesOfText_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDNewsMessage_120_cref::LinesOfText_element_cref> base_type;
      public:
        LinesOfText_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_text() const;
        mfast::uint32_mref set_EncodedTextLen() const;
        void omit_EncodedTextLen() const;
        mfast::ascii_string_mref set_EncodedText() const;
        void omit_EncodedText() const;
    };

    typedef mfast::make_sequence_mref<LinesOfText_element_mref> LinesOfText_mref;
    LinesOfText_mref set_LinesOfText() const;
    void omit_LinesOfText() const;
};

class MDNewsMessage_120
  : private mfast::value_storage_array<12>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 120
    };
    typedef mfast::template_instruction_ex<MDNewsMessage_120_cref> instruction_type;

    typedef mfast::make_message_cref<MDNewsMessage_120_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDNewsMessage_120_mref, instruction_type> mref_type;
    MDNewsMessage_120(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDNewsMessage_120(
      const MDNewsMessage_120_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDNewsMessage_120(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDNewsMessage_120(const MDNewsMessage_120&);
    MDNewsMessage_120& operator = (const MDNewsMessage_120&);
};


class MDHeartbeat_144_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDHeartbeat_144_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDHeartbeat_144_cref();
    template <typename T>
    MDHeartbeat_144_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_144_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDHeartbeat_144_cref(const mfast::message_cref& other);

    explicit MDHeartbeat_144_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;

};


typedef mfast::make_aggregate_mref<MDHeartbeat_144_cref> MDHeartbeat_144_mref_base;
class MDHeartbeat_144_mref
  : public MDHeartbeat_144_mref_base
{
  typedef MDHeartbeat_144_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDHeartbeat_144_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDHeartbeat_144_mref();
    template <typename T>
    MDHeartbeat_144_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_144_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDHeartbeat_144_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDHeartbeat_144_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
};

class MDHeartbeat_144
  : private mfast::value_storage_array<4>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 144
    };
    typedef mfast::template_instruction_ex<MDHeartbeat_144_cref> instruction_type;

    typedef mfast::make_message_cref<MDHeartbeat_144_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDHeartbeat_144_mref, instruction_type> mref_type;
    MDHeartbeat_144(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDHeartbeat_144(
      const MDHeartbeat_144_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDHeartbeat_144(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDHeartbeat_144(const MDHeartbeat_144&);
    MDHeartbeat_144& operator = (const MDHeartbeat_144&);
};


class MDHeartbeat_129_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDHeartbeat_129_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDHeartbeat_129_cref();
    template <typename T>
    MDHeartbeat_129_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_129_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDHeartbeat_129_cref(const mfast::message_cref& other);

    explicit MDHeartbeat_129_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;

};


typedef mfast::make_aggregate_mref<MDHeartbeat_129_cref> MDHeartbeat_129_mref_base;
class MDHeartbeat_129_mref
  : public MDHeartbeat_129_mref_base
{
  typedef MDHeartbeat_129_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDHeartbeat_129_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDHeartbeat_129_mref();
    template <typename T>
    MDHeartbeat_129_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_129_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDHeartbeat_129_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDHeartbeat_129_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
};

class MDHeartbeat_129
  : private mfast::value_storage_array<4>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 129
    };
    typedef mfast::template_instruction_ex<MDHeartbeat_129_cref> instruction_type;

    typedef mfast::make_message_cref<MDHeartbeat_129_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDHeartbeat_129_mref, instruction_type> mref_type;
    MDHeartbeat_129(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDHeartbeat_129(
      const MDHeartbeat_129_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDHeartbeat_129(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDHeartbeat_129(const MDHeartbeat_129&);
    MDHeartbeat_129& operator = (const MDHeartbeat_129&);
};


class MDHeartbeat_101_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDHeartbeat_101_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDHeartbeat_101_cref();
    template <typename T>
    MDHeartbeat_101_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_101_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDHeartbeat_101_cref(const mfast::message_cref& other);

    explicit MDHeartbeat_101_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_PosDupFlag() const;
    mfast::ascii_string_cref try_get_PosDupFlag() const;

};


typedef mfast::make_aggregate_mref<MDHeartbeat_101_cref> MDHeartbeat_101_mref_base;
class MDHeartbeat_101_mref
  : public MDHeartbeat_101_mref_base
{
  typedef MDHeartbeat_101_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDHeartbeat_101_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDHeartbeat_101_mref();
    template <typename T>
    MDHeartbeat_101_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_101_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDHeartbeat_101_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDHeartbeat_101_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::ascii_string_mref set_PosDupFlag() const;
    void omit_PosDupFlag() const;
};

class MDHeartbeat_101
  : private mfast::value_storage_array<5>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 101
    };
    typedef mfast::template_instruction_ex<MDHeartbeat_101_cref> instruction_type;

    typedef mfast::make_message_cref<MDHeartbeat_101_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDHeartbeat_101_mref, instruction_type> mref_type;
    MDHeartbeat_101(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDHeartbeat_101(
      const MDHeartbeat_101_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDHeartbeat_101(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDHeartbeat_101(const MDHeartbeat_101&);
    MDHeartbeat_101& operator = (const MDHeartbeat_101&);
};


class MDLogon_118_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDLogon_118_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDLogon_118_cref();
    template <typename T>
    MDLogon_118_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDLogon_118_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDLogon_118_cref(const mfast::message_cref& other);

    explicit MDLogon_118_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_ApplID() const;
    mfast::ascii_string_cref try_get_ApplID() const;
    mfast::uint32_cref get_EncryptMethod() const;
    mfast::uint32_cref try_get_EncryptMethod() const;
    mfast::uint32_cref get_HeartbeatInt() const;
    mfast::uint32_cref try_get_HeartbeatInt() const;
    mfast::ascii_string_cref get_DefaultApplVerID() const;
    mfast::ascii_string_cref try_get_DefaultApplVerID() const;

};


typedef mfast::make_aggregate_mref<MDLogon_118_cref> MDLogon_118_mref_base;
class MDLogon_118_mref
  : public MDLogon_118_mref_base
{
  typedef MDLogon_118_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDLogon_118_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDLogon_118_mref();
    template <typename T>
    MDLogon_118_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDLogon_118_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDLogon_118_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDLogon_118_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::uint32_mref set_HeartbeatInt() const;
};

class MDLogon_118
  : private mfast::value_storage_array<8>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 118
    };
    typedef mfast::template_instruction_ex<MDLogon_118_cref> instruction_type;

    typedef mfast::make_message_cref<MDLogon_118_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDLogon_118_mref, instruction_type> mref_type;
    MDLogon_118(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDLogon_118(
      const MDLogon_118_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDLogon_118(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDLogon_118(const MDLogon_118&);
    MDLogon_118& operator = (const MDLogon_118&);
};


class MDLogout_119_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDLogout_119_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDLogout_119_cref();
    template <typename T>
    MDLogout_119_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDLogout_119_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDLogout_119_cref(const mfast::message_cref& other);

    explicit MDLogout_119_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_ApplID() const;
    mfast::ascii_string_cref try_get_ApplID() const;
    mfast::ascii_string_cref get_Text() const;
    mfast::ascii_string_cref try_get_Text() const;

};


typedef mfast::make_aggregate_mref<MDLogout_119_cref> MDLogout_119_mref_base;
class MDLogout_119_mref
  : public MDLogout_119_mref_base
{
  typedef MDLogout_119_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDLogout_119_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDLogout_119_mref();
    template <typename T>
    MDLogout_119_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDLogout_119_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDLogout_119_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDLogout_119_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    mfast::ascii_string_mref set_Text() const;
    void omit_Text() const;
};

class MDLogout_119
  : private mfast::value_storage_array<6>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 119
    };
    typedef mfast::template_instruction_ex<MDLogout_119_cref> instruction_type;

    typedef mfast::make_message_cref<MDLogout_119_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDLogout_119_mref, instruction_type> mref_type;
    MDLogout_119(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDLogout_119(
      const MDLogout_119_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDLogout_119(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDLogout_119(const MDLogout_119&);
    MDLogout_119& operator = (const MDLogout_119&);
};


class MDSequenceReset_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSequenceReset_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSequenceReset_cref();
    template <typename T>
    MDSequenceReset_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSequenceReset_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSequenceReset_cref(const mfast::message_cref& other);

    explicit MDSequenceReset_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MsgType() const;
    mfast::ascii_string_cref try_get_MsgType() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;
    mfast::uint64_cref get_SendingTime() const;
    mfast::uint64_cref try_get_SendingTime() const;
    mfast::ascii_string_cref get_ApplVerID() const;
    mfast::ascii_string_cref try_get_ApplVerID() const;
    mfast::uint32_cref get_NewSeqNo() const;
    mfast::uint32_cref try_get_NewSeqNo() const;

};


typedef mfast::make_aggregate_mref<MDSequenceReset_cref> MDSequenceReset_mref_base;
class MDSequenceReset_mref
  : public MDSequenceReset_mref_base
{
  typedef MDSequenceReset_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSequenceReset_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSequenceReset_mref();
    template <typename T>
    MDSequenceReset_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSequenceReset_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSequenceReset_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSequenceReset_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_MsgSeqNum() const;
    mfast::uint64_mref set_SendingTime() const;
    void omit_ApplVerID() const;
    mfast::uint32_mref set_NewSeqNo() const;
};

class MDSequenceReset
  : private mfast::value_storage_array<5>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 122
    };
    typedef mfast::template_instruction_ex<MDSequenceReset_cref> instruction_type;

    typedef mfast::make_message_cref<MDSequenceReset_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSequenceReset_mref, instruction_type> mref_type;
    MDSequenceReset(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSequenceReset(
      const MDSequenceReset_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSequenceReset(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSequenceReset(const MDSequenceReset&);
    MDSequenceReset& operator = (const MDSequenceReset&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<MDNonFix,
                       MDTcpRequestReject_117,
                       MDSecurityList_149,
                       MDSecurityList_148,
                       MDSecurityList_141,
                      //  MDSecurityList_111,
                       MDIncRefresh_81,
                       MDIncRefresh_152,
                       MDIncRefresh_150,
                      //  MDIncRefresh_145,
                      //  MDIncRefresh_138,
                      //  MDIncRefresh_123,
                      //  MDIncRefresh_126,
                       MDSecurityStatus_142,
                       MDSecurityStatus_134,
                      //  MDSecurityStatus_125,
                      //  MDSnapshotFullRefresh_127,
                       MDSnapshotFullRefresh_153,
                       MDSnapshotFullRefresh_151,
                      //  MDSnapshotFullRefresh_147,
                      //  MDSnapshotFullRefresh_146,
                      //  MDSnapshotFullRefresh_139,
                      //  MDSnapshotFullRefresh_128,
                       MDNewsMessage_143,
                       MDNewsMessage_137,
                      //  MDNewsMessage_120,
                       MDHeartbeat_144,
                       MDHeartbeat_129,
                      //  MDHeartbeat_101,
                       MDLogon_118,
                       MDLogout_119,
                       MDSequenceReset> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "b3_template.inl"
}
