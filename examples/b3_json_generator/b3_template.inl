// b3_template.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
MDNonFix_cref::MDNonFix_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDNonFix_cref::MDNonFix_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDNonFix_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDNonFix_cref::MDNonFix_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDNonFix_cref::MDNonFix_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNonFix_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNonFix_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<byte_vector_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline
MDNonFix_mref::MDNonFix_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDNonFix_mref::MDNonFix_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDNonFix_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDNonFix_mref::MDNonFix_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDNonFix_mref::MDNonFix_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNonFix_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNonFix_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<byte_vector_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline
MDNonFix::MDNonFix(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDNonFix::MDNonFix(
  const MDNonFix_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDNonFix::MDNonFix(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDNonFix::cref_type
MDNonFix::ref() const
{
  return MDNonFix::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNonFix::cref_type
MDNonFix::cref() const
{
  return MDNonFix::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNonFix::mref_type
MDNonFix::ref()
{
  return MDNonFix::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDNonFix::mref_type
MDNonFix::mref()
{
  return MDNonFix::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDNonFix_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNonFix_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDNonFix_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNonFix_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDNonFix_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint64_cref
MDNonFix_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDNonFix_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_mref
MDNonFix_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDNonFix_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDNonFix_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::uint32_cref
MDNonFix_cref::get_DataLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDNonFix_cref::try_get_DataLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDNonFix_mref::set_DataLen() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::byte_vector_cref
MDNonFix_cref::get_Data() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[5]);
}

inline mfast::byte_vector_cref
MDNonFix_cref::try_get_Data() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[5]);
}

inline mfast::byte_vector_mref
MDNonFix_mref::set_Data() const
{
  return static_cast<mfast::byte_vector_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDNonFix_cref::get_MessageEncoding() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDNonFix_cref::try_get_MessageEncoding() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline
MDTcpRequestReject_117_cref::MDTcpRequestReject_117_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDTcpRequestReject_117_cref::MDTcpRequestReject_117_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDTcpRequestReject_117_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDTcpRequestReject_117_cref::MDTcpRequestReject_117_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDTcpRequestReject_117_cref::MDTcpRequestReject_117_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDTcpRequestReject_117_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDTcpRequestReject_117_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
}

inline
MDTcpRequestReject_117_mref::MDTcpRequestReject_117_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDTcpRequestReject_117_mref::MDTcpRequestReject_117_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDTcpRequestReject_117_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDTcpRequestReject_117_mref::MDTcpRequestReject_117_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDTcpRequestReject_117_mref::MDTcpRequestReject_117_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDTcpRequestReject_117_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDTcpRequestReject_117_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
}

inline
MDTcpRequestReject_117::MDTcpRequestReject_117(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDTcpRequestReject_117::MDTcpRequestReject_117(
  const MDTcpRequestReject_117_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDTcpRequestReject_117::MDTcpRequestReject_117(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDTcpRequestReject_117::cref_type
MDTcpRequestReject_117::ref() const
{
  return MDTcpRequestReject_117::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDTcpRequestReject_117::cref_type
MDTcpRequestReject_117::cref() const
{
  return MDTcpRequestReject_117::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDTcpRequestReject_117::mref_type
MDTcpRequestReject_117::ref()
{
  return MDTcpRequestReject_117::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDTcpRequestReject_117::mref_type
MDTcpRequestReject_117::mref()
{
  return MDTcpRequestReject_117::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDTcpRequestReject_117_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDTcpRequestReject_117_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDTcpRequestReject_117_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint64_cref
MDTcpRequestReject_117_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDTcpRequestReject_117_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_mref
MDTcpRequestReject_117_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::try_get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDTcpRequestReject_117_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::get_MDReqRejReason() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::try_get_MDReqRejReason() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDTcpRequestReject_117_mref::set_MDReqRejReason() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::get_Text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDTcpRequestReject_117_cref::try_get_Text() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDTcpRequestReject_117_mref::set_Text() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDTcpRequestReject_117_mref::omit_Text() const
{
  (*this)[6].omit();
}

inline
MDSecurityList_149_cref::MDSecurityList_149_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_149_cref::MDSecurityList_149_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_149_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityList_149_cref::MDSecurityList_149_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityList_149_cref::MDSecurityList_149_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_149_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_149_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_149_mref::MDSecurityList_149_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_149_mref::MDSecurityList_149_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_149_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityList_149_mref::MDSecurityList_149_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityList_149_mref::MDSecurityList_149_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_149_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_149_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_149::MDSecurityList_149(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityList_149::MDSecurityList_149(
  const MDSecurityList_149_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityList_149::MDSecurityList_149(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityList_149::cref_type
MDSecurityList_149::ref() const
{
  return MDSecurityList_149::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_149::cref_type
MDSecurityList_149::cref() const
{
  return MDSecurityList_149::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_149::mref_type
MDSecurityList_149::ref()
{
  return MDSecurityList_149::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_149::mref_type
MDSecurityList_149::mref()
{
  return MDSecurityList_149::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::get_SendingTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::try_get_SendingTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::set_SendingTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::try_get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::set_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::try_get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::set_LastFragment() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline MDSecurityList_149_cref::RelatedSym_cref
MDSecurityList_149_cref::get_RelatedSym() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_cref>((*this)[6]);
}

inline MDSecurityList_149_cref::RelatedSym_cref
MDSecurityList_149_cref::try_get_RelatedSym() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_cref>((*this)[6]);
}

inline MDSecurityList_149_mref::RelatedSym_mref
MDSecurityList_149_mref::set_RelatedSym() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_mref>((*this)[6]);
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename ApplIDs_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename SecurityAltIDs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 4> > > ((*this)[6]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename InstrAttrib_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[8]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename TickRules_cref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[9]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Legs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Lots_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[12]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 0> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[27]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[31]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[38]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[39]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[45]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[49]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename ApplIDs_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename SecurityAltIDs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 4> > > ((*this)[6]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename InstrAttrib_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[8]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename TickRules_mref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[9]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Legs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Lots_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[12]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 0> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[27]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[31]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[38]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[39]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[45]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[49]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_ApplIDs() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_cref>((*this)[4]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_ApplIDs() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_cref>((*this)[4]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_ApplIDs() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_mref>((*this)[4]);
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::ApplIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::ApplIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename FeedTypes_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename FeedTypes_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::try_get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::set_ApplID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::get_FeedTypes() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::try_get_FeedTypes() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_mref
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::set_FeedTypes() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_mref>((*this)[1]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::omit_FeedTypes() const
{
  (*this)[1].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::FeedTypes_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::FeedTypes_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::try_get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::set_MDFeedType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::try_get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::set_MarketDepth() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityAltIDs() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_mref>((*this)[5]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_SecurityAltIDs() const
{
  (*this)[5].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::SecurityAltIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::SecurityAltIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::set_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::set_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Underlyings() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Underlyings() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Underlyings() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_mref>((*this)[6]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_Underlyings() const
{
  (*this)[6].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[4]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[5]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[4]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[5]) );
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::set_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::get_IndexPct() const
{
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_IndexPct() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::set_IndexPct() const
{
  return static_cast<mfast::decimal_mref>((*this)[4]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::omit_IndexPct() const
{
  (*this)[4].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::get_IndexTheoreticalQty() const
{
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_IndexTheoreticalQty() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::set_IndexTheoreticalQty() const
{
  return static_cast<mfast::decimal_mref>((*this)[5]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::Underlyings_element_mref::omit_IndexTheoreticalQty() const
{
  (*this)[5].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_ImpliedMarketIndicator() const
{
  return static_cast<mfast::int32_cref>((*this)[7]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_ImpliedMarketIndicator() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[7]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_ImpliedMarketIndicator() const
{
  return static_cast<mfast::int32_mref>((*this)[7]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_ImpliedMarketIndicator() const
{
  (*this)[7].omit();
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_InstrAttrib() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_cref>((*this)[8]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_InstrAttrib() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_cref>((*this)[8]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_InstrAttrib() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_mref>((*this)[8]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_InstrAttrib() const
{
  (*this)[8].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::InstrAttrib_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::InstrAttrib_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::get_InstAttribType() const
{
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::try_get_InstAttribType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::set_InstAttribType() const
{
  return static_cast<mfast::int32_mref>((*this)[0]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::omit_InstAttribType() const
{
  (*this)[0].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::get_InstAttribValue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::InstrAttrib_element_cref::try_get_InstAttribValue() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::set_InstAttribValue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::InstrAttrib_element_mref::omit_InstAttribValue() const
{
  (*this)[1].omit();
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_TickRules() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_cref>((*this)[9]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_TickRules() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_cref>((*this)[9]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_TickRules() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_mref>((*this)[9]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_TickRules() const
{
  (*this)[9].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::TickRules_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::TickRules_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[0]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[0]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::get_StartTickPriceRange() const
{
  return static_cast<mfast::decimal_cref>((*this)[0]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_StartTickPriceRange() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[0]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::set_StartTickPriceRange() const
{
  return static_cast<mfast::decimal_mref>((*this)[0]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::omit_StartTickPriceRange() const
{
  (*this)[0].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::get_EndTickPriceRange() const
{
  return static_cast<mfast::decimal_cref>((*this)[1]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_EndTickPriceRange() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[1]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::set_EndTickPriceRange() const
{
  return static_cast<mfast::decimal_mref>((*this)[1]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::omit_EndTickPriceRange() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::get_TickIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_TickIncrement() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::set_TickIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::omit_TickIncrement() const
{
  (*this)[2].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::get_TickRuleType() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_TickRuleType() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::set_TickRuleType() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::TickRules_element_mref::omit_TickRuleType() const
{
  (*this)[3].omit();
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::Legs_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Legs() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::Legs_cref>((*this)[10]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::Legs_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Legs() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::Legs_cref>((*this)[10]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::Legs_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Legs() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::Legs_mref>((*this)[10]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_Legs() const
{
  (*this)[10].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::Legs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::Legs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::set_LegRatioQty() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSide() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSide() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSide() const
{
  return static_cast<mfast::int32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::Lots_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Lots() const
{
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::Lots_cref>((*this)[12]);
}

inline MDSecurityList_149_cref::RelatedSym_element_cref::Lots_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Lots() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_149_cref::RelatedSym_element_cref::Lots_cref>((*this)[12]);
}

inline MDSecurityList_149_mref::RelatedSym_element_mref::Lots_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Lots() const
{
  return static_cast<MDSecurityList_149_mref::RelatedSym_element_mref::Lots_mref>((*this)[12]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_Lots() const
{
  (*this)[12].omit();
}

inline
MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::Lots_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::Lots_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::get_LotType() const
{
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::try_get_LotType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::set_LotType() const
{
  return static_cast<mfast::int32_mref>((*this)[0]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::omit_LotType() const
{
  (*this)[0].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::get_MinLotSize() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::Lots_element_cref::try_get_MinLotSize() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::set_MinLotSize() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::Lots_element_mref::omit_MinLotSize() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MinPriceIncrement() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[13]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MinPriceIncrement() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_TickSizeDenominator() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_TickSizeDenominator() const
{
  (*this)[14].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_PriceDivisor() const
{
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_PriceDivisor() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_PriceDivisor() const
{
  return static_cast<mfast::decimal_mref>((*this)[15]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_PriceDivisor() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MinOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MinOrderQty() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MinOrderQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MinOrderQty() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MaxOrderQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MaxOrderQty() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MaxOrderQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MaxOrderQty() const
{
  (*this)[17].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MultiLegModel() const
{
  return static_cast<mfast::int32_cref>((*this)[18]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MultiLegModel() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[18]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MultiLegModel() const
{
  return static_cast<mfast::int32_mref>((*this)[18]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MultiLegModel() const
{
  (*this)[18].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MultiLegPriceMethod() const
{
  return static_cast<mfast::int32_cref>((*this)[19]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MultiLegPriceMethod() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[19]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MultiLegPriceMethod() const
{
  return static_cast<mfast::int32_mref>((*this)[19]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MultiLegPriceMethod() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Currency() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_Currency() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SettlCurrency() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_SettlCurrency() const
{
  (*this)[21].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Product() const
{
  return static_cast<mfast::int32_cref>((*this)[22]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Product() const
{
  return static_cast<mfast::int32_cref>((*this)[22]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Product() const
{
  return static_cast<mfast::int32_mref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityStrategyType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityStrategyType() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityStrategyType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_SecurityStrategyType() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_Asset() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_Asset() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_Asset() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_Asset() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_NoShareIssued() const
{
  return static_cast<mfast::uint64_cref>((*this)[28]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_NoShareIssued() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[28]);
}

inline mfast::uint64_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_NoShareIssued() const
{
  return static_cast<mfast::uint64_mref>((*this)[28]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_NoShareIssued() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MaturityDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MaturityDate() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MaturityDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MaturityDate() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MaturityMonthYear() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MaturityMonthYear() const
{
  (*this)[30].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_StrikePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_StrikePrice() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_StrikePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[31]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_StrikePrice() const
{
  (*this)[31].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[32]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_StrikeCurrency() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[32]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[32]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_StrikeCurrency() const
{
  (*this)[32].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_ExerciseStyle() const
{
  return static_cast<mfast::int32_cref>((*this)[33]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_ExerciseStyle() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[33]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_ExerciseStyle() const
{
  return static_cast<mfast::int32_mref>((*this)[33]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_ExerciseStyle() const
{
  (*this)[33].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_PutOrCall() const
{
  return static_cast<mfast::int32_cref>((*this)[34]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_PutOrCall() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[34]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_PutOrCall() const
{
  return static_cast<mfast::int32_mref>((*this)[34]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_PutOrCall() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_ContractMultiplier() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_ContractMultiplier() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_ContractMultiplier() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_ContractMultiplier() const
{
  (*this)[35].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_ContractSettlMonth() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_mref>((*this)[36]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_ContractSettlMonth() const
{
  (*this)[36].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_CFICode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[38]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[38]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[38]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[39]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[39]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_IssueDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[39]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_DatedDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_DatedDate() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_DatedDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[40]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_DatedDate() const
{
  (*this)[40].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_StartDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_StartDate() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_StartDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[41]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_StartDate() const
{
  (*this)[41].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_EndDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_EndDate() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_EndDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[42]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_EndDate() const
{
  (*this)[42].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SettlType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[43]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SettlType() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[43]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SettlType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[43]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_SettlType() const
{
  (*this)[43].omit();
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SettlDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SettlDate() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SettlDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[44]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_SettlDate() const
{
  (*this)[44].omit();
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_mref>((*this)[45]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[46]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_MarketSegmentID() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[46]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[46]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_MarketSegmentID() const
{
  (*this)[46].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_GovernanceIndicator() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[47]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_GovernanceIndicator() const
{
  if ((*this)[47].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[47]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_GovernanceIndicator() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[47]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_GovernanceIndicator() const
{
  (*this)[47].omit();
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_CorporateActionEventID() const
{
  return static_cast<mfast::int32_cref>((*this)[48]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_CorporateActionEventID() const
{
  if ((*this)[48].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[48]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_CorporateActionEventID() const
{
  return static_cast<mfast::int32_mref>((*this)[48]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_CorporateActionEventID() const
{
  (*this)[48].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[49]);
}

inline mfast::ascii_string_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[49]);
}

inline mfast::ascii_string_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[49]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::get_SecurityMatchType() const
{
  return static_cast<mfast::int32_cref>((*this)[50]);
}

inline mfast::int32_cref
MDSecurityList_149_cref::RelatedSym_element_cref::try_get_SecurityMatchType() const
{
  if ((*this)[50].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[50]);
}

inline mfast::int32_mref
MDSecurityList_149_mref::RelatedSym_element_mref::set_SecurityMatchType() const
{
  return static_cast<mfast::int32_mref>((*this)[50]);
}

inline
void
MDSecurityList_149_mref::RelatedSym_element_mref::omit_SecurityMatchType() const
{
  (*this)[50].omit();
}

inline
MDSecurityList_148_cref::MDSecurityList_148_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_148_cref::MDSecurityList_148_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_148_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityList_148_cref::MDSecurityList_148_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityList_148_cref::MDSecurityList_148_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_148_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_148_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_148_mref::MDSecurityList_148_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_148_mref::MDSecurityList_148_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_148_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityList_148_mref::MDSecurityList_148_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityList_148_mref::MDSecurityList_148_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_148_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_148_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_148::MDSecurityList_148(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityList_148::MDSecurityList_148(
  const MDSecurityList_148_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityList_148::MDSecurityList_148(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityList_148::cref_type
MDSecurityList_148::ref() const
{
  return MDSecurityList_148::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_148::cref_type
MDSecurityList_148::cref() const
{
  return MDSecurityList_148::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_148::mref_type
MDSecurityList_148::ref()
{
  return MDSecurityList_148::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_148::mref_type
MDSecurityList_148::mref()
{
  return MDSecurityList_148::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::get_SendingTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::try_get_SendingTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::set_SendingTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::try_get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::set_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::try_get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::set_LastFragment() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline MDSecurityList_148_cref::RelatedSym_cref
MDSecurityList_148_cref::get_RelatedSym() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_cref>((*this)[6]);
}

inline MDSecurityList_148_cref::RelatedSym_cref
MDSecurityList_148_cref::try_get_RelatedSym() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_cref>((*this)[6]);
}

inline MDSecurityList_148_mref::RelatedSym_mref
MDSecurityList_148_mref::set_RelatedSym() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_mref>((*this)[6]);
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename ApplIDs_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename SecurityAltIDs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[6]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename InstrAttrib_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[8]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename TickRules_cref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[9]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Legs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Lots_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[12]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 0> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[27]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[31]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[38]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[39]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[45]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[49]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename ApplIDs_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename SecurityAltIDs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[6]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename InstrAttrib_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[8]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename TickRules_mref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[9]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Legs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Lots_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[12]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 0> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[27]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[31]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[38]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[39]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[45]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[49]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_ApplIDs() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_cref>((*this)[4]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_ApplIDs() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_cref>((*this)[4]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_ApplIDs() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_mref>((*this)[4]);
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::ApplIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::ApplIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename FeedTypes_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename FeedTypes_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::try_get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::set_ApplID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::get_FeedTypes() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::try_get_FeedTypes() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_mref
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::set_FeedTypes() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_mref>((*this)[1]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::omit_FeedTypes() const
{
  (*this)[1].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::FeedTypes_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::FeedTypes_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::try_get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::set_MDFeedType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::try_get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::set_MarketDepth() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityAltIDs() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_mref>((*this)[5]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_SecurityAltIDs() const
{
  (*this)[5].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::SecurityAltIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::SecurityAltIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::set_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::set_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Underlyings() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Underlyings() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Underlyings() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_mref>((*this)[6]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_Underlyings() const
{
  (*this)[6].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[4]) );
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::set_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::get_IndexPct() const
{
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_IndexPct() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::set_IndexPct() const
{
  return static_cast<mfast::decimal_mref>((*this)[4]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::Underlyings_element_mref::omit_IndexPct() const
{
  (*this)[4].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_ImpliedMarketIndicator() const
{
  return static_cast<mfast::int32_cref>((*this)[7]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_ImpliedMarketIndicator() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[7]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_ImpliedMarketIndicator() const
{
  return static_cast<mfast::int32_mref>((*this)[7]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_ImpliedMarketIndicator() const
{
  (*this)[7].omit();
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_InstrAttrib() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_cref>((*this)[8]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_InstrAttrib() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_cref>((*this)[8]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_InstrAttrib() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_mref>((*this)[8]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_InstrAttrib() const
{
  (*this)[8].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::InstrAttrib_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::InstrAttrib_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::get_InstAttribType() const
{
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::try_get_InstAttribType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::set_InstAttribType() const
{
  return static_cast<mfast::int32_mref>((*this)[0]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::omit_InstAttribType() const
{
  (*this)[0].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::get_InstAttribValue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::InstrAttrib_element_cref::try_get_InstAttribValue() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::set_InstAttribValue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::InstrAttrib_element_mref::omit_InstAttribValue() const
{
  (*this)[1].omit();
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_TickRules() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_cref>((*this)[9]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_TickRules() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_cref>((*this)[9]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_TickRules() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_mref>((*this)[9]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_TickRules() const
{
  (*this)[9].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::TickRules_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::TickRules_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[0]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[0]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::get_StartTickPriceRange() const
{
  return static_cast<mfast::decimal_cref>((*this)[0]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_StartTickPriceRange() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[0]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::set_StartTickPriceRange() const
{
  return static_cast<mfast::decimal_mref>((*this)[0]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::omit_StartTickPriceRange() const
{
  (*this)[0].omit();
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::get_EndTickPriceRange() const
{
  return static_cast<mfast::decimal_cref>((*this)[1]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_EndTickPriceRange() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[1]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::set_EndTickPriceRange() const
{
  return static_cast<mfast::decimal_mref>((*this)[1]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::omit_EndTickPriceRange() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::get_TickIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_TickIncrement() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::set_TickIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::omit_TickIncrement() const
{
  (*this)[2].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::get_TickRuleType() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_TickRuleType() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::set_TickRuleType() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::TickRules_element_mref::omit_TickRuleType() const
{
  (*this)[3].omit();
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::Legs_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Legs() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::Legs_cref>((*this)[10]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::Legs_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Legs() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::Legs_cref>((*this)[10]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::Legs_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Legs() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::Legs_mref>((*this)[10]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_Legs() const
{
  (*this)[10].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::Legs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::Legs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::set_LegRatioQty() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSide() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSide() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSide() const
{
  return static_cast<mfast::int32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::Lots_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Lots() const
{
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::Lots_cref>((*this)[12]);
}

inline MDSecurityList_148_cref::RelatedSym_element_cref::Lots_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Lots() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_148_cref::RelatedSym_element_cref::Lots_cref>((*this)[12]);
}

inline MDSecurityList_148_mref::RelatedSym_element_mref::Lots_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Lots() const
{
  return static_cast<MDSecurityList_148_mref::RelatedSym_element_mref::Lots_mref>((*this)[12]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_Lots() const
{
  (*this)[12].omit();
}

inline
MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::Lots_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::Lots_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::get_LotType() const
{
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::try_get_LotType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::set_LotType() const
{
  return static_cast<mfast::int32_mref>((*this)[0]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::omit_LotType() const
{
  (*this)[0].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::get_MinLotSize() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::Lots_element_cref::try_get_MinLotSize() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::set_MinLotSize() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::Lots_element_mref::omit_MinLotSize() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MinPriceIncrement() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[13]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MinPriceIncrement() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_TickSizeDenominator() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_TickSizeDenominator() const
{
  (*this)[14].omit();
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_PriceDivisor() const
{
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_PriceDivisor() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_PriceDivisor() const
{
  return static_cast<mfast::decimal_mref>((*this)[15]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_PriceDivisor() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MinOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MinOrderQty() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MinOrderQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MinOrderQty() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MaxOrderQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MaxOrderQty() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MaxOrderQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MaxOrderQty() const
{
  (*this)[17].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MultiLegModel() const
{
  return static_cast<mfast::int32_cref>((*this)[18]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MultiLegModel() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[18]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MultiLegModel() const
{
  return static_cast<mfast::int32_mref>((*this)[18]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MultiLegModel() const
{
  (*this)[18].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MultiLegPriceMethod() const
{
  return static_cast<mfast::int32_cref>((*this)[19]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MultiLegPriceMethod() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[19]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MultiLegPriceMethod() const
{
  return static_cast<mfast::int32_mref>((*this)[19]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MultiLegPriceMethod() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Currency() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_Currency() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SettlCurrency() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_SettlCurrency() const
{
  (*this)[21].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Product() const
{
  return static_cast<mfast::int32_cref>((*this)[22]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Product() const
{
  return static_cast<mfast::int32_cref>((*this)[22]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Product() const
{
  return static_cast<mfast::int32_mref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityStrategyType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityStrategyType() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityStrategyType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_SecurityStrategyType() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_Asset() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_Asset() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_Asset() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_Asset() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_NoShareIssued() const
{
  return static_cast<mfast::uint64_cref>((*this)[28]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_NoShareIssued() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[28]);
}

inline mfast::uint64_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_NoShareIssued() const
{
  return static_cast<mfast::uint64_mref>((*this)[28]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_NoShareIssued() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MaturityDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MaturityDate() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MaturityDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MaturityDate() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MaturityMonthYear() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MaturityMonthYear() const
{
  (*this)[30].omit();
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_StrikePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_StrikePrice() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_StrikePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[31]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_StrikePrice() const
{
  (*this)[31].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[32]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_StrikeCurrency() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[32]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[32]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_StrikeCurrency() const
{
  (*this)[32].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_ExerciseStyle() const
{
  return static_cast<mfast::int32_cref>((*this)[33]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_ExerciseStyle() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[33]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_ExerciseStyle() const
{
  return static_cast<mfast::int32_mref>((*this)[33]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_ExerciseStyle() const
{
  (*this)[33].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_PutOrCall() const
{
  return static_cast<mfast::int32_cref>((*this)[34]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_PutOrCall() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[34]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_PutOrCall() const
{
  return static_cast<mfast::int32_mref>((*this)[34]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_PutOrCall() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_ContractMultiplier() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_ContractMultiplier() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_ContractMultiplier() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_ContractMultiplier() const
{
  (*this)[35].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_ContractSettlMonth() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_mref>((*this)[36]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_ContractSettlMonth() const
{
  (*this)[36].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_CFICode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[38]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[38]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[38]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[39]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[39]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_IssueDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[39]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_DatedDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_DatedDate() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_DatedDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[40]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_DatedDate() const
{
  (*this)[40].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_StartDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_StartDate() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_StartDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[41]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_StartDate() const
{
  (*this)[41].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_EndDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_EndDate() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_EndDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[42]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_EndDate() const
{
  (*this)[42].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SettlType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[43]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SettlType() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[43]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SettlType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[43]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_SettlType() const
{
  (*this)[43].omit();
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SettlDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SettlDate() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SettlDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[44]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_SettlDate() const
{
  (*this)[44].omit();
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_mref>((*this)[45]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[46]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_MarketSegmentID() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[46]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[46]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_MarketSegmentID() const
{
  (*this)[46].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_GovernanceIndicator() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[47]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_GovernanceIndicator() const
{
  if ((*this)[47].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[47]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_GovernanceIndicator() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[47]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_GovernanceIndicator() const
{
  (*this)[47].omit();
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_CorporateActionEventID() const
{
  return static_cast<mfast::int32_cref>((*this)[48]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_CorporateActionEventID() const
{
  if ((*this)[48].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[48]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_CorporateActionEventID() const
{
  return static_cast<mfast::int32_mref>((*this)[48]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_CorporateActionEventID() const
{
  (*this)[48].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[49]);
}

inline mfast::ascii_string_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[49]);
}

inline mfast::ascii_string_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[49]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::get_SecurityMatchType() const
{
  return static_cast<mfast::int32_cref>((*this)[50]);
}

inline mfast::int32_cref
MDSecurityList_148_cref::RelatedSym_element_cref::try_get_SecurityMatchType() const
{
  if ((*this)[50].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[50]);
}

inline mfast::int32_mref
MDSecurityList_148_mref::RelatedSym_element_mref::set_SecurityMatchType() const
{
  return static_cast<mfast::int32_mref>((*this)[50]);
}

inline
void
MDSecurityList_148_mref::RelatedSym_element_mref::omit_SecurityMatchType() const
{
  (*this)[50].omit();
}

inline
MDSecurityList_141_cref::MDSecurityList_141_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_141_cref::MDSecurityList_141_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_141_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityList_141_cref::MDSecurityList_141_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityList_141_cref::MDSecurityList_141_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_141_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_141_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_141_mref::MDSecurityList_141_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_141_mref::MDSecurityList_141_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_141_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityList_141_mref::MDSecurityList_141_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityList_141_mref::MDSecurityList_141_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_141_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_141_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_141::MDSecurityList_141(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityList_141::MDSecurityList_141(
  const MDSecurityList_141_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityList_141::MDSecurityList_141(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityList_141::cref_type
MDSecurityList_141::ref() const
{
  return MDSecurityList_141::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_141::cref_type
MDSecurityList_141::cref() const
{
  return MDSecurityList_141::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_141::mref_type
MDSecurityList_141::ref()
{
  return MDSecurityList_141::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_141::mref_type
MDSecurityList_141::mref()
{
  return MDSecurityList_141::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::get_SendingTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::try_get_SendingTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::set_SendingTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::try_get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::set_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::try_get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::set_LastFragment() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline MDSecurityList_141_cref::RelatedSym_cref
MDSecurityList_141_cref::get_RelatedSym() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_cref>((*this)[6]);
}

inline MDSecurityList_141_cref::RelatedSym_cref
MDSecurityList_141_cref::try_get_RelatedSym() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_cref>((*this)[6]);
}

inline MDSecurityList_141_mref::RelatedSym_mref
MDSecurityList_141_mref::set_RelatedSym() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_mref>((*this)[6]);
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename ApplIDs_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename SecurityAltIDs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[6]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename InstrAttrib_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[8]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename TickRules_cref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[9]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Legs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Lots_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[12]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 0> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[27]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[31]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[38]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[39]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[45]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[49]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename ApplIDs_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename SecurityAltIDs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[6]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename InstrAttrib_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[8]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename TickRules_mref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[9]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Legs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Lots_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[12]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 0> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[27]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[31]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[38]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[39]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[45]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[49]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_ApplIDs() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_cref>((*this)[4]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_ApplIDs() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_cref>((*this)[4]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_ApplIDs() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_mref>((*this)[4]);
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::ApplIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::ApplIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename FeedTypes_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename FeedTypes_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::try_get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::set_ApplID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::get_FeedTypes() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::try_get_FeedTypes() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_mref
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::set_FeedTypes() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_mref>((*this)[1]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::omit_FeedTypes() const
{
  (*this)[1].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::FeedTypes_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::FeedTypes_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::try_get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::set_MDFeedType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::ApplIDs_element_cref::FeedTypes_element_cref::try_get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::ApplIDs_element_mref::FeedTypes_element_mref::set_MarketDepth() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityAltIDs() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_mref>((*this)[5]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_SecurityAltIDs() const
{
  (*this)[5].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::SecurityAltIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::SecurityAltIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::set_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::SecurityAltIDs_element_mref::set_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Underlyings() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Underlyings() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Underlyings() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_mref>((*this)[6]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_Underlyings() const
{
  (*this)[6].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[4]) );
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::set_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::get_IndexPct() const
{
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Underlyings_element_cref::try_get_IndexPct() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::set_IndexPct() const
{
  return static_cast<mfast::decimal_mref>((*this)[4]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::Underlyings_element_mref::omit_IndexPct() const
{
  (*this)[4].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_ImpliedMarketIndicator() const
{
  return static_cast<mfast::int32_cref>((*this)[7]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_ImpliedMarketIndicator() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[7]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_ImpliedMarketIndicator() const
{
  return static_cast<mfast::int32_mref>((*this)[7]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_ImpliedMarketIndicator() const
{
  (*this)[7].omit();
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_InstrAttrib() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_cref>((*this)[8]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_InstrAttrib() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_cref>((*this)[8]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_InstrAttrib() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_mref>((*this)[8]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_InstrAttrib() const
{
  (*this)[8].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::InstrAttrib_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::InstrAttrib_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::get_InstAttribType() const
{
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::try_get_InstAttribType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::set_InstAttribType() const
{
  return static_cast<mfast::int32_mref>((*this)[0]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::omit_InstAttribType() const
{
  (*this)[0].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::get_InstAttribValue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::InstrAttrib_element_cref::try_get_InstAttribValue() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::set_InstAttribValue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::InstrAttrib_element_mref::omit_InstAttribValue() const
{
  (*this)[1].omit();
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_TickRules() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_cref>((*this)[9]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_TickRules() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_cref>((*this)[9]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_TickRules() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_mref>((*this)[9]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_TickRules() const
{
  (*this)[9].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::TickRules_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::TickRules_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[0]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[0]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::get_StartTickPriceRange() const
{
  return static_cast<mfast::decimal_cref>((*this)[0]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_StartTickPriceRange() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[0]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::set_StartTickPriceRange() const
{
  return static_cast<mfast::decimal_mref>((*this)[0]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::omit_StartTickPriceRange() const
{
  (*this)[0].omit();
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::get_EndTickPriceRange() const
{
  return static_cast<mfast::decimal_cref>((*this)[1]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_EndTickPriceRange() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[1]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::set_EndTickPriceRange() const
{
  return static_cast<mfast::decimal_mref>((*this)[1]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::omit_EndTickPriceRange() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::get_TickIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_TickIncrement() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::set_TickIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::omit_TickIncrement() const
{
  (*this)[2].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::get_TickRuleType() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::TickRules_element_cref::try_get_TickRuleType() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::set_TickRuleType() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::TickRules_element_mref::omit_TickRuleType() const
{
  (*this)[3].omit();
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::Legs_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Legs() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::Legs_cref>((*this)[10]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::Legs_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Legs() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::Legs_cref>((*this)[10]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::Legs_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Legs() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::Legs_mref>((*this)[10]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_Legs() const
{
  (*this)[10].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::Legs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::Legs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::set_LegRatioQty() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSide() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSide() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Legs_element_mref::set_LegSide() const
{
  return static_cast<mfast::int32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Legs_element_cref::try_get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::Lots_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Lots() const
{
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::Lots_cref>((*this)[12]);
}

inline MDSecurityList_141_cref::RelatedSym_element_cref::Lots_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Lots() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_141_cref::RelatedSym_element_cref::Lots_cref>((*this)[12]);
}

inline MDSecurityList_141_mref::RelatedSym_element_mref::Lots_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Lots() const
{
  return static_cast<MDSecurityList_141_mref::RelatedSym_element_mref::Lots_mref>((*this)[12]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_Lots() const
{
  (*this)[12].omit();
}

inline
MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::Lots_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::Lots_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::get_LotType() const
{
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::try_get_LotType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[0]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::set_LotType() const
{
  return static_cast<mfast::int32_mref>((*this)[0]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::omit_LotType() const
{
  (*this)[0].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::get_MinLotSize() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::Lots_element_cref::try_get_MinLotSize() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::set_MinLotSize() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::Lots_element_mref::omit_MinLotSize() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MinPriceIncrement() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[13]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MinPriceIncrement() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_TickSizeDenominator() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_TickSizeDenominator() const
{
  (*this)[14].omit();
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_PriceDivisor() const
{
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_PriceDivisor() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_PriceDivisor() const
{
  return static_cast<mfast::decimal_mref>((*this)[15]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_PriceDivisor() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MinOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MinOrderQty() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MinOrderQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MinOrderQty() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MaxOrderQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MaxOrderQty() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MaxOrderQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MaxOrderQty() const
{
  (*this)[17].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MultiLegModel() const
{
  return static_cast<mfast::int32_cref>((*this)[18]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MultiLegModel() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[18]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MultiLegModel() const
{
  return static_cast<mfast::int32_mref>((*this)[18]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MultiLegModel() const
{
  (*this)[18].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MultiLegPriceMethod() const
{
  return static_cast<mfast::int32_cref>((*this)[19]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MultiLegPriceMethod() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[19]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MultiLegPriceMethod() const
{
  return static_cast<mfast::int32_mref>((*this)[19]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MultiLegPriceMethod() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Currency() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_Currency() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SettlCurrency() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_SettlCurrency() const
{
  (*this)[21].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Product() const
{
  return static_cast<mfast::int32_cref>((*this)[22]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Product() const
{
  return static_cast<mfast::int32_cref>((*this)[22]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Product() const
{
  return static_cast<mfast::int32_mref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityStrategyType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityStrategyType() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityStrategyType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_SecurityStrategyType() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_Asset() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_Asset() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_Asset() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_Asset() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_NoShareIssued() const
{
  return static_cast<mfast::uint64_cref>((*this)[28]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_NoShareIssued() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[28]);
}

inline mfast::uint64_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_NoShareIssued() const
{
  return static_cast<mfast::uint64_mref>((*this)[28]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_NoShareIssued() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MaturityDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MaturityDate() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MaturityDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MaturityDate() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MaturityMonthYear() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MaturityMonthYear() const
{
  (*this)[30].omit();
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_StrikePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_StrikePrice() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_StrikePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[31]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_StrikePrice() const
{
  (*this)[31].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[32]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_StrikeCurrency() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[32]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[32]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_StrikeCurrency() const
{
  (*this)[32].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_ExerciseStyle() const
{
  return static_cast<mfast::int32_cref>((*this)[33]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_ExerciseStyle() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[33]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_ExerciseStyle() const
{
  return static_cast<mfast::int32_mref>((*this)[33]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_ExerciseStyle() const
{
  (*this)[33].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_PutOrCall() const
{
  return static_cast<mfast::int32_cref>((*this)[34]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_PutOrCall() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[34]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_PutOrCall() const
{
  return static_cast<mfast::int32_mref>((*this)[34]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_PutOrCall() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_ContractMultiplier() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_ContractMultiplier() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_ContractMultiplier() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_ContractMultiplier() const
{
  (*this)[35].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_ContractSettlMonth() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_mref>((*this)[36]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_ContractSettlMonth() const
{
  (*this)[36].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_CFICode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[38]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[38]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[38]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[39]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[39]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_IssueDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[39]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_DatedDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_DatedDate() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_DatedDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[40]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_DatedDate() const
{
  (*this)[40].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_StartDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_StartDate() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_StartDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[41]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_StartDate() const
{
  (*this)[41].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_EndDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_EndDate() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_EndDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[42]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_EndDate() const
{
  (*this)[42].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SettlType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[43]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SettlType() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[43]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SettlType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[43]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_SettlType() const
{
  (*this)[43].omit();
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SettlDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SettlDate() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SettlDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[44]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_SettlDate() const
{
  (*this)[44].omit();
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_mref>((*this)[45]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[46]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_MarketSegmentID() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[46]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[46]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_MarketSegmentID() const
{
  (*this)[46].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_GovernanceIndicator() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[47]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_GovernanceIndicator() const
{
  if ((*this)[47].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[47]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_GovernanceIndicator() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[47]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_GovernanceIndicator() const
{
  (*this)[47].omit();
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_CorporateActionEventID() const
{
  return static_cast<mfast::int32_cref>((*this)[48]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_CorporateActionEventID() const
{
  if ((*this)[48].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[48]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_CorporateActionEventID() const
{
  return static_cast<mfast::int32_mref>((*this)[48]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_CorporateActionEventID() const
{
  (*this)[48].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[49]);
}

inline mfast::ascii_string_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[49]);
}

inline mfast::ascii_string_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[49]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::get_SecurityMatchType() const
{
  return static_cast<mfast::int32_cref>((*this)[50]);
}

inline mfast::int32_cref
MDSecurityList_141_cref::RelatedSym_element_cref::try_get_SecurityMatchType() const
{
  if ((*this)[50].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[50]);
}

inline mfast::int32_mref
MDSecurityList_141_mref::RelatedSym_element_mref::set_SecurityMatchType() const
{
  return static_cast<mfast::int32_mref>((*this)[50]);
}

inline
void
MDSecurityList_141_mref::RelatedSym_element_mref::omit_SecurityMatchType() const
{
  (*this)[50].omit();
}

inline
MDSecurityList_111_cref::MDSecurityList_111_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_111_cref::MDSecurityList_111_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_111_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityList_111_cref::MDSecurityList_111_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityList_111_cref::MDSecurityList_111_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_111_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_111_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename RelatedSymbols_cref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_111_mref::MDSecurityList_111_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityList_111_mref::MDSecurityList_111_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityList_111_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityList_111_mref::MDSecurityList_111_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityList_111_mref::MDSecurityList_111_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityList_111_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityList_111_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename RelatedSymbols_mref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[6]) );
}

inline
MDSecurityList_111::MDSecurityList_111(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityList_111::MDSecurityList_111(
  const MDSecurityList_111_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityList_111::MDSecurityList_111(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityList_111::cref_type
MDSecurityList_111::ref() const
{
  return MDSecurityList_111::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_111::cref_type
MDSecurityList_111::cref() const
{
  return MDSecurityList_111::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_111::mref_type
MDSecurityList_111::ref()
{
  return MDSecurityList_111::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityList_111::mref_type
MDSecurityList_111::mref()
{
  return MDSecurityList_111::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSecurityList_111_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::try_get_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::set_TotNoRelatedSym() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::try_get_LastFragment() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::set_LastFragment() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline MDSecurityList_111_cref::RelatedSymbols_cref
MDSecurityList_111_cref::get_RelatedSymbols() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_cref>((*this)[6]);
}

inline MDSecurityList_111_cref::RelatedSymbols_cref
MDSecurityList_111_cref::try_get_RelatedSymbols() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_cref>((*this)[6]);
}

inline MDSecurityList_111_mref::RelatedSymbols_mref
MDSecurityList_111_mref::set_RelatedSymbols() const
{
  return static_cast<MDSecurityList_111_mref::RelatedSymbols_mref>((*this)[6]);
}

inline
MDSecurityList_111_cref::RelatedSymbols_element_cref::RelatedSymbols_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_111_cref::RelatedSymbols_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_111_mref::RelatedSymbols_element_mref::RelatedSymbols_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_111_mref::RelatedSymbols_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_111_cref::RelatedSymbols_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename ApplIds_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename SecurityAltIDs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[6]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Legs_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[14]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[18]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[21]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[28]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
}

template <typename Visitor>
inline void MDSecurityList_111_mref::RelatedSymbols_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename ApplIds_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename SecurityAltIDs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[6]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Legs_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[14]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[18]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[21]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[28]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[37]) );
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_ApplIds() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_cref>((*this)[4]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_ApplIds() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_cref>((*this)[4]);
}

inline MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_ApplIds() const
{
  return static_cast<MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_mref>((*this)[4]);
}

inline
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::ApplIds_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::ApplIds_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename FeedTypes_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename FeedTypes_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::get_ApplId() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::try_get_ApplId() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::set_ApplId() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::get_FeedTypes() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::try_get_FeedTypes() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_cref>((*this)[1]);
}

inline MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::set_FeedTypes() const
{
  return static_cast<MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_mref>((*this)[1]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::omit_FeedTypes() const
{
  (*this)[1].omit();
}

inline
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::FeedTypes_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_element_mref::FeedTypes_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::try_get_MDFeedType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_element_mref::set_MDFeedType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::ApplIds_element_cref::FeedTypes_element_cref::try_get_MarketDepth() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::ApplIds_element_mref::FeedTypes_element_mref::set_MarketDepth() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityAltIDs() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_cref>((*this)[5]);
}

inline MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityAltIDs() const
{
  return static_cast<MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_mref>((*this)[5]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_SecurityAltIDs() const
{
  (*this)[5].omit();
}

inline
MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::SecurityAltIDs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_element_mref::SecurityAltIDs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_element_mref::set_SecurityAltID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::SecurityAltIDs_element_cref::try_get_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::SecurityAltIDs_element_mref::set_SecurityAltIDSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_Underlyings() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_Underlyings() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_cref>((*this)[6]);
}

inline MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_Underlyings() const
{
  return static_cast<MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_mref>((*this)[6]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_Underlyings() const
{
  (*this)[6].omit();
}

inline
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
}

template <typename Visitor>
inline void MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::try_get_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_element_mref::set_UnderlyingSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_Legs() const
{
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_cref>((*this)[7]);
}

inline MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_Legs() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_cref>((*this)[7]);
}

inline MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_Legs() const
{
  return static_cast<MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_mref>((*this)[7]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_Legs() const
{
  (*this)[7].omit();
}

inline
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::Legs_element_cref(
  const mfast::value_storage*   storage,
  MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::Legs_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<int32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

template <typename Visitor>
inline void MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<int32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_LegSymbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::set_LegSymbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_LegSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::set_LegSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::int32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_LegRatioQty() const
{
  return static_cast<mfast::int32_cref>((*this)[3]);
}

inline mfast::int32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::set_LegRatioQty() const
{
  return static_cast<mfast::int32_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_LegType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_LegType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::set_LegType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_BuyersPerspective() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_BuyersPerspective() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::Legs_element_mref::set_BuyersPerspective() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::Legs_element_cref::try_get_LegSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_RoundLot() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_RoundLot() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_RoundLot() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_MinTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_MinTradeVol() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_MinTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_MinTradeVol() const
{
  (*this)[10].omit();
}

inline mfast::decimal_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[11]);
}

inline mfast::decimal_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_cref>((*this)[11]);
}

inline mfast::decimal_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_MinPriceIncrement() const
{
  return static_cast<mfast::decimal_mref>((*this)[11]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_TickSizeDenominator() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_MinOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_MinOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_MinOrderQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_MaxOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_MaxOrderQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_MaxOrderQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_InstrumentID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_InstrumentID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_InstrumentID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[15]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SettlCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecuritySubType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[19]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_Asset() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_Asset() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_Asset() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_MaturityDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[22]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_MaturityDate() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[22]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_MaturityDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[22]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_MaturityDate() const
{
  (*this)[22].omit();
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_MaturityMonthYear() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_MaturityMonthYear() const
{
  return static_cast<mfast::uint32_mref>((*this)[23]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_MaturityMonthYear() const
{
  (*this)[23].omit();
}

inline mfast::decimal_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_StrikePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[24]);
}

inline mfast::decimal_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_StrikePrice() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[24]);
}

inline mfast::decimal_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_StrikePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[24]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_StrikePrice() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_StrikeCurrency() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_StrikeCurrency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_StrikeCurrency() const
{
  (*this)[25].omit();
}

inline mfast::decimal_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_ContractMultiplier() const
{
  return static_cast<mfast::decimal_cref>((*this)[26]);
}

inline mfast::decimal_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_ContractMultiplier() const
{
  return static_cast<mfast::decimal_cref>((*this)[26]);
}

inline mfast::decimal_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_ContractMultiplier() const
{
  return static_cast<mfast::decimal_mref>((*this)[26]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_ContractSettlMonth() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_ContractSettlMonth() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_ContractSettlMonth() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_CFICode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_CFICode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_CountryOfIssue() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[29]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_IssueDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_IssueDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_DatedDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_DatedDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_DatedDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_StartDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_StartDate() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_StartDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_StartDate() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_EndDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_EndDate() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_EndDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_EndDate() const
{
  (*this)[33].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SettlType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[34]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SettlType() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[34]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SettlType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[34]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_SettlType() const
{
  (*this)[34].omit();
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SettlDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SettlDate() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SettlDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[35]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_SettlDate() const
{
  (*this)[35].omit();
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_cref>((*this)[36]);
}

inline mfast::uint64_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityValidityTimestamp() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[36]);
}

inline mfast::uint64_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityValidityTimestamp() const
{
  return static_cast<mfast::uint64_mref>((*this)[36]);
}

inline
void
MDSecurityList_111_mref::RelatedSymbols_element_mref::omit_SecurityValidityTimestamp() const
{
  (*this)[36].omit();
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_cref
MDSecurityList_111_cref::RelatedSymbols_element_cref::try_get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[37]);
}

inline mfast::ascii_string_mref
MDSecurityList_111_mref::RelatedSymbols_element_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[37]);
}

inline
MDIncRefresh_81_cref::MDIncRefresh_81_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_81_cref::MDIncRefresh_81_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_81_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_81_cref::MDIncRefresh_81_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_81_cref::MDIncRefresh_81_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_81_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_81_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 20> > > ((*this)[5]) );
}

inline
MDIncRefresh_81_mref::MDIncRefresh_81_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_81_mref::MDIncRefresh_81_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_81_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_81_mref::MDIncRefresh_81_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_81_mref::MDIncRefresh_81_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_81_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_81_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 20> > > ((*this)[5]) );
}

inline
MDIncRefresh_81::MDIncRefresh_81(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_81::MDIncRefresh_81(
  const MDIncRefresh_81_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_81::MDIncRefresh_81(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_81::cref_type
MDIncRefresh_81::ref() const
{
  return MDIncRefresh_81::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_81::cref_type
MDIncRefresh_81::cref() const
{
  return MDIncRefresh_81::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_81::mref_type
MDIncRefresh_81::ref()
{
  return MDIncRefresh_81::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_81::mref_type
MDIncRefresh_81::mref()
{
  return MDIncRefresh_81::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_81_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_81_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_81_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_81_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::get_PosDupFlag() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::try_get_PosDupFlag() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDIncRefresh_81_mref::set_PosDupFlag() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline
void
MDIncRefresh_81_mref::omit_PosDupFlag() const
{
  (*this)[4].omit();
}

inline MDIncRefresh_81_cref::MDEntries_cref
MDIncRefresh_81_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_81_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_81_cref::MDEntries_cref
MDIncRefresh_81_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_81_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_81_mref::MDEntries_mref
MDIncRefresh_81_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_81_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_81_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_81_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_81_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_81_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_81_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 3> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 3> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, delta_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
}

template <typename Visitor>
inline void MDIncRefresh_81_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 3> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 3> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, delta_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_MDUpdateAction() const
{
  (*this)[0].omit();
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_MDPriceLevel() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_MDPriceLevel() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_MDPriceLevel() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_MDPriceLevel() const
{
  (*this)[1].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_SecurityIDSource() const
{
  (*this)[3].omit();
}

inline mfast::uint64_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_SecurityID() const
{
  (*this)[4].omit();
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_RptSeq() const
{
  (*this)[5].omit();
}

inline mfast::decimal_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[6]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline mfast::int32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDIncRefresh_81_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDIncRefresh_81_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDIncRefresh_81_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[11].omit();
}

inline
MDIncRefresh_152_cref::MDIncRefresh_152_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_152_cref::MDIncRefresh_152_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_152_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_152_cref::MDIncRefresh_152_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_152_cref::MDIncRefresh_152_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_152_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_152_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[5]) );
}

inline
MDIncRefresh_152_mref::MDIncRefresh_152_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_152_mref::MDIncRefresh_152_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_152_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_152_mref::MDIncRefresh_152_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_152_mref::MDIncRefresh_152_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_152_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_152_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[5]) );
}

inline
MDIncRefresh_152::MDIncRefresh_152(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_152::MDIncRefresh_152(
  const MDIncRefresh_152_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_152::MDIncRefresh_152(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_152::cref_type
MDIncRefresh_152::ref() const
{
  return MDIncRefresh_152::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_152::cref_type
MDIncRefresh_152::cref() const
{
  return MDIncRefresh_152::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_152::mref_type
MDIncRefresh_152::ref()
{
  return MDIncRefresh_152::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_152::mref_type
MDIncRefresh_152::mref()
{
  return MDIncRefresh_152::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::try_get_TradeDate() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_152_mref::omit_TradeDate() const
{
  (*this)[4].omit();
}

inline MDIncRefresh_152_cref::MDEntries_cref
MDIncRefresh_152_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_152_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_152_cref::MDEntries_cref
MDIncRefresh_152_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_152_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_152_mref::MDEntries_mref
MDIncRefresh_152_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_152_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_152_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_152_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_152_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_152_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_152_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[17]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[21]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[39]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[40]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[49]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

template <typename Visitor>
inline void MDIncRefresh_152_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[17]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[21]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[39]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[40]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[49]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[50]) );
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[6].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[7].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[8]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[9].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[10]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline mfast::int64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[12]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[16].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_PriceDelta() const
{
  return static_cast<mfast::decimal_cref>((*this)[17]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_PriceDelta() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[17]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_PriceDelta() const
{
  return static_cast<mfast::decimal_mref>((*this)[17]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_PriceDelta() const
{
  (*this)[17].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_FirstPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_FirstPx() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_FirstPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[18]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_FirstPx() const
{
  (*this)[18].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_LastPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[19]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_LastPx() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[19]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_LastPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[19]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_LastPx() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[20].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[21]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[21]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[21]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[21].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[22]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[22]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[22]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[22].omit();
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[23]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[23]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[23]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[25].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[26]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[28].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[29]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[29].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[30]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[30]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[30]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[30].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[31]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[31]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[31]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[33].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[34]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[34].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[35]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[35].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[36]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[36]);
}

inline mfast::ascii_string_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[36]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[36].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[37]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[37].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[38]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[38].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[39]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[39]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[39]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[39].omit();
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[40]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[40]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[40]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[40].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[41]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[41].omit();
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[42]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[42].omit();
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[43]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[43]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[43]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[43].omit();
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[44]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[44].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[45]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_BTBCertIndicator() const
{
  if ((*this)[45].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[45]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[45]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_BTBCertIndicator() const
{
  (*this)[45].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_BTBContractInfo() const
{
  return static_cast<mfast::uint32_cref>((*this)[46]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_BTBContractInfo() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[46]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_BTBContractInfo() const
{
  return static_cast<mfast::uint32_mref>((*this)[46]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_BTBContractInfo() const
{
  (*this)[46].omit();
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_BTBGraceDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[47]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_BTBGraceDate() const
{
  if ((*this)[47].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[47]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_BTBGraceDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[47]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_BTBGraceDate() const
{
  (*this)[47].omit();
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[48]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[48].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[48]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[48]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[48].omit();
}

inline MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_cref>((*this)[49]);
}

inline MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[49].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_cref>((*this)[49]);
}

inline MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_mref>((*this)[49]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[49].omit();
}

inline
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_152_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint64_cref>((*this)[50]);
}

inline mfast::uint64_cref
MDIncRefresh_152_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[50].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[50]);
}

inline mfast::uint64_mref
MDIncRefresh_152_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint64_mref>((*this)[50]);
}

inline
void
MDIncRefresh_152_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[50].omit();
}

inline
MDIncRefresh_150_cref::MDIncRefresh_150_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_150_cref::MDIncRefresh_150_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_150_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_150_cref::MDIncRefresh_150_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_150_cref::MDIncRefresh_150_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_150_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_150_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 54> > > ((*this)[5]) );
}

inline
MDIncRefresh_150_mref::MDIncRefresh_150_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_150_mref::MDIncRefresh_150_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_150_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_150_mref::MDIncRefresh_150_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_150_mref::MDIncRefresh_150_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_150_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_150_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 54> > > ((*this)[5]) );
}

inline
MDIncRefresh_150::MDIncRefresh_150(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_150::MDIncRefresh_150(
  const MDIncRefresh_150_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_150::MDIncRefresh_150(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_150::cref_type
MDIncRefresh_150::ref() const
{
  return MDIncRefresh_150::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_150::cref_type
MDIncRefresh_150::cref() const
{
  return MDIncRefresh_150::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_150::mref_type
MDIncRefresh_150::ref()
{
  return MDIncRefresh_150::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_150::mref_type
MDIncRefresh_150::mref()
{
  return MDIncRefresh_150::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::try_get_TradeDate() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_150_mref::omit_TradeDate() const
{
  (*this)[4].omit();
}

inline MDIncRefresh_150_cref::MDEntries_cref
MDIncRefresh_150_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_150_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_150_cref::MDEntries_cref
MDIncRefresh_150_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_150_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_150_mref::MDEntries_mref
MDIncRefresh_150_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_150_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_150_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_150_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_150_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_150_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_150_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[46]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
}

template <typename Visitor>
inline void MDIncRefresh_150_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[46]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[6].omit();
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[7].omit();
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[8]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[9].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[10]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline mfast::int64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[12]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[17].omit();
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[18]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[19].omit();
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[20]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[22].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[23]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[23].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[24]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[33]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[33]);
}

inline mfast::ascii_string_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[33]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[33].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[34]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[36].omit();
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[37]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[37].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[38]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[38]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[38]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[41].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_BTBCertIndicator() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[42]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_BTBCertIndicator() const
{
  (*this)[42].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_BTBContractInfo() const
{
  return static_cast<mfast::uint32_cref>((*this)[43]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_BTBContractInfo() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[43]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_BTBContractInfo() const
{
  return static_cast<mfast::uint32_mref>((*this)[43]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_BTBContractInfo() const
{
  (*this)[43].omit();
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_BTBGraceDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_BTBGraceDate() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_BTBGraceDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[44]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_BTBGraceDate() const
{
  (*this)[44].omit();
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[45].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[45]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[45]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[45].omit();
}

inline MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_cref>((*this)[46]);
}

inline MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_cref>((*this)[46]);
}

inline MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_mref>((*this)[46]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[46].omit();
}

inline
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_150_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint64_cref>((*this)[47]);
}

inline mfast::uint64_cref
MDIncRefresh_150_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[47].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[47]);
}

inline mfast::uint64_mref
MDIncRefresh_150_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint64_mref>((*this)[47]);
}

inline
void
MDIncRefresh_150_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[47].omit();
}

inline
MDIncRefresh_145_cref::MDIncRefresh_145_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_145_cref::MDIncRefresh_145_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_145_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_145_cref::MDIncRefresh_145_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_145_cref::MDIncRefresh_145_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_145_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_145_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 54> > > ((*this)[5]) );
}

inline
MDIncRefresh_145_mref::MDIncRefresh_145_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_145_mref::MDIncRefresh_145_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_145_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_145_mref::MDIncRefresh_145_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_145_mref::MDIncRefresh_145_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_145_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_145_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 54> > > ((*this)[5]) );
}

inline
MDIncRefresh_145::MDIncRefresh_145(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_145::MDIncRefresh_145(
  const MDIncRefresh_145_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_145::MDIncRefresh_145(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_145::cref_type
MDIncRefresh_145::ref() const
{
  return MDIncRefresh_145::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_145::cref_type
MDIncRefresh_145::cref() const
{
  return MDIncRefresh_145::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_145::mref_type
MDIncRefresh_145::ref()
{
  return MDIncRefresh_145::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_145::mref_type
MDIncRefresh_145::mref()
{
  return MDIncRefresh_145::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::try_get_TradeDate() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_145_mref::omit_TradeDate() const
{
  (*this)[4].omit();
}

inline MDIncRefresh_145_cref::MDEntries_cref
MDIncRefresh_145_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_145_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_145_cref::MDEntries_cref
MDIncRefresh_145_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_145_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_145_mref::MDEntries_mref
MDIncRefresh_145_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_145_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_145_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_145_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_145_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_145_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_145_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
}

template <typename Visitor>
inline void MDIncRefresh_145_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[6].omit();
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[7].omit();
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[8]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[9].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[10]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline mfast::int64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[12]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[17].omit();
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[18]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[19].omit();
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[20]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[22].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[23]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[23].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[24]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[33]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[33]);
}

inline mfast::ascii_string_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[33]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[33].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[34]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[36].omit();
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[37]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[37].omit();
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[38]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[38]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[38]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[41].omit();
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[42]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[42].omit();
}

inline MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_mref>((*this)[43]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[43].omit();
}

inline
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_145_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_cref
MDIncRefresh_145_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_mref
MDIncRefresh_145_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint64_mref>((*this)[44]);
}

inline
void
MDIncRefresh_145_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[44].omit();
}

inline
MDIncRefresh_138_cref::MDIncRefresh_138_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_138_cref::MDIncRefresh_138_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_138_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_138_cref::MDIncRefresh_138_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_138_cref::MDIncRefresh_138_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_138_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_138_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 54> > > ((*this)[5]) );
}

inline
MDIncRefresh_138_mref::MDIncRefresh_138_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_138_mref::MDIncRefresh_138_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_138_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_138_mref::MDIncRefresh_138_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_138_mref::MDIncRefresh_138_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_138_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_138_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 54> > > ((*this)[5]) );
}

inline
MDIncRefresh_138::MDIncRefresh_138(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_138::MDIncRefresh_138(
  const MDIncRefresh_138_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_138::MDIncRefresh_138(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_138::cref_type
MDIncRefresh_138::ref() const
{
  return MDIncRefresh_138::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_138::cref_type
MDIncRefresh_138::cref() const
{
  return MDIncRefresh_138::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_138::mref_type
MDIncRefresh_138::ref()
{
  return MDIncRefresh_138::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_138::mref_type
MDIncRefresh_138::mref()
{
  return MDIncRefresh_138::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::try_get_TradeDate() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_138_mref::omit_TradeDate() const
{
  (*this)[4].omit();
}

inline MDIncRefresh_138_cref::MDEntries_cref
MDIncRefresh_138_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_138_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_138_cref::MDEntries_cref
MDIncRefresh_138_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_138_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_138_mref::MDEntries_mref
MDIncRefresh_138_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_138_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_138_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_138_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_138_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_138_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_138_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
}

template <typename Visitor>
inline void MDIncRefresh_138_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[6].omit();
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[7].omit();
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[8]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[9].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[10]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline mfast::int64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[12]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[17].omit();
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[18]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[19].omit();
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[20]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[22].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[23]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[33]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[33]);
}

inline mfast::ascii_string_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[33]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[33].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[34]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[36].omit();
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[37]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[37].omit();
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[38]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[38]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[38]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[41].omit();
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[42]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[42].omit();
}

inline MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_mref>((*this)[43]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[43].omit();
}

inline
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_138_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_cref
MDIncRefresh_138_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_mref
MDIncRefresh_138_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint64_mref>((*this)[44]);
}

inline
void
MDIncRefresh_138_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[44].omit();
}

inline
MDIncRefresh_123_cref::MDIncRefresh_123_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_123_cref::MDIncRefresh_123_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_123_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_123_cref::MDIncRefresh_123_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_123_cref::MDIncRefresh_123_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_123_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_123_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[5]) );
}

inline
MDIncRefresh_123_mref::MDIncRefresh_123_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_123_mref::MDIncRefresh_123_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_123_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_123_mref::MDIncRefresh_123_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_123_mref::MDIncRefresh_123_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_123_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_123_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[5]) );
}

inline
MDIncRefresh_123::MDIncRefresh_123(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_123::MDIncRefresh_123(
  const MDIncRefresh_123_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_123::MDIncRefresh_123(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_123::cref_type
MDIncRefresh_123::ref() const
{
  return MDIncRefresh_123::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_123::cref_type
MDIncRefresh_123::cref() const
{
  return MDIncRefresh_123::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_123::mref_type
MDIncRefresh_123::ref()
{
  return MDIncRefresh_123::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_123::mref_type
MDIncRefresh_123::mref()
{
  return MDIncRefresh_123::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_123_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_123_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_123_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::try_get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline MDIncRefresh_123_cref::MDEntries_cref
MDIncRefresh_123_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_123_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_123_cref::MDEntries_cref
MDIncRefresh_123_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_123_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_123_mref::MDEntries_mref
MDIncRefresh_123_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_123_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_123_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_123_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_123_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_123_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_123_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_cref<int32_cref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[19]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
}

template <typename Visitor>
inline void MDIncRefresh_123_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_mref<int32_mref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[19]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDPriceLevel() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDPriceLevel() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDPriceLevel() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDPriceLevel() const
{
  (*this)[1].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_Symbol() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_Symbol() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::uint64_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[8].omit();
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[9]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[11].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline mfast::int32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int32_cref>((*this)[13]);
}

inline mfast::int32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[13]);
}

inline mfast::int32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int32_mref>((*this)[13]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[17].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[18].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[19]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[19].omit();
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[20]);
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[20]);
}

inline mfast::decimal_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[20]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[21].omit();
}

inline mfast::uint64_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[22]);
}

inline mfast::uint64_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[22]);
}

inline mfast::uint64_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[22]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[24].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_OpenCloseSettleFlag() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[25]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_OpenCloseSettleFlag() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[28].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[29]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[30].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SettlType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[31]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SettlType() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[31]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_SettlType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[31]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_SettlType() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SettlDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SettlDate() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_SettlDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_SettlDate() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_SettlePriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_SettlePriceType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_SettlePriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_SettlePriceType() const
{
  (*this)[33].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[34]);
}

inline mfast::ascii_string_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[34]);
}

inline mfast::ascii_string_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[34]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[34].omit();
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[35]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[36].omit();
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[37]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[37].omit();
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::get_TradingRefPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_cref
MDIncRefresh_123_cref::MDEntries_element_cref::try_get_TradingRefPrice() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_mref
MDIncRefresh_123_mref::MDEntries_element_mref::set_TradingRefPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[38]);
}

inline
void
MDIncRefresh_123_mref::MDEntries_element_mref::omit_TradingRefPrice() const
{
  (*this)[38].omit();
}

inline
MDIncRefresh_126_cref::MDIncRefresh_126_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_126_cref::MDIncRefresh_126_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_126_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDIncRefresh_126_cref::MDIncRefresh_126_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_126_cref::MDIncRefresh_126_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_126_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_126_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[5]) );
}

inline
MDIncRefresh_126_mref::MDIncRefresh_126_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDIncRefresh_126_mref::MDIncRefresh_126_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDIncRefresh_126_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDIncRefresh_126_mref::MDIncRefresh_126_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDIncRefresh_126_mref::MDIncRefresh_126_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDIncRefresh_126_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDIncRefresh_126_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[5]) );
}

inline
MDIncRefresh_126::MDIncRefresh_126(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDIncRefresh_126::MDIncRefresh_126(
  const MDIncRefresh_126_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDIncRefresh_126::MDIncRefresh_126(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDIncRefresh_126::cref_type
MDIncRefresh_126::ref() const
{
  return MDIncRefresh_126::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_126::cref_type
MDIncRefresh_126::cref() const
{
  return MDIncRefresh_126::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_126::mref_type
MDIncRefresh_126::ref()
{
  return MDIncRefresh_126::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDIncRefresh_126::mref_type
MDIncRefresh_126::mref()
{
  return MDIncRefresh_126::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDIncRefresh_126_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDIncRefresh_126_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDIncRefresh_126_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::try_get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline MDIncRefresh_126_cref::MDEntries_cref
MDIncRefresh_126_cref::get_MDEntries() const
{
  return static_cast<MDIncRefresh_126_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_126_cref::MDEntries_cref
MDIncRefresh_126_cref::try_get_MDEntries() const
{
  return static_cast<MDIncRefresh_126_cref::MDEntries_cref>((*this)[5]);
}

inline MDIncRefresh_126_mref::MDEntries_mref
MDIncRefresh_126_mref::set_MDEntries() const
{
  return static_cast<MDIncRefresh_126_mref::MDEntries_mref>((*this)[5]);
}

inline
MDIncRefresh_126_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDIncRefresh_126_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDIncRefresh_126_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDIncRefresh_126_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDIncRefresh_126_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[19]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
}

template <typename Visitor>
inline void MDIncRefresh_126_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[19]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDPriceLevel() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDPriceLevel() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDPriceLevel() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDPriceLevel() const
{
  (*this)[1].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_Symbol() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_Symbol() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::uint64_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[8].omit();
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[9]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[11].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline mfast::int64_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[13]);
}

inline mfast::int64_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[13]);
}

inline mfast::int64_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[13]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[17].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[18].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[19]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[19].omit();
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[20]);
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[20]);
}

inline mfast::decimal_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[20]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[21].omit();
}

inline mfast::uint64_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[22]);
}

inline mfast::uint64_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[22]);
}

inline mfast::uint64_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[22]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[24].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_OpenCloseSettleFlag() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[25]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_OpenCloseSettleFlag() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[28].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[29]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[30].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SettlType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[31]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SettlType() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[31]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_SettlType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[31]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_SettlType() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SettlDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SettlDate() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_SettlDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_SettlDate() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_SettlePriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_SettlePriceType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_SettlePriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_SettlePriceType() const
{
  (*this)[33].omit();
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[34]);
}

inline mfast::ascii_string_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[34]);
}

inline mfast::ascii_string_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[34]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[34].omit();
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[35]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[36].omit();
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[37]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[37].omit();
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::get_TradingRefPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_cref
MDIncRefresh_126_cref::MDEntries_element_cref::try_get_TradingRefPrice() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_mref
MDIncRefresh_126_mref::MDEntries_element_mref::set_TradingRefPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[38]);
}

inline
void
MDIncRefresh_126_mref::MDEntries_element_mref::omit_TradingRefPrice() const
{
  (*this)[38].omit();
}

inline
MDSecurityStatus_142_cref::MDSecurityStatus_142_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityStatus_142_cref::MDSecurityStatus_142_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_142_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityStatus_142_cref::MDSecurityStatus_142_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityStatus_142_cref::MDSecurityStatus_142_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityStatus_142_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityStatus_142_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 3> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
}

inline
MDSecurityStatus_142_mref::MDSecurityStatus_142_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityStatus_142_mref::MDSecurityStatus_142_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_142_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityStatus_142_mref::MDSecurityStatus_142_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityStatus_142_mref::MDSecurityStatus_142_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityStatus_142_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityStatus_142_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 3> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
}

inline
MDSecurityStatus_142::MDSecurityStatus_142(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityStatus_142::MDSecurityStatus_142(
  const MDSecurityStatus_142_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityStatus_142::MDSecurityStatus_142(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityStatus_142::cref_type
MDSecurityStatus_142::ref() const
{
  return MDSecurityStatus_142::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_142::cref_type
MDSecurityStatus_142::cref() const
{
  return MDSecurityStatus_142::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_142::mref_type
MDSecurityStatus_142::ref()
{
  return MDSecurityStatus_142::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_142::mref_type
MDSecurityStatus_142::mref()
{
  return MDSecurityStatus_142::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityStatus_142_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSecurityStatus_142_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::try_get_SecurityGroup() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_142_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline
void
MDSecurityStatus_142_mref::omit_SecurityGroup() const
{
  (*this)[4].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[5]);
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::try_get_SecurityID() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[5]);
}

inline mfast::uint64_mref
MDSecurityStatus_142_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[5]);
}

inline
void
MDSecurityStatus_142_mref::omit_SecurityID() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::try_get_SecurityIDSource() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline
void
MDSecurityStatus_142_mref::omit_SecurityIDSource() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::try_get_SecurityExchange() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_142_mref::set_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSecurityStatus_142_mref::omit_SecurityExchange() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_142_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_142_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSecurityStatus_142_mref::omit_TradingSessionSubID() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSecurityStatus_142_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDSecurityStatus_142_mref::omit_SecurityTradingStatus() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::try_get_TradingSessionID() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSecurityStatus_142_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSecurityStatus_142_mref::omit_TradingSessionID() const
{
  (*this)[10].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[11]);
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[11]);
}

inline mfast::uint64_mref
MDSecurityStatus_142_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[11]);
}

inline
void
MDSecurityStatus_142_mref::omit_TradSesOpenTime() const
{
  (*this)[11].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[12]);
}

inline mfast::uint64_cref
MDSecurityStatus_142_cref::try_get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[12]);
}

inline mfast::uint64_mref
MDSecurityStatus_142_mref::set_TransactTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[12]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::try_get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MDSecurityStatus_142_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityStatus_142_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityStatus_142_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSecurityStatus_142_mref::omit_SecurityTradingEvent() const
{
  (*this)[14].omit();
}

inline
MDSecurityStatus_134_cref::MDSecurityStatus_134_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityStatus_134_cref::MDSecurityStatus_134_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_134_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityStatus_134_cref::MDSecurityStatus_134_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityStatus_134_cref::MDSecurityStatus_134_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityStatus_134_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityStatus_134_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 3> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
}

inline
MDSecurityStatus_134_mref::MDSecurityStatus_134_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityStatus_134_mref::MDSecurityStatus_134_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_134_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityStatus_134_mref::MDSecurityStatus_134_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityStatus_134_mref::MDSecurityStatus_134_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityStatus_134_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityStatus_134_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 3> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
}

inline
MDSecurityStatus_134::MDSecurityStatus_134(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityStatus_134::MDSecurityStatus_134(
  const MDSecurityStatus_134_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityStatus_134::MDSecurityStatus_134(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityStatus_134::cref_type
MDSecurityStatus_134::ref() const
{
  return MDSecurityStatus_134::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_134::cref_type
MDSecurityStatus_134::cref() const
{
  return MDSecurityStatus_134::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_134::mref_type
MDSecurityStatus_134::ref()
{
  return MDSecurityStatus_134::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_134::mref_type
MDSecurityStatus_134::mref()
{
  return MDSecurityStatus_134::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityStatus_134_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSecurityStatus_134_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::try_get_SecurityGroup() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_134_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline
void
MDSecurityStatus_134_mref::omit_SecurityGroup() const
{
  (*this)[4].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::try_get_Symbol() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_134_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
MDSecurityStatus_134_mref::omit_Symbol() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::try_get_SecurityID() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSecurityStatus_134_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSecurityStatus_134_mref::omit_SecurityID() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::try_get_SecurityIDSource() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline
void
MDSecurityStatus_134_mref::omit_SecurityIDSource() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::try_get_SecurityExchange() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_134_mref::set_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSecurityStatus_134_mref::omit_SecurityExchange() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_134_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_134_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDSecurityStatus_134_mref::omit_TradingSessionSubID() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSecurityStatus_134_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSecurityStatus_134_mref::omit_SecurityTradingStatus() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::try_get_TradingSessionID() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
MDSecurityStatus_134_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline
void
MDSecurityStatus_134_mref::omit_TradingSessionID() const
{
  (*this)[11].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[12]);
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[12]);
}

inline mfast::uint64_mref
MDSecurityStatus_134_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[12]);
}

inline
void
MDSecurityStatus_134_mref::omit_TradSesOpenTime() const
{
  (*this)[12].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[13]);
}

inline mfast::uint64_cref
MDSecurityStatus_134_cref::try_get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[13]);
}

inline mfast::uint64_mref
MDSecurityStatus_134_mref::set_TransactTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[13]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::try_get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityStatus_134_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDSecurityStatus_134_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDSecurityStatus_134_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDSecurityStatus_134_mref::omit_SecurityTradingEvent() const
{
  (*this)[15].omit();
}

inline
MDSecurityStatus_125_cref::MDSecurityStatus_125_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityStatus_125_cref::MDSecurityStatus_125_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_125_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSecurityStatus_125_cref::MDSecurityStatus_125_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSecurityStatus_125_cref::MDSecurityStatus_125_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityStatus_125_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityStatus_125_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 3> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
}

inline
MDSecurityStatus_125_mref::MDSecurityStatus_125_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSecurityStatus_125_mref::MDSecurityStatus_125_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSecurityStatus_125_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSecurityStatus_125_mref::MDSecurityStatus_125_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSecurityStatus_125_mref::MDSecurityStatus_125_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSecurityStatus_125_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSecurityStatus_125_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 3> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[14]) );
}

inline
MDSecurityStatus_125::MDSecurityStatus_125(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSecurityStatus_125::MDSecurityStatus_125(
  const MDSecurityStatus_125_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSecurityStatus_125::MDSecurityStatus_125(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSecurityStatus_125::cref_type
MDSecurityStatus_125::ref() const
{
  return MDSecurityStatus_125::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_125::cref_type
MDSecurityStatus_125::cref() const
{
  return MDSecurityStatus_125::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_125::mref_type
MDSecurityStatus_125::ref()
{
  return MDSecurityStatus_125::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSecurityStatus_125::mref_type
MDSecurityStatus_125::mref()
{
  return MDSecurityStatus_125::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDSecurityStatus_125_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSecurityStatus_125_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::try_get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSecurityStatus_125_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::get_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::try_get_SecurityGroup() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_125_mref::set_SecurityGroup() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
MDSecurityStatus_125_mref::omit_SecurityGroup() const
{
  (*this)[5].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::try_get_Symbol() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_125_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDSecurityStatus_125_mref::omit_Symbol() const
{
  (*this)[6].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[7]);
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::try_get_SecurityID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[7]);
}

inline mfast::uint64_mref
MDSecurityStatus_125_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[7]);
}

inline
void
MDSecurityStatus_125_mref::omit_SecurityID() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::try_get_SecurityIDSource() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline
void
MDSecurityStatus_125_mref::omit_SecurityIDSource() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::try_get_SecurityExchange() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_125_mref::set_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDSecurityStatus_125_mref::omit_SecurityExchange() const
{
  (*this)[9].omit();
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_cref
MDSecurityStatus_125_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_mref
MDSecurityStatus_125_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[10]);
}

inline
void
MDSecurityStatus_125_mref::omit_TradingSessionSubID() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
MDSecurityStatus_125_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline
void
MDSecurityStatus_125_mref::omit_SecurityTradingStatus() const
{
  (*this)[11].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[12]);
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[12]);
}

inline mfast::uint64_mref
MDSecurityStatus_125_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[12]);
}

inline
void
MDSecurityStatus_125_mref::omit_TradSesOpenTime() const
{
  (*this)[12].omit();
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[13]);
}

inline mfast::uint64_cref
MDSecurityStatus_125_cref::try_get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[13]);
}

inline mfast::uint64_mref
MDSecurityStatus_125_mref::set_TransactTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[13]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSecurityStatus_125_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSecurityStatus_125_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSecurityStatus_125_mref::omit_SecurityTradingEvent() const
{
  (*this)[14].omit();
}

inline
MDSnapshotFullRefresh_127_cref::MDSnapshotFullRefresh_127_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_127_cref::MDSnapshotFullRefresh_127_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_127_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_127_cref::MDSnapshotFullRefresh_127_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_127_cref::MDSnapshotFullRefresh_127_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_127_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_127_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 58> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_127_mref::MDSnapshotFullRefresh_127_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_127_mref::MDSnapshotFullRefresh_127_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_127_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_127_mref::MDSnapshotFullRefresh_127_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_127_mref::MDSnapshotFullRefresh_127_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_127_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_127_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 58> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_127::MDSnapshotFullRefresh_127(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_127::MDSnapshotFullRefresh_127(
  const MDSnapshotFullRefresh_127_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_127::MDSnapshotFullRefresh_127(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_127::cref_type
MDSnapshotFullRefresh_127::ref() const
{
  return MDSnapshotFullRefresh_127::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_127::cref_type
MDSnapshotFullRefresh_127::cref() const
{
  return MDSnapshotFullRefresh_127::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_127::mref_type
MDSnapshotFullRefresh_127::ref()
{
  return MDSnapshotFullRefresh_127::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_127::mref_type
MDSnapshotFullRefresh_127::mref()
{
  return MDSnapshotFullRefresh_127::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_127_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_127_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_127_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_127_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_127_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_127_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_127_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_127_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_127_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_127_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_127_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_127_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_127_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_127_cref::MDEntries_cref
MDSnapshotFullRefresh_127_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_127_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_127_cref::MDEntries_cref
MDSnapshotFullRefresh_127_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_127_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_127_mref::MDEntries_mref
MDSnapshotFullRefresh_127_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_127_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[29]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[30]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[31]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[29]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[30]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[31]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_Curerncy() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_Curerncy() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_Curerncy() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_Curerncy() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::int64_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[3]);
}

inline mfast::int64_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[3]);
}

inline mfast::int64_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[4].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[9].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[11].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_OpenCloseSettleFlag() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_OpenCloseSettleFlag() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_OpenCloseSettleFlag() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_OpenCloseSettleFlag() const
{
  (*this)[17].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[18].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[22].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[23].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[24].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_DayCumQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_DayCumQty() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_DayCumQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_DayCumQty() const
{
  (*this)[25].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_SettlePriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_SettlePriceType() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_SettlePriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_SettlePriceType() const
{
  (*this)[27].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[28].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[29]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[29]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[29].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[30]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[30]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[30].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::get_TradingRefPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_127_cref::MDEntries_element_cref::try_get_TradingRefPrice() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::set_TradingRefPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_127_mref::MDEntries_element_mref::omit_TradingRefPrice() const
{
  (*this)[31].omit();
}

inline
MDSnapshotFullRefresh_153_cref::MDSnapshotFullRefresh_153_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_153_cref::MDSnapshotFullRefresh_153_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_153_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_153_cref::MDSnapshotFullRefresh_153_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_153_cref::MDSnapshotFullRefresh_153_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_153_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_153_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 66> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_153_mref::MDSnapshotFullRefresh_153_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_153_mref::MDSnapshotFullRefresh_153_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_153_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_153_mref::MDSnapshotFullRefresh_153_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_153_mref::MDSnapshotFullRefresh_153_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_153_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_153_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 66> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_153::MDSnapshotFullRefresh_153(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_153::MDSnapshotFullRefresh_153(
  const MDSnapshotFullRefresh_153_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_153::MDSnapshotFullRefresh_153(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_153::cref_type
MDSnapshotFullRefresh_153::ref() const
{
  return MDSnapshotFullRefresh_153::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_153::cref_type
MDSnapshotFullRefresh_153::cref() const
{
  return MDSnapshotFullRefresh_153::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_153::mref_type
MDSnapshotFullRefresh_153::ref()
{
  return MDSnapshotFullRefresh_153::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_153::mref_type
MDSnapshotFullRefresh_153::mref()
{
  return MDSnapshotFullRefresh_153::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_153_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_153_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_153_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_153_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_153_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_153_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_153_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_153_cref::MDEntries_cref
MDSnapshotFullRefresh_153_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_153_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_153_cref::MDEntries_cref
MDSnapshotFullRefresh_153_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_153_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_153_mref::MDEntries_mref
MDSnapshotFullRefresh_153_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_153_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[14]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[16]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[39]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[49]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[14]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[16]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[34]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[35]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[36]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[37]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[38]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[39]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[46]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[47]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[48]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[49]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[4].omit();
}

inline mfast::int64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[13].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_PriceDelta() const
{
  return static_cast<mfast::decimal_cref>((*this)[14]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_PriceDelta() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[14]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_PriceDelta() const
{
  return static_cast<mfast::decimal_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_PriceDelta() const
{
  (*this)[14].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_FirstPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_FirstPx() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_FirstPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_FirstPx() const
{
  (*this)[15].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_LastPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[16]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_LastPx() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[16]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_LastPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_LastPx() const
{
  (*this)[16].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[17]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[17].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[19].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[20]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[21].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[22]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[22]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[23].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[26].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[27]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[27].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[28]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[28].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[29]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[33].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[34]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[34]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[34].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[35]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[35]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[35].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[36]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[36]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[36].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[37]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[37]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[37].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[38]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[38]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[38].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[39]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[39]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[39]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[39].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[40]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[40]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[41].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[42]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[42]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[42].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[43]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[43]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[43]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[43].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_BTBCertIndicator() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[44]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[44]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_BTBCertIndicator() const
{
  (*this)[44].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_BTBContractInfo() const
{
  return static_cast<mfast::uint32_cref>((*this)[45]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_BTBContractInfo() const
{
  if ((*this)[45].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[45]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_BTBContractInfo() const
{
  return static_cast<mfast::uint32_mref>((*this)[45]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_BTBContractInfo() const
{
  (*this)[45].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_BTBGraceDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[46]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_BTBGraceDate() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[46]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_BTBGraceDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[46]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_BTBGraceDate() const
{
  (*this)[46].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[47]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[47].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[47]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[47]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[47].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[48]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[48].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[48]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[48]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[48].omit();
}

inline MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_cref>((*this)[49]);
}

inline MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[49].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_cref>((*this)[49]);
}

inline MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_mref>((*this)[49]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[49].omit();
}

inline
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_153_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_153_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline
MDSnapshotFullRefresh_151_cref::MDSnapshotFullRefresh_151_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_151_cref::MDSnapshotFullRefresh_151_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_151_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_151_cref::MDSnapshotFullRefresh_151_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_151_cref::MDSnapshotFullRefresh_151_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_151_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_151_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_151_mref::MDSnapshotFullRefresh_151_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_151_mref::MDSnapshotFullRefresh_151_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_151_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_151_mref::MDSnapshotFullRefresh_151_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_151_mref::MDSnapshotFullRefresh_151_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_151_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_151_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_151::MDSnapshotFullRefresh_151(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_151::MDSnapshotFullRefresh_151(
  const MDSnapshotFullRefresh_151_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_151::MDSnapshotFullRefresh_151(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_151::cref_type
MDSnapshotFullRefresh_151::ref() const
{
  return MDSnapshotFullRefresh_151::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_151::cref_type
MDSnapshotFullRefresh_151::cref() const
{
  return MDSnapshotFullRefresh_151::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_151::mref_type
MDSnapshotFullRefresh_151::ref()
{
  return MDSnapshotFullRefresh_151::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_151::mref_type
MDSnapshotFullRefresh_151::mref()
{
  return MDSnapshotFullRefresh_151::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_151_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_151_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_151_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_151_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_151_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_151_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_151_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_151_cref::MDEntries_cref
MDSnapshotFullRefresh_151_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_151_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_151_cref::MDEntries_cref
MDSnapshotFullRefresh_151_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_151_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_151_mref::MDEntries_mref
MDSnapshotFullRefresh_151_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_151_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[46]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[43]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[44]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[45]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[46]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[4].omit();
}

inline mfast::int64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[13].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[14].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[17].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[27].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[33].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[34]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[36].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[37]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[37].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[38]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[40].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_BTBCertIndicator() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[41]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_BTBCertIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[41]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_BTBCertIndicator() const
{
  (*this)[41].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_BTBContractInfo() const
{
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_BTBContractInfo() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[42]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_BTBContractInfo() const
{
  return static_cast<mfast::uint32_mref>((*this)[42]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_BTBContractInfo() const
{
  (*this)[42].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_BTBGraceDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[43]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_BTBGraceDate() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[43]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_BTBGraceDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[43]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_BTBGraceDate() const
{
  (*this)[43].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[44].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[44]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[44]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[44].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[45]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[45].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[45]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[45]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[45].omit();
}

inline MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_cref>((*this)[46]);
}

inline MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[46].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_cref>((*this)[46]);
}

inline MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_mref>((*this)[46]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[46].omit();
}

inline
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_151_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_151_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline
MDSnapshotFullRefresh_147_cref::MDSnapshotFullRefresh_147_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_147_cref::MDSnapshotFullRefresh_147_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_147_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_147_cref::MDSnapshotFullRefresh_147_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_147_cref::MDSnapshotFullRefresh_147_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_147_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_147_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_147_mref::MDSnapshotFullRefresh_147_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_147_mref::MDSnapshotFullRefresh_147_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_147_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_147_mref::MDSnapshotFullRefresh_147_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_147_mref::MDSnapshotFullRefresh_147_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_147_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_147_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_147::MDSnapshotFullRefresh_147(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_147::MDSnapshotFullRefresh_147(
  const MDSnapshotFullRefresh_147_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_147::MDSnapshotFullRefresh_147(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_147::cref_type
MDSnapshotFullRefresh_147::ref() const
{
  return MDSnapshotFullRefresh_147::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_147::cref_type
MDSnapshotFullRefresh_147::cref() const
{
  return MDSnapshotFullRefresh_147::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_147::mref_type
MDSnapshotFullRefresh_147::ref()
{
  return MDSnapshotFullRefresh_147::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_147::mref_type
MDSnapshotFullRefresh_147::mref()
{
  return MDSnapshotFullRefresh_147::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_147_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_147_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_147_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_147_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_147_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_147_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_147_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_147_cref::MDEntries_cref
MDSnapshotFullRefresh_147_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_147_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_147_cref::MDEntries_cref
MDSnapshotFullRefresh_147_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_147_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_147_mref::MDEntries_mref
MDSnapshotFullRefresh_147_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_147_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[4].omit();
}

inline mfast::int64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[13].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[14].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[17].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[27].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[33].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[34]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[36].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[37]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[37].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[38]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[41].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[42]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[42]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[42]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[42].omit();
}

inline MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_mref>((*this)[43]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[43].omit();
}

inline
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_147_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_147_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline
MDSnapshotFullRefresh_146_cref::MDSnapshotFullRefresh_146_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_146_cref::MDSnapshotFullRefresh_146_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_146_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_146_cref::MDSnapshotFullRefresh_146_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_146_cref::MDSnapshotFullRefresh_146_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_146_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_146_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_146_mref::MDSnapshotFullRefresh_146_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_146_mref::MDSnapshotFullRefresh_146_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_146_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_146_mref::MDSnapshotFullRefresh_146_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_146_mref::MDSnapshotFullRefresh_146_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_146_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_146_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_146::MDSnapshotFullRefresh_146(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_146::MDSnapshotFullRefresh_146(
  const MDSnapshotFullRefresh_146_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_146::MDSnapshotFullRefresh_146(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_146::cref_type
MDSnapshotFullRefresh_146::ref() const
{
  return MDSnapshotFullRefresh_146::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_146::cref_type
MDSnapshotFullRefresh_146::cref() const
{
  return MDSnapshotFullRefresh_146::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_146::mref_type
MDSnapshotFullRefresh_146::ref()
{
  return MDSnapshotFullRefresh_146::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_146::mref_type
MDSnapshotFullRefresh_146::mref()
{
  return MDSnapshotFullRefresh_146::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_146_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_146_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_146_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_146_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_146_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_146_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_146_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_146_cref::MDEntries_cref
MDSnapshotFullRefresh_146_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_146_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_146_cref::MDEntries_cref
MDSnapshotFullRefresh_146_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_146_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_146_mref::MDEntries_mref
MDSnapshotFullRefresh_146_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_146_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<int32_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<int32_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[4].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[13].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[14].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[17].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[27].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[33].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[34]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[36].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[37]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[37].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[38]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[41].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[42]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[42]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[42]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[42].omit();
}

inline MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_mref>((*this)[43]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[43].omit();
}

inline
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_146_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_146_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline
MDSnapshotFullRefresh_139_cref::MDSnapshotFullRefresh_139_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_139_cref::MDSnapshotFullRefresh_139_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_139_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_139_cref::MDSnapshotFullRefresh_139_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_139_cref::MDSnapshotFullRefresh_139_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_139_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_139_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_139_mref::MDSnapshotFullRefresh_139_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_139_mref::MDSnapshotFullRefresh_139_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_139_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_139_mref::MDSnapshotFullRefresh_139_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_139_mref::MDSnapshotFullRefresh_139_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_139_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_139_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 60> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_139::MDSnapshotFullRefresh_139(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_139::MDSnapshotFullRefresh_139(
  const MDSnapshotFullRefresh_139_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_139::MDSnapshotFullRefresh_139(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_139::cref_type
MDSnapshotFullRefresh_139::ref() const
{
  return MDSnapshotFullRefresh_139::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_139::cref_type
MDSnapshotFullRefresh_139::cref() const
{
  return MDSnapshotFullRefresh_139::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_139::mref_type
MDSnapshotFullRefresh_139::ref()
{
  return MDSnapshotFullRefresh_139::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_139::mref_type
MDSnapshotFullRefresh_139::mref()
{
  return MDSnapshotFullRefresh_139::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_139_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_139_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_139_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_139_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_139_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_139_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_139_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_139_cref::MDEntries_cref
MDSnapshotFullRefresh_139_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_139_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_139_cref::MDEntries_cref
MDSnapshotFullRefresh_139_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_139_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_139_mref::MDEntries_mref
MDSnapshotFullRefresh_139_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_139_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<int32_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename Underlyings_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<int32_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[14]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[29]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[30]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[31]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[32]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[33]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[34]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[35]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[36]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[37]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[38]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[39]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[40]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[41]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[42]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename Underlyings_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[43]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_Currency() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_Currency() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_Currency() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_Currency() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryInterestRate() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryInterestRate() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntryInterestRate() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_IndexSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_IndexSeq() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_IndexSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_IndexSeq() const
{
  (*this)[4].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[5]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[13].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[14].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[16].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[17]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[17].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[18]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[18].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[19]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_OpenCloseSettlFlag() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_OpenCloseSettlFlag() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_OpenCloseSettlFlag() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_OpenCloseSettlFlag() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[22].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[23]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[23].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[24]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[24].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[25]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[25].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[26]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[27].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[28].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[29]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[29].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_SettPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_SettPriceType() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[30]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_SettPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_SettPriceType() const
{
  (*this)[30].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_LastTradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_LastTradeDate() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[31]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_LastTradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_LastTradeDate() const
{
  (*this)[31].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_PriceAdjustmentMethod() const
{
  if ((*this)[32].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[32]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_PriceAdjustmentMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[32]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_PriceAdjustmentMethod() const
{
  (*this)[32].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[33].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[33]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[33]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[33].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[34].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[34]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[34]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[34].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[35].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[35]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[35]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[35].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_TradingReferencePrice() const
{
  if ((*this)[36].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[36]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_TradingReferencePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[36]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_TradingReferencePrice() const
{
  (*this)[36].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_PriceBandMidpointPriceType() const
{
  if ((*this)[37].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[37]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_PriceBandMidpointPriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[37]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_PriceBandMidpointPriceType() const
{
  (*this)[37].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_AvgDailyTradedQty() const
{
  if ((*this)[38].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[38]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_AvgDailyTradedQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[38]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_AvgDailyTradedQty() const
{
  (*this)[38].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_ExpireDate() const
{
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_ExpireDate() const
{
  if ((*this)[39].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[39]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_ExpireDate() const
{
  return static_cast<mfast::uint64_mref>((*this)[39]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_ExpireDate() const
{
  (*this)[39].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_EarlyTermination() const
{
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_EarlyTermination() const
{
  if ((*this)[40].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[40]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_EarlyTermination() const
{
  return static_cast<mfast::uint64_mref>((*this)[40]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_EarlyTermination() const
{
  (*this)[40].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_MaxTradeVol() const
{
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_MaxTradeVol() const
{
  if ((*this)[41].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[41]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_MaxTradeVol() const
{
  return static_cast<mfast::uint64_mref>((*this)[41]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_MaxTradeVol() const
{
  (*this)[41].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_PriceBandType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[42]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_PriceBandType() const
{
  if ((*this)[42].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[42]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_PriceBandType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[42]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_PriceBandType() const
{
  (*this)[42].omit();
}

inline MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::get_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::try_get_Underlyings() const
{
  if ((*this)[43].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_cref>((*this)[43]);
}

inline MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::set_Underlyings() const
{
  return static_cast<MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_mref>((*this)[43]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::omit_Underlyings() const
{
  (*this)[43].omit();
}

inline
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::Underlyings_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::Underlyings_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingSecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingSecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::get_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_139_cref::MDEntries_element_cref::Underlyings_element_cref::try_get_UnderlyingPxType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::set_UnderlyingPxType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_139_mref::MDEntries_element_mref::Underlyings_element_mref::omit_UnderlyingPxType() const
{
  (*this)[4].omit();
}

inline
MDSnapshotFullRefresh_128_cref::MDSnapshotFullRefresh_128_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_128_cref::MDSnapshotFullRefresh_128_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_128_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_128_cref::MDSnapshotFullRefresh_128_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_128_cref::MDSnapshotFullRefresh_128_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_128_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_128_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 56> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_128_mref::MDSnapshotFullRefresh_128_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSnapshotFullRefresh_128_mref::MDSnapshotFullRefresh_128_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_128_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSnapshotFullRefresh_128_mref::MDSnapshotFullRefresh_128_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSnapshotFullRefresh_128_mref::MDSnapshotFullRefresh_128_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSnapshotFullRefresh_128_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_128_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 56> > > ((*this)[13]) );
}

inline
MDSnapshotFullRefresh_128::MDSnapshotFullRefresh_128(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSnapshotFullRefresh_128::MDSnapshotFullRefresh_128(
  const MDSnapshotFullRefresh_128_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSnapshotFullRefresh_128::MDSnapshotFullRefresh_128(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSnapshotFullRefresh_128::cref_type
MDSnapshotFullRefresh_128::ref() const
{
  return MDSnapshotFullRefresh_128::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_128::cref_type
MDSnapshotFullRefresh_128::cref() const
{
  return MDSnapshotFullRefresh_128::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_128::mref_type
MDSnapshotFullRefresh_128::ref()
{
  return MDSnapshotFullRefresh_128::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSnapshotFullRefresh_128::mref_type
MDSnapshotFullRefresh_128::mref()
{
  return MDSnapshotFullRefresh_128::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_128_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::try_get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::get_TotNumReports() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::try_get_TotNumReports() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::set_TotNumReports() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_128_mref::omit_TotNumReports() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::try_get_TradeDate() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_128_mref::omit_TradeDate() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::get_MDReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::try_get_MDReqID() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::set_MDReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_128_mref::omit_MDReqID() const
{
  (*this)[7].omit();
}

inline mfast::int32_cref
MDSnapshotFullRefresh_128_cref::get_MarketDepth() const
{
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_cref
MDSnapshotFullRefresh_128_cref::try_get_MarketDepth() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[8]);
}

inline mfast::int32_mref
MDSnapshotFullRefresh_128_mref::set_MarketDepth() const
{
  return static_cast<mfast::int32_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_128_mref::omit_MarketDepth() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[10]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_128_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[10]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline MDSnapshotFullRefresh_128_cref::MDEntries_cref
MDSnapshotFullRefresh_128_cref::get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_128_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_128_cref::MDEntries_cref
MDSnapshotFullRefresh_128_cref::try_get_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_128_cref::MDEntries_cref>((*this)[13]);
}

inline MDSnapshotFullRefresh_128_mref::MDEntries_mref
MDSnapshotFullRefresh_128_mref::set_MDEntries() const
{
  return static_cast<MDSnapshotFullRefresh_128_mref::MDEntries_mref>((*this)[13]);
}

inline
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint64_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[12]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[29]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[30]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[31]) );
}

template <typename Visitor>
inline void MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 3> , properties_type< 2> > > ((*this)[2]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint64_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[12]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[27]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[28]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[29]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[30]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[31]) );
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_Curerncy() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_Curerncy() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_Curerncy() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_Curerncy() const
{
  (*this)[1].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[2]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[2]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntryPx() const
{
  (*this)[2].omit();
}

inline mfast::int64_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int64_cref>((*this)[3]);
}

inline mfast::int64_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[3]);
}

inline mfast::int64_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int64_mref>((*this)[3]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDInsertDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDInsertDate() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDInsertDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDInsertDate() const
{
  (*this)[4].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDInsertTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDInsertTime() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDInsertTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDInsertTime() const
{
  (*this)[5].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[6]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint64_mref>((*this)[6]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntryDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntryDate() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntryDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntryDate() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[9].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[10]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDStreamID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDStreamID() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDStreamID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDStreamID() const
{
  (*this)[11].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_PriceType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_PriceType() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[12]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_PriceType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[12]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_PriceType() const
{
  (*this)[12].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[13]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[13]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TradingSessionSubID() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[14].omit();
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[15]);
}

inline mfast::uint64_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TradSesOpenTime() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[15]);
}

inline mfast::uint64_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TradSesOpenTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[15]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TradSesOpenTime() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[16].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[17]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_OpenCloseSettleFlag() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[17]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[17]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_OpenCloseSettleFlag() const
{
  (*this)[17].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_OrderID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_OrderID() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_OrderID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_OrderID() const
{
  (*this)[18].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TradeID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TradeID() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[19]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TradeID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[19]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TradeID() const
{
  (*this)[19].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntryBuyer() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[20]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntryBuyer() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[20]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntryBuyer() const
{
  (*this)[20].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntrySeller() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[21]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntrySeller() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[21]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntrySeller() const
{
  (*this)[21].omit();
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[22]);
}

inline mfast::ascii_string_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[22]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[22].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[23]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[23]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[23].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_MDEntryPositionNo() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[24]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_MDEntryPositionNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[24]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_MDEntryPositionNo() const
{
  (*this)[24].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_DayCumQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_DayCumQty() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[25]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_DayCumQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[25]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_DayCumQty() const
{
  (*this)[25].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_SellerDays() const
{
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_SellerDays() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_SellerDays() const
{
  return static_cast<mfast::uint32_mref>((*this)[26]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_SellerDays() const
{
  (*this)[26].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_SettlePriceType() const
{
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_SettlePriceType() const
{
  if ((*this)[27].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[27]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_SettlePriceType() const
{
  return static_cast<mfast::uint32_mref>((*this)[27]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_SettlePriceType() const
{
  (*this)[27].omit();
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_PriceLimitType() const
{
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_PriceLimitType() const
{
  if ((*this)[28].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[28]);
}

inline mfast::uint32_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_PriceLimitType() const
{
  return static_cast<mfast::uint32_mref>((*this)[28]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_PriceLimitType() const
{
  (*this)[28].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_LowLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[29]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_LowLimitPrice() const
{
  if ((*this)[29].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[29]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_LowLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[29]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_LowLimitPrice() const
{
  (*this)[29].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_HighLimitPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[30]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_HighLimitPrice() const
{
  if ((*this)[30].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[30]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_HighLimitPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[30]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_HighLimitPrice() const
{
  (*this)[30].omit();
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::get_TradingRefPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_cref
MDSnapshotFullRefresh_128_cref::MDEntries_element_cref::try_get_TradingRefPrice() const
{
  if ((*this)[31].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[31]);
}

inline mfast::decimal_mref
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::set_TradingRefPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[31]);
}

inline
void
MDSnapshotFullRefresh_128_mref::MDEntries_element_mref::omit_TradingRefPrice() const
{
  (*this)[31].omit();
}

inline
MDNewsMessage_143_cref::MDNewsMessage_143_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDNewsMessage_143_cref::MDNewsMessage_143_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_143_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDNewsMessage_143_cref::MDNewsMessage_143_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDNewsMessage_143_cref::MDNewsMessage_143_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNewsMessage_143_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNewsMessage_143_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<unicode_string_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename LinesOfText_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[13]) );
}

inline
MDNewsMessage_143_mref::MDNewsMessage_143_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDNewsMessage_143_mref::MDNewsMessage_143_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_143_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDNewsMessage_143_mref::MDNewsMessage_143_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDNewsMessage_143_mref::MDNewsMessage_143_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNewsMessage_143_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNewsMessage_143_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<unicode_string_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename LinesOfText_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[13]) );
}

inline
MDNewsMessage_143::MDNewsMessage_143(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDNewsMessage_143::MDNewsMessage_143(
  const MDNewsMessage_143_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDNewsMessage_143::MDNewsMessage_143(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDNewsMessage_143::cref_type
MDNewsMessage_143::ref() const
{
  return MDNewsMessage_143::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_143::cref_type
MDNewsMessage_143::cref() const
{
  return MDNewsMessage_143::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_143::mref_type
MDNewsMessage_143::ref()
{
  return MDNewsMessage_143::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_143::mref_type
MDNewsMessage_143::mref()
{
  return MDNewsMessage_143::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDNewsMessage_143_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDNewsMessage_143_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDNewsMessage_143_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDNewsMessage_143_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint64_cref
MDNewsMessage_143_cref::get_OrigTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDNewsMessage_143_cref::try_get_OrigTime() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDNewsMessage_143_mref::set_OrigTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline
void
MDNewsMessage_143_mref::omit_OrigTime() const
{
  (*this)[4].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_NewsSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_NewsSource() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::set_NewsSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
MDNewsMessage_143_mref::omit_NewsSource() const
{
  (*this)[5].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_NewsID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_NewsID() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::set_NewsID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDNewsMessage_143_mref::omit_NewsID() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_LanguageCode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_LanguageCode() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::set_LanguageCode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDNewsMessage_143_mref::omit_LanguageCode() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_Headline() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_Headline() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::set_Headline() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDNewsMessage_143_mref::omit_Headline() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::get_URLLink() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::try_get_URLLink() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::set_URLLink() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDNewsMessage_143_mref::omit_URLLink() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::get_EncodedHeadlineLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::try_get_EncodedHeadlineLen() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDNewsMessage_143_mref::set_EncodedHeadlineLen() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDNewsMessage_143_mref::omit_EncodedHeadlineLen() const
{
  (*this)[10].omit();
}

inline mfast::unicode_string_cref
MDNewsMessage_143_cref::get_EncodedHeadline() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[11]);
}

inline mfast::unicode_string_cref
MDNewsMessage_143_cref::try_get_EncodedHeadline() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::unicode_string_cref>((*this)[11]);
}

inline mfast::unicode_string_mref
MDNewsMessage_143_mref::set_EncodedHeadline() const
{
  return static_cast<mfast::unicode_string_mref>((*this)[11]);
}

inline
void
MDNewsMessage_143_mref::omit_EncodedHeadline() const
{
  (*this)[11].omit();
}

inline MDNewsMessage_143_cref::RelatedSym_cref
MDNewsMessage_143_cref::get_RelatedSym() const
{
  return static_cast<MDNewsMessage_143_cref::RelatedSym_cref>((*this)[12]);
}

inline MDNewsMessage_143_cref::RelatedSym_cref
MDNewsMessage_143_cref::try_get_RelatedSym() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_143_cref::RelatedSym_cref>((*this)[12]);
}

inline MDNewsMessage_143_mref::RelatedSym_mref
MDNewsMessage_143_mref::set_RelatedSym() const
{
  return static_cast<MDNewsMessage_143_mref::RelatedSym_mref>((*this)[12]);
}

inline
void
MDNewsMessage_143_mref::omit_RelatedSym() const
{
  (*this)[12].omit();
}

inline
MDNewsMessage_143_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_143_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_143_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_143_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_143_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

template <typename Visitor>
inline void MDNewsMessage_143_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

inline mfast::uint64_cref
MDNewsMessage_143_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDNewsMessage_143_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDNewsMessage_143_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::RelatedSym_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::RelatedSym_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::RelatedSym_element_mref::set_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline MDNewsMessage_143_cref::LinesOfText_cref
MDNewsMessage_143_cref::get_LinesOfText() const
{
  return static_cast<MDNewsMessage_143_cref::LinesOfText_cref>((*this)[13]);
}

inline MDNewsMessage_143_cref::LinesOfText_cref
MDNewsMessage_143_cref::try_get_LinesOfText() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_143_cref::LinesOfText_cref>((*this)[13]);
}

inline MDNewsMessage_143_mref::LinesOfText_mref
MDNewsMessage_143_mref::set_LinesOfText() const
{
  return static_cast<MDNewsMessage_143_mref::LinesOfText_mref>((*this)[13]);
}

inline
void
MDNewsMessage_143_mref::omit_LinesOfText() const
{
  (*this)[13].omit();
}

inline
MDNewsMessage_143_cref::LinesOfText_element_cref::LinesOfText_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_143_cref::LinesOfText_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_143_mref::LinesOfText_element_mref::LinesOfText_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_143_mref::LinesOfText_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_143_cref::LinesOfText_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<unicode_string_cref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
}

template <typename Visitor>
inline void MDNewsMessage_143_mref::LinesOfText_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<unicode_string_mref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::LinesOfText_element_cref::get_Text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_143_cref::LinesOfText_element_cref::try_get_Text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDNewsMessage_143_mref::LinesOfText_element_mref::set_Text() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::LinesOfText_element_cref::get_EncodedTextLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_143_cref::LinesOfText_element_cref::try_get_EncodedTextLen() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDNewsMessage_143_mref::LinesOfText_element_mref::set_EncodedTextLen() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDNewsMessage_143_mref::LinesOfText_element_mref::omit_EncodedTextLen() const
{
  (*this)[1].omit();
}

inline mfast::unicode_string_cref
MDNewsMessage_143_cref::LinesOfText_element_cref::get_EncodedText() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[2]);
}

inline mfast::unicode_string_cref
MDNewsMessage_143_cref::LinesOfText_element_cref::try_get_EncodedText() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::unicode_string_cref>((*this)[2]);
}

inline mfast::unicode_string_mref
MDNewsMessage_143_mref::LinesOfText_element_mref::set_EncodedText() const
{
  return static_cast<mfast::unicode_string_mref>((*this)[2]);
}

inline
void
MDNewsMessage_143_mref::LinesOfText_element_mref::omit_EncodedText() const
{
  (*this)[2].omit();
}

inline
MDNewsMessage_137_cref::MDNewsMessage_137_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDNewsMessage_137_cref::MDNewsMessage_137_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_137_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDNewsMessage_137_cref::MDNewsMessage_137_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDNewsMessage_137_cref::MDNewsMessage_137_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNewsMessage_137_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNewsMessage_137_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<unicode_string_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename LinesOfText_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[13]) );
}

inline
MDNewsMessage_137_mref::MDNewsMessage_137_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDNewsMessage_137_mref::MDNewsMessage_137_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_137_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDNewsMessage_137_mref::MDNewsMessage_137_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDNewsMessage_137_mref::MDNewsMessage_137_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNewsMessage_137_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNewsMessage_137_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<unicode_string_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename LinesOfText_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[13]) );
}

inline
MDNewsMessage_137::MDNewsMessage_137(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDNewsMessage_137::MDNewsMessage_137(
  const MDNewsMessage_137_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDNewsMessage_137::MDNewsMessage_137(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDNewsMessage_137::cref_type
MDNewsMessage_137::ref() const
{
  return MDNewsMessage_137::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_137::cref_type
MDNewsMessage_137::cref() const
{
  return MDNewsMessage_137::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_137::mref_type
MDNewsMessage_137::ref()
{
  return MDNewsMessage_137::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_137::mref_type
MDNewsMessage_137::mref()
{
  return MDNewsMessage_137::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDNewsMessage_137_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDNewsMessage_137_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDNewsMessage_137_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDNewsMessage_137_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint64_cref
MDNewsMessage_137_cref::get_OrigTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDNewsMessage_137_cref::try_get_OrigTime() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDNewsMessage_137_mref::set_OrigTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline
void
MDNewsMessage_137_mref::omit_OrigTime() const
{
  (*this)[4].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_NewsSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_NewsSource() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::set_NewsSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
MDNewsMessage_137_mref::omit_NewsSource() const
{
  (*this)[5].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_NewsID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_NewsID() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::set_NewsID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDNewsMessage_137_mref::omit_NewsID() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_LanguageCode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_LanguageCode() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::set_LanguageCode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDNewsMessage_137_mref::omit_LanguageCode() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_Headline() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_Headline() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::set_Headline() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDNewsMessage_137_mref::omit_Headline() const
{
  (*this)[8].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::get_URLLink() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::try_get_URLLink() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[9]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::set_URLLink() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[9]);
}

inline
void
MDNewsMessage_137_mref::omit_URLLink() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::get_EncodedHeadlineLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::try_get_EncodedHeadlineLen() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MDNewsMessage_137_mref::set_EncodedHeadlineLen() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MDNewsMessage_137_mref::omit_EncodedHeadlineLen() const
{
  (*this)[10].omit();
}

inline mfast::unicode_string_cref
MDNewsMessage_137_cref::get_EncodedHeadline() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[11]);
}

inline mfast::unicode_string_cref
MDNewsMessage_137_cref::try_get_EncodedHeadline() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::unicode_string_cref>((*this)[11]);
}

inline mfast::unicode_string_mref
MDNewsMessage_137_mref::set_EncodedHeadline() const
{
  return static_cast<mfast::unicode_string_mref>((*this)[11]);
}

inline
void
MDNewsMessage_137_mref::omit_EncodedHeadline() const
{
  (*this)[11].omit();
}

inline MDNewsMessage_137_cref::RelatedSym_cref
MDNewsMessage_137_cref::get_RelatedSym() const
{
  return static_cast<MDNewsMessage_137_cref::RelatedSym_cref>((*this)[12]);
}

inline MDNewsMessage_137_cref::RelatedSym_cref
MDNewsMessage_137_cref::try_get_RelatedSym() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_137_cref::RelatedSym_cref>((*this)[12]);
}

inline MDNewsMessage_137_mref::RelatedSym_mref
MDNewsMessage_137_mref::set_RelatedSym() const
{
  return static_cast<MDNewsMessage_137_mref::RelatedSym_mref>((*this)[12]);
}

inline
void
MDNewsMessage_137_mref::omit_RelatedSym() const
{
  (*this)[12].omit();
}

inline
MDNewsMessage_137_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_137_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_137_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_137_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_137_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

template <typename Visitor>
inline void MDNewsMessage_137_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

inline mfast::uint64_cref
MDNewsMessage_137_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDNewsMessage_137_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDNewsMessage_137_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::RelatedSym_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::RelatedSym_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::RelatedSym_element_mref::set_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline MDNewsMessage_137_cref::LinesOfText_cref
MDNewsMessage_137_cref::get_LinesOfText() const
{
  return static_cast<MDNewsMessage_137_cref::LinesOfText_cref>((*this)[13]);
}

inline MDNewsMessage_137_cref::LinesOfText_cref
MDNewsMessage_137_cref::try_get_LinesOfText() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_137_cref::LinesOfText_cref>((*this)[13]);
}

inline MDNewsMessage_137_mref::LinesOfText_mref
MDNewsMessage_137_mref::set_LinesOfText() const
{
  return static_cast<MDNewsMessage_137_mref::LinesOfText_mref>((*this)[13]);
}

inline
void
MDNewsMessage_137_mref::omit_LinesOfText() const
{
  (*this)[13].omit();
}

inline
MDNewsMessage_137_cref::LinesOfText_element_cref::LinesOfText_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_137_cref::LinesOfText_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_137_mref::LinesOfText_element_mref::LinesOfText_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_137_mref::LinesOfText_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_137_cref::LinesOfText_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<unicode_string_cref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
}

template <typename Visitor>
inline void MDNewsMessage_137_mref::LinesOfText_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<unicode_string_mref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::LinesOfText_element_cref::get_Text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_137_cref::LinesOfText_element_cref::try_get_Text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDNewsMessage_137_mref::LinesOfText_element_mref::set_Text() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::LinesOfText_element_cref::get_EncodedTextLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_137_cref::LinesOfText_element_cref::try_get_EncodedTextLen() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDNewsMessage_137_mref::LinesOfText_element_mref::set_EncodedTextLen() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDNewsMessage_137_mref::LinesOfText_element_mref::omit_EncodedTextLen() const
{
  (*this)[1].omit();
}

inline mfast::unicode_string_cref
MDNewsMessage_137_cref::LinesOfText_element_cref::get_EncodedText() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[2]);
}

inline mfast::unicode_string_cref
MDNewsMessage_137_cref::LinesOfText_element_cref::try_get_EncodedText() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::unicode_string_cref>((*this)[2]);
}

inline mfast::unicode_string_mref
MDNewsMessage_137_mref::LinesOfText_element_mref::set_EncodedText() const
{
  return static_cast<mfast::unicode_string_mref>((*this)[2]);
}

inline
void
MDNewsMessage_137_mref::LinesOfText_element_mref::omit_EncodedText() const
{
  (*this)[2].omit();
}

inline
MDNewsMessage_120_cref::MDNewsMessage_120_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDNewsMessage_120_cref::MDNewsMessage_120_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_120_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDNewsMessage_120_cref::MDNewsMessage_120_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDNewsMessage_120_cref::MDNewsMessage_120_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNewsMessage_120_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNewsMessage_120_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[9]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename RoutingIds_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename LinesOfText_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[11]) );
}

inline
MDNewsMessage_120_mref::MDNewsMessage_120_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDNewsMessage_120_mref::MDNewsMessage_120_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDNewsMessage_120_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDNewsMessage_120_mref::MDNewsMessage_120_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDNewsMessage_120_mref::MDNewsMessage_120_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDNewsMessage_120_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDNewsMessage_120_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[9]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename RoutingIds_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[10]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename LinesOfText_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[11]) );
}

inline
MDNewsMessage_120::MDNewsMessage_120(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDNewsMessage_120::MDNewsMessage_120(
  const MDNewsMessage_120_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDNewsMessage_120::MDNewsMessage_120(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDNewsMessage_120::cref_type
MDNewsMessage_120::ref() const
{
  return MDNewsMessage_120::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_120::cref_type
MDNewsMessage_120::cref() const
{
  return MDNewsMessage_120::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_120::mref_type
MDNewsMessage_120::ref()
{
  return MDNewsMessage_120::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDNewsMessage_120::mref_type
MDNewsMessage_120::mref()
{
  return MDNewsMessage_120::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDNewsMessage_120_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDNewsMessage_120_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDNewsMessage_120_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDNewsMessage_120_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint64_cref
MDNewsMessage_120_cref::get_OrigTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
MDNewsMessage_120_cref::try_get_OrigTime() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
MDNewsMessage_120_mref::set_OrigTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline
void
MDNewsMessage_120_mref::omit_OrigTime() const
{
  (*this)[4].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::get_NewsSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::try_get_NewsSource() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::set_NewsSource() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
MDNewsMessage_120_mref::omit_NewsSource() const
{
  (*this)[5].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::get_LanguageCode() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::try_get_LanguageCode() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::set_LanguageCode() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline
void
MDNewsMessage_120_mref::omit_LanguageCode() const
{
  (*this)[6].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::get_Headline() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::try_get_Headline() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::set_Headline() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline
void
MDNewsMessage_120_mref::omit_Headline() const
{
  (*this)[7].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::get_URLLink() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::try_get_URLLink() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::set_URLLink() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline
void
MDNewsMessage_120_mref::omit_URLLink() const
{
  (*this)[8].omit();
}

inline MDNewsMessage_120_cref::RelatedSym_cref
MDNewsMessage_120_cref::get_RelatedSym() const
{
  return static_cast<MDNewsMessage_120_cref::RelatedSym_cref>((*this)[9]);
}

inline MDNewsMessage_120_cref::RelatedSym_cref
MDNewsMessage_120_cref::try_get_RelatedSym() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_120_cref::RelatedSym_cref>((*this)[9]);
}

inline MDNewsMessage_120_mref::RelatedSym_mref
MDNewsMessage_120_mref::set_RelatedSym() const
{
  return static_cast<MDNewsMessage_120_mref::RelatedSym_mref>((*this)[9]);
}

inline
void
MDNewsMessage_120_mref::omit_RelatedSym() const
{
  (*this)[9].omit();
}

inline
MDNewsMessage_120_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_120_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_120_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_120_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_120_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

template <typename Visitor>
inline void MDNewsMessage_120_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

inline mfast::uint64_cref
MDNewsMessage_120_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
MDNewsMessage_120_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
MDNewsMessage_120_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::RelatedSym_element_cref::get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::RelatedSym_element_cref::try_get_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::RelatedSym_element_mref::set_SecurityExchange() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline MDNewsMessage_120_cref::RoutingIds_cref
MDNewsMessage_120_cref::get_RoutingIds() const
{
  return static_cast<MDNewsMessage_120_cref::RoutingIds_cref>((*this)[10]);
}

inline MDNewsMessage_120_cref::RoutingIds_cref
MDNewsMessage_120_cref::try_get_RoutingIds() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_120_cref::RoutingIds_cref>((*this)[10]);
}

inline MDNewsMessage_120_mref::RoutingIds_mref
MDNewsMessage_120_mref::set_RoutingIds() const
{
  return static_cast<MDNewsMessage_120_mref::RoutingIds_mref>((*this)[10]);
}

inline
void
MDNewsMessage_120_mref::omit_RoutingIds() const
{
  (*this)[10].omit();
}

inline
MDNewsMessage_120_cref::RoutingIds_element_cref::RoutingIds_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_120_cref::RoutingIds_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_120_mref::RoutingIds_element_mref::RoutingIds_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_120_mref::RoutingIds_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_120_cref::RoutingIds_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

template <typename Visitor>
inline void MDNewsMessage_120_mref::RoutingIds_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::RoutingIds_element_cref::get_RoutingType() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::RoutingIds_element_cref::try_get_RoutingType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDNewsMessage_120_mref::RoutingIds_element_mref::set_RoutingType() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline
void
MDNewsMessage_120_mref::RoutingIds_element_mref::omit_RoutingType() const
{
  (*this)[0].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::RoutingIds_element_cref::get_RoutingID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::RoutingIds_element_cref::try_get_RoutingID() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::RoutingIds_element_mref::set_RoutingID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
void
MDNewsMessage_120_mref::RoutingIds_element_mref::omit_RoutingID() const
{
  (*this)[1].omit();
}

inline MDNewsMessage_120_cref::LinesOfText_cref
MDNewsMessage_120_cref::get_LinesOfText() const
{
  return static_cast<MDNewsMessage_120_cref::LinesOfText_cref>((*this)[11]);
}

inline MDNewsMessage_120_cref::LinesOfText_cref
MDNewsMessage_120_cref::try_get_LinesOfText() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<MDNewsMessage_120_cref::LinesOfText_cref>((*this)[11]);
}

inline MDNewsMessage_120_mref::LinesOfText_mref
MDNewsMessage_120_mref::set_LinesOfText() const
{
  return static_cast<MDNewsMessage_120_mref::LinesOfText_mref>((*this)[11]);
}

inline
void
MDNewsMessage_120_mref::omit_LinesOfText() const
{
  (*this)[11].omit();
}

inline
MDNewsMessage_120_cref::LinesOfText_element_cref::LinesOfText_element_cref(
  const mfast::value_storage*   storage,
  MDNewsMessage_120_cref::LinesOfText_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDNewsMessage_120_mref::LinesOfText_element_mref::LinesOfText_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDNewsMessage_120_mref::LinesOfText_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDNewsMessage_120_cref::LinesOfText_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
}

template <typename Visitor>
inline void MDNewsMessage_120_mref::LinesOfText_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::LinesOfText_element_cref::get_text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::LinesOfText_element_cref::try_get_text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::LinesOfText_element_mref::set_text() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::LinesOfText_element_cref::get_EncodedTextLen() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDNewsMessage_120_cref::LinesOfText_element_cref::try_get_EncodedTextLen() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDNewsMessage_120_mref::LinesOfText_element_mref::set_EncodedTextLen() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MDNewsMessage_120_mref::LinesOfText_element_mref::omit_EncodedTextLen() const
{
  (*this)[1].omit();
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::LinesOfText_element_cref::get_EncodedText() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDNewsMessage_120_cref::LinesOfText_element_cref::try_get_EncodedText() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDNewsMessage_120_mref::LinesOfText_element_mref::set_EncodedText() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline
void
MDNewsMessage_120_mref::LinesOfText_element_mref::omit_EncodedText() const
{
  (*this)[2].omit();
}

inline
MDHeartbeat_144_cref::MDHeartbeat_144_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDHeartbeat_144_cref::MDHeartbeat_144_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_144_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDHeartbeat_144_cref::MDHeartbeat_144_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDHeartbeat_144_cref::MDHeartbeat_144_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDHeartbeat_144_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDHeartbeat_144_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
MDHeartbeat_144_mref::MDHeartbeat_144_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDHeartbeat_144_mref::MDHeartbeat_144_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_144_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDHeartbeat_144_mref::MDHeartbeat_144_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDHeartbeat_144_mref::MDHeartbeat_144_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDHeartbeat_144_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDHeartbeat_144_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
MDHeartbeat_144::MDHeartbeat_144(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDHeartbeat_144::MDHeartbeat_144(
  const MDHeartbeat_144_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDHeartbeat_144::MDHeartbeat_144(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDHeartbeat_144::cref_type
MDHeartbeat_144::ref() const
{
  return MDHeartbeat_144::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_144::cref_type
MDHeartbeat_144::cref() const
{
  return MDHeartbeat_144::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_144::mref_type
MDHeartbeat_144::ref()
{
  return MDHeartbeat_144::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_144::mref_type
MDHeartbeat_144::mref()
{
  return MDHeartbeat_144::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDHeartbeat_144_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDHeartbeat_144_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDHeartbeat_144_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDHeartbeat_144_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDHeartbeat_144_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDHeartbeat_144_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDHeartbeat_144_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDHeartbeat_144_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDHeartbeat_144_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDHeartbeat_144_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline
MDHeartbeat_129_cref::MDHeartbeat_129_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDHeartbeat_129_cref::MDHeartbeat_129_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_129_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDHeartbeat_129_cref::MDHeartbeat_129_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDHeartbeat_129_cref::MDHeartbeat_129_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDHeartbeat_129_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDHeartbeat_129_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
MDHeartbeat_129_mref::MDHeartbeat_129_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDHeartbeat_129_mref::MDHeartbeat_129_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_129_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDHeartbeat_129_mref::MDHeartbeat_129_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDHeartbeat_129_mref::MDHeartbeat_129_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDHeartbeat_129_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDHeartbeat_129_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
MDHeartbeat_129::MDHeartbeat_129(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDHeartbeat_129::MDHeartbeat_129(
  const MDHeartbeat_129_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDHeartbeat_129::MDHeartbeat_129(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDHeartbeat_129::cref_type
MDHeartbeat_129::ref() const
{
  return MDHeartbeat_129::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_129::cref_type
MDHeartbeat_129::cref() const
{
  return MDHeartbeat_129::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_129::mref_type
MDHeartbeat_129::ref()
{
  return MDHeartbeat_129::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_129::mref_type
MDHeartbeat_129::mref()
{
  return MDHeartbeat_129::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDHeartbeat_129_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDHeartbeat_129_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDHeartbeat_129_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDHeartbeat_129_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDHeartbeat_129_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDHeartbeat_129_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDHeartbeat_129_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDHeartbeat_129_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDHeartbeat_129_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDHeartbeat_129_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline
MDHeartbeat_101_cref::MDHeartbeat_101_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDHeartbeat_101_cref::MDHeartbeat_101_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_101_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDHeartbeat_101_cref::MDHeartbeat_101_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDHeartbeat_101_cref::MDHeartbeat_101_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDHeartbeat_101_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDHeartbeat_101_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline
MDHeartbeat_101_mref::MDHeartbeat_101_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDHeartbeat_101_mref::MDHeartbeat_101_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDHeartbeat_101_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDHeartbeat_101_mref::MDHeartbeat_101_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDHeartbeat_101_mref::MDHeartbeat_101_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDHeartbeat_101_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDHeartbeat_101_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[4]) );
}

inline
MDHeartbeat_101::MDHeartbeat_101(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDHeartbeat_101::MDHeartbeat_101(
  const MDHeartbeat_101_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDHeartbeat_101::MDHeartbeat_101(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDHeartbeat_101::cref_type
MDHeartbeat_101::ref() const
{
  return MDHeartbeat_101::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_101::cref_type
MDHeartbeat_101::cref() const
{
  return MDHeartbeat_101::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_101::mref_type
MDHeartbeat_101::ref()
{
  return MDHeartbeat_101::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDHeartbeat_101::mref_type
MDHeartbeat_101::mref()
{
  return MDHeartbeat_101::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDHeartbeat_101_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDHeartbeat_101_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDHeartbeat_101_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDHeartbeat_101_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDHeartbeat_101_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDHeartbeat_101_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDHeartbeat_101_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDHeartbeat_101_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDHeartbeat_101_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDHeartbeat_101_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDHeartbeat_101_cref::get_PosDupFlag() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDHeartbeat_101_cref::try_get_PosDupFlag() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_mref
MDHeartbeat_101_mref::set_PosDupFlag() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[4]);
}

inline
void
MDHeartbeat_101_mref::omit_PosDupFlag() const
{
  (*this)[4].omit();
}

inline
MDLogon_118_cref::MDLogon_118_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDLogon_118_cref::MDLogon_118_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDLogon_118_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDLogon_118_cref::MDLogon_118_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDLogon_118_cref::MDLogon_118_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDLogon_118_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDLogon_118_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[7]) );
}

inline
MDLogon_118_mref::MDLogon_118_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDLogon_118_mref::MDLogon_118_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDLogon_118_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDLogon_118_mref::MDLogon_118_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDLogon_118_mref::MDLogon_118_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDLogon_118_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDLogon_118_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[7]) );
}

inline
MDLogon_118::MDLogon_118(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDLogon_118::MDLogon_118(
  const MDLogon_118_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDLogon_118::MDLogon_118(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDLogon_118::cref_type
MDLogon_118::ref() const
{
  return MDLogon_118::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDLogon_118::cref_type
MDLogon_118::cref() const
{
  return MDLogon_118::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDLogon_118::mref_type
MDLogon_118::ref()
{
  return MDLogon_118::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDLogon_118::mref_type
MDLogon_118::mref()
{
  return MDLogon_118::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDLogon_118_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDLogon_118_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDLogon_118_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDLogon_118_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDLogon_118_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDLogon_118_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDLogon_118_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::try_get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDLogon_118_cref::get_EncryptMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDLogon_118_cref::try_get_EncryptMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MDLogon_118_cref::get_HeartbeatInt() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDLogon_118_cref::try_get_HeartbeatInt() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDLogon_118_mref::set_HeartbeatInt() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::get_DefaultApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDLogon_118_cref::try_get_DefaultApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline
MDLogout_119_cref::MDLogout_119_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDLogout_119_cref::MDLogout_119_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDLogout_119_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDLogout_119_cref::MDLogout_119_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDLogout_119_cref::MDLogout_119_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDLogout_119_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDLogout_119_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
}

inline
MDLogout_119_mref::MDLogout_119_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDLogout_119_mref::MDLogout_119_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDLogout_119_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDLogout_119_mref::MDLogout_119_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDLogout_119_mref::MDLogout_119_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDLogout_119_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDLogout_119_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
}

inline
MDLogout_119::MDLogout_119(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDLogout_119::MDLogout_119(
  const MDLogout_119_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDLogout_119::MDLogout_119(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDLogout_119::cref_type
MDLogout_119::ref() const
{
  return MDLogout_119::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDLogout_119::cref_type
MDLogout_119::cref() const
{
  return MDLogout_119::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDLogout_119::mref_type
MDLogout_119::ref()
{
  return MDLogout_119::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDLogout_119::mref_type
MDLogout_119::mref()
{
  return MDLogout_119::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDLogout_119_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDLogout_119_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MDLogout_119_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MDLogout_119_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint64_cref
MDLogout_119_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
MDLogout_119_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
MDLogout_119_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::try_get_ApplID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::get_Text() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
MDLogout_119_cref::try_get_Text() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
MDLogout_119_mref::set_Text() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
MDLogout_119_mref::omit_Text() const
{
  (*this)[5].omit();
}

inline
MDSequenceReset_cref::MDSequenceReset_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDSequenceReset_cref::MDSequenceReset_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDSequenceReset_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDSequenceReset_cref::MDSequenceReset_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDSequenceReset_cref::MDSequenceReset_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSequenceReset_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSequenceReset_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 3> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline
MDSequenceReset_mref::MDSequenceReset_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDSequenceReset_mref::MDSequenceReset_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDSequenceReset_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDSequenceReset_mref::MDSequenceReset_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDSequenceReset_mref::MDSequenceReset_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDSequenceReset_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDSequenceReset_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 3> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline
MDSequenceReset::MDSequenceReset(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDSequenceReset::MDSequenceReset(
  const MDSequenceReset_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDSequenceReset::MDSequenceReset(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDSequenceReset::cref_type
MDSequenceReset::ref() const
{
  return MDSequenceReset::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSequenceReset::cref_type
MDSequenceReset::cref() const
{
  return MDSequenceReset::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDSequenceReset::mref_type
MDSequenceReset::ref()
{
  return MDSequenceReset::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDSequenceReset::mref_type
MDSequenceReset::mref()
{
  return MDSequenceReset::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MDSequenceReset_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDSequenceReset_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDSequenceReset_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MDSequenceReset_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MDSequenceReset_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint64_cref
MDSequenceReset_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_cref
MDSequenceReset_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_mref
MDSequenceReset_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDSequenceReset_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDSequenceReset_cref::try_get_ApplVerID() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline
void
MDSequenceReset_mref::omit_ApplVerID() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MDSequenceReset_cref::get_NewSeqNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MDSequenceReset_cref::try_get_NewSeqNo() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MDSequenceReset_mref::set_NewSeqNo() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

